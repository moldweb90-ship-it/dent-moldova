#!/usr/bin/env node

import https from 'https';
import http from 'http';

const BASE_URL = 'https://mdent.md';
const PROBLEM_URLS = [
  '/city/balti/credit',
  '/city/balti/parking',
  '/city/balti/sos',
  '/city/balti/weekend-work',
  '/city/balti/work24h',
  '/city/bel-tsy/credit/',
  '/city/bel-tsy/weekend-work',
  '/city/bender',
  '/city/bender/credit',
  '/city/bender/sos',
  '/city/bender/weekend-work/',
  '/city/bender/work24h',
  '/city/bendery/weekend-work',
  '/city/cahul',
  '/city/cahul/credit',
  '/city/cahul/parking',
  '/city/cahul/pediatric-dentistry',
  '/city/cahul/weekend-work',
  '/city/ceadir-lunga/credit',
  '/city/ceadir-lunga/parking',
  '/city/ceadir-lunga/pediatric-dentistry',
  '/city/ceadir-lunga/sos',
  '/city/ceadir-lunga/weekend-work',
  '/city/ceadir-lunga/work24h',
  '/city/chisinau/botanica',
  '/city/chisinau/botanica/credit',
  '/city/chisinau/botanica/parking',
  '/city/chisinau/botanica/pediatric-dentistry',
  '/city/chisinau/botanica/sos',
  '/city/chisinau/botanica/weekend-work',
  '/city/chisinau/botanica/work24h',
  '/city/chisinau/buiucani',
  '/city/chisinau/buiucani/credit',
  '/city/chisinau/buiucani/weekend-work',
  '/city/chisinau/buiucani/work24h',
  '/city/chisinau/centru/credit',
  '/city/chisinau/centru/parking',
  '/city/chisinau/centru/pediatric-dentistry',
  '/city/chisinau/centru/sos',
  '/city/chisinau/centru/work24h',
  '/city/chisinau/ciocana',
  '/city/chisinau/ciocana/credit',
  '/city/chisinau/ciocana/parking',
  '/city/chisinau/ciocana/pediatric-dentistry',
  '/city/chisinau/ciocana/sos',
  '/city/chisinau/ciocana/weekend-work',
  '/city/chisinau/ciocana/work24h',
  '/city/chisinau/ciocana/work24h/',
  '/city/chisinau/durlesti',
  '/city/chisinau/durlesti/credit'
];

function fetchPage(url) {
  return new Promise((resolve, reject) => {
    const client = url.startsWith('https:') ? https : http;
    
    client.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data
        });
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}

function extractMetaTags(html) {
  const metaTags = {};
  
  // Extract title
  const titleMatch = html.match(/<title[^>]*>([^<]*)<\/title>/i);
  if (titleMatch) {
    metaTags.title = titleMatch[1];
  }
  
  // Extract meta description
  const descMatch = html.match(/<meta[^>]*name=["']description["'][^>]*content=["']([^"']*)["']/i);
  if (descMatch) {
    metaTags.description = descMatch[1];
  }
  
  // Extract canonical
  const canonicalMatch = html.match(/<link[^>]*rel=["']canonical["'][^>]*href=["']([^"']*)["']/i);
  if (canonicalMatch) {
    metaTags.canonical = canonicalMatch[1];
  }
  
  // Extract robots
  const robotsMatch = html.match(/<meta[^>]*name=["']robots["'][^>]*content=["']([^"']*)["']/i);
  if (robotsMatch) {
    metaTags.robots = robotsMatch[1];
  }
  
  // Extract hreflang
  const hreflangMatches = html.match(/<link[^>]*hreflang=["']([^"']*)["'][^>]*href=["']([^"']*)["']/gi);
  if (hreflangMatches) {
    metaTags.hreflang = hreflangMatches.map(match => {
      const [, lang, href] = match.match(/hreflang=["']([^"']*)["'][^>]*href=["']([^"']*)["']/i);
      return { lang, href };
    });
  }
  
  return metaTags;
}

async function checkSEO() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SEO –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...\n');
  
  const results = [];
  
  for (const path of PROBLEM_URLS.slice(0, 10)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const url = BASE_URL + path;
    
    try {
      console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä—è—é: ${url}`);
      
      const response = await fetchPage(url);
      
      if (response.statusCode === 200) {
        const metaTags = extractMetaTags(response.body);
        
        const result = {
          url,
          status: 'OK',
          title: metaTags.title || '–ù–ï–¢ TITLE',
          description: metaTags.description || '–ù–ï–¢ DESCRIPTION',
          canonical: metaTags.canonical || '–ù–ï–¢ CANONICAL',
          robots: metaTags.robots || '–ù–ï–¢ ROBOTS',
          hreflang: metaTags.hreflang || []
        };
        
        results.push(result);
        
        console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.statusCode}`);
        console.log(`  üìù Title: ${result.title.substring(0, 60)}...`);
        console.log(`  üîó Canonical: ${result.canonical}`);
        console.log(`  ü§ñ Robots: ${result.robots}`);
        console.log(`  üåê Hreflang: ${result.hreflang.length} —Ç–µ–≥–æ–≤`);
        console.log('');
        
      } else {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞: HTTP ${response.statusCode}\n`);
        results.push({
          url,
          status: 'ERROR',
          error: `HTTP ${response.statusCode}`
        });
      }
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
      results.push({
        url,
        status: 'ERROR',
        error: error.message
      });
    }
  }
  
  // –°–≤–æ–¥–∫–∞
  console.log('\nüìä –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò:');
  console.log('==================');
  
  const okCount = results.filter(r => r.status === 'OK').length;
  const errorCount = results.filter(r => r.status === 'ERROR').length;
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${okCount}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);
  
  // –ü—Ä–æ–±–ª–µ–º—ã —Å canonical
  const noCanonical = results.filter(r => r.status === 'OK' && r.canonical === '–ù–ï–¢ CANONICAL');
  if (noCanonical.length > 0) {
    console.log(`\n‚ö†Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü—ã –ë–ï–ó canonical —Ç–µ–≥–æ–≤: ${noCanonical.length}`);
    noCanonical.forEach(r => console.log(`   - ${r.url}`));
  }
  
  // –ü—Ä–æ–±–ª–µ–º—ã —Å title
  const noTitle = results.filter(r => r.status === 'OK' && r.title === '–ù–ï–¢ TITLE');
  if (noTitle.length > 0) {
    console.log(`\n‚ö†Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü—ã –ë–ï–ó title: ${noTitle.length}`);
    noTitle.forEach(r => console.log(`   - ${r.url}`));
  }
  
  // –ü—Ä–æ–±–ª–µ–º—ã —Å description
  const noDescription = results.filter(r => r.status === 'OK' && r.description === '–ù–ï–¢ DESCRIPTION');
  if (noDescription.length > 0) {
    console.log(`\n‚ö†Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü—ã –ë–ï–ó description: ${noDescription.length}`);
    noDescription.forEach(r => console.log(`   - ${r.url}`));
  }
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('================');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–º–µ—é—Ç canonical —Ç–µ–≥–∏ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ URL');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ canonical URL —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  console.log('3. –î–æ–±–∞–≤—å—Ç–µ hreflang —Ç–µ–≥–∏ –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏');
  console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ robots —Ç–µ–≥–∏ —Ä–∞–∑—Ä–µ—à–∞—é—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é');
  console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkSEO().catch(console.error);
