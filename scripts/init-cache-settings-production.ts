import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';
import { siteSettings } from '../shared/schema';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
async function initCacheSettingsProduction() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  const { DATABASE_URL } = process.env;
  
  if (!DATABASE_URL) {
    console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
  }

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PostgreSQL –¥—Ä–∞–π–≤–µ—Ä
    const { drizzle: drizzlePg } = await import('drizzle-orm/postgres-js');
    const postgres = await import('postgres');
    
    const sql = postgres.default(DATABASE_URL);
    const db = drizzlePg(sql);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    const defaultCacheSettings = {
      cacheEnabled: true, // –í–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      cacheStrategy: 'networkFirst', // Network First –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–µ—Ç —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º)
      staticAssetsEnabled: true,
      staticAssetsDuration: 30, // 30 –¥–Ω–µ–π
      staticAssetsMaxSize: 100, // 100 MB
      apiDataEnabled: true,
      apiDataDuration: 15, // 15 –º–∏–Ω—É—Ç
      apiEndpoints: 'clinics,cities,districts,services',
      pagesEnabled: false, // –û–¢–ö–õ–Æ–ß–ï–ù–û –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–µ—Ç —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º)
      pagesDuration: 1, // 1 –º–∏–Ω—É—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
      pagesPreload: false, // –û–¢–ö–õ–Æ–ß–ï–ù–û –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
    };

    console.log('üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultCacheSettings);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const [key, value] of Object.entries(defaultCacheSettings)) {
      try {
        await db.insert(siteSettings).values({
          key,
          value: JSON.stringify(value),
        }).onConflictDoUpdate({
          target: siteSettings.key,
          set: {
            value: JSON.stringify(value),
            updatedAt: new Date(),
          },
        });
        
        console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${key} = ${JSON.stringify(value)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${key}:`, error);
      }
    }

    console.log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initCacheSettingsProduction().then(() => {
  console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});