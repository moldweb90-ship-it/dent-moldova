import { Request, Response, NextFunction } from 'express';
import { storage } from './storage';

export async function seoMiddleware(req: Request, res: Response, next: NextFunction) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç–æ–º –∫–ª–∏–Ω–∏–∫–∏
  const clinicMatch = req.path.match(/^\/clinic\/(?:ro\/)?(.+)$/);
  
  if (clinicMatch) {
    const slug = clinicMatch[1];
    const isRomanian = req.path.startsWith('/clinic/ro/');
    const language = isRomanian ? 'ro' : 'ru';
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
      const clinic = await storage.getClinicBySlug(slug, language);
      
      if (clinic) {
        console.log('üîç SEO Middleware - Clinic data:', {
          name: clinic.nameRu,
          googleRating: clinic.googleRating,
          googleReviewsCount: clinic.googleReviewsCount,
          dScore: clinic.dScore,
          reviewsIndex: clinic.reviewsIndex,
          workingHours: clinic.workingHours ? clinic.workingHours.length : 0,
          priceIndex: clinic.priceIndex,
          services: clinic.services ? clinic.services.length : 0,
          seoSchemaData: clinic.seoSchemaData
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
        let reviewsRating = null;
        let reviewsCount = 0;
        try {
          const reviews = await storage.getReviews({ clinicId: clinic.id, status: 'approved', limit: 1000, offset: 0 });
          if (reviews.reviews && reviews.reviews.length > 0) {
            const totalRating = reviews.reviews.reduce((sum: number, review: any) => {
              return sum + (review.averageRating || 0);
            }, 0);
            reviewsRating = Math.round((totalRating / reviews.reviews.length) * 100) / 100;
            reviewsCount = reviews.reviews.length;
          }
        } catch (error) {
          console.error('Error getting reviews for SEO:', error);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º SEO –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
        (req as any).clinicSEO = {
          title: clinic.seoTitle || (isRomanian ? `${clinic.nameRo} - clinicƒÉ stomatologicƒÉ √Æn ${clinic.city.nameRo}` : `${clinic.nameRu} - —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ –≤ ${clinic.city.nameRu}`),
          description: clinic.seoDescription || (isRomanian ? `${clinic.nameRo} - clinicƒÉ modernƒÉ √Æn ${clinic.city.nameRo}. Programare online, consulta»õie gratuitƒÉ.` : `${clinic.nameRu} - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ –≤ ${clinic.city.nameRu}. –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.`),
          keywords: clinic.seoKeywords || (isRomanian ? 'stomatologie, tratament dentar, dentist' : '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è, –ª–µ—á–µ–Ω–∏–µ –∑—É–±–æ–≤, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥'),
          h1: clinic.seoH1 || (isRomanian ? clinic.nameRo : clinic.nameRu),
          ogTitle: clinic.ogTitle || clinic.seoTitle || (isRomanian ? clinic.nameRo : clinic.nameRu),
          ogDescription: clinic.ogDescription || clinic.seoDescription,
          ogImage: clinic.ogImage,
          canonical: clinic.seoCanonical,
          robots: clinic.seoRobots || 'index,follow,max-snippet:150,max-image-preview:large,max-video-preview:30',
          schemaType: clinic.seoSchemaType || 'Dentist',
          schemaData: clinic.seoSchemaData,
          language: language,
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –¥–ª—è JSON-LD —Å—Ö–µ–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
          clinicData: {
            ...clinic,
            reviewsRating, // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
            reviewsCount,  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            services: clinic.services || [] // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω
          }
        };
      }
    } catch (error) {
      console.error('Error fetching clinic SEO data:', error);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
  const isHomepage = req.path === '/' || req.path === '/ro';
  if (isHomepage) {
    const isRomanian = req.path === '/ro';
    const language = isRomanian ? 'ro' : 'ru';
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
      const settings = await storage.getAllSiteSettings();
      const settingsMap = settings.reduce((acc: any, setting: any) => {
        acc[setting.key] = setting.value;
        return acc;
      }, {});
      
      // –î–æ–±–∞–≤–ª—è–µ–º SEO –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      (req as any).homepageSEO = {
        title: isRomanian 
          ? (settingsMap.siteTitleRo || 'MDent.md ‚Äì Catalogul clinicilor stomatologice din Moldova')
          : (settingsMap.siteTitleRu || 'MDent.md ‚Äì –í—Å–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ –ú–æ–ª–¥–æ–≤—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ | –û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å, —Ü–µ–Ω—ã, –æ—Ç–∑—ã–≤—ã'),
        description: isRomanian
          ? (settingsMap.metaDescriptionRo || 'MDent.md ‚Äì portalul unitar al clinicilor stomatologice din Moldova ü¶∑. Compara»õi pre»õurile, serviciile »ôi evaluƒÉrile, citi»õi recenziile pacien»õilor »ôi programa»õi-vƒÉ online cu 1 click. Cele mai bune clinici din »õarƒÉ √Æntr-un singur loc.')
          : (settingsMap.metaDescriptionRu || 'MDent.md ‚Äì –µ–¥–∏–Ω—ã–π –ø–æ—Ä—Ç–∞–ª —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–π –ú–æ–ª–¥–æ–≤—ã ü¶∑. –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ü–µ–Ω—ã, —É—Å–ª—É–≥–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏, —á–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ–Ω–ª–∞–π–Ω –∑–∞ 1 –∫–ª–∏–∫. –õ—É—á—à–∏–µ –∫–ª–∏–Ω–∏–∫–∏ —Å—Ç—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.'),
        keywords: isRomanian
          ? (settingsMap.keywordsRo || 'stomatologie Chi»ôinƒÉu, stomatologie Moldova, cele mai bune stomatologii, stomatologie recenzii, implanturi Chi»ôinƒÉu, fa»õete Chi»ôinƒÉu, stomatologie pre»õuri, programare stomatolog online, stomatologie pediatricƒÉ, stomatologie 24/7')
          : (settingsMap.keywordsRu || '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è –ö–∏—à–∏–Ω—ë–≤, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è –ú–æ–ª–¥–æ–≤–∞, –ª—É—á—à–∏–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è –æ—Ç–∑—ã–≤—ã, –∏–º–ø–ª–∞–Ω—Ç—ã –ö–∏—à–∏–Ω—ë–≤, –≤–∏–Ω–∏—Ä—ã –ö–∏—à–∏–Ω—ë–≤, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è —Ü–µ–Ω—ã, –∑–∞–ø–∏—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –æ–Ω–ª–∞–π–Ω, –¥–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è 24/7'),
        h1: isRomanian
          ? (settingsMap.h1Ro || 'Catalogul clinicilor stomatologice din Moldova')
          : (settingsMap.h1Ru || '–ö–∞—Ç–∞–ª–æ–≥ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫ –≤ –ú–æ–ª–¥–æ–≤–µ'),
        ogTitle: isRomanian
          ? (settingsMap.ogTitleRo || settingsMap.siteTitleRo || 'MDent.md ‚Äì Portalul unitar al clinicilor stomatologice din Moldova')
          : (settingsMap.ogTitleRu || settingsMap.siteTitleRu || 'MDent.md ‚Äì –ï–¥–∏–Ω—ã–π –ø–æ—Ä—Ç–∞–ª —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–π –ú–æ–ª–¥–æ–≤—ã'),
        ogDescription: isRomanian
          ? (settingsMap.ogDescriptionRo || settingsMap.metaDescriptionRo || 'GƒÉsi»õi stomatologia potrivitƒÉ √Æn Moldova: pre»õuri, servicii, recenzii, programare online. MDent.md ‚Äì toate clinicile din »õarƒÉ √Æntr-un singur loc.')
          : (settingsMap.ogDescriptionRu || settingsMap.metaDescriptionRu || '–ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é –≤ –ú–æ–ª–¥–æ–≤–µ: —Ü–µ–Ω—ã, —É—Å–ª—É–≥–∏, –æ—Ç–∑—ã–≤—ã, –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å. MDent.md ‚Äì –≤—Å–µ –∫–ª–∏–Ω–∏–∫–∏ —Å—Ç—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.'),
        ogImage: isRomanian
          ? (settingsMap.ogImageRo || settingsMap.logo || '')
          : (settingsMap.ogImageRu || settingsMap.logo || ''),
        canonical: isRomanian
          ? (settingsMap.canonicalRo || 'https://mdent.md/ro/')
          : (settingsMap.canonicalRu || 'https://mdent.md/'),
        robots: settingsMap.robots || 'index,follow,max-snippet:150,max-image-preview:large,max-video-preview:30',
        schemaType: settingsMap.schemaType || 'Organization',
        schemaData: settingsMap.schemaData || '',
        language: language,
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞ –¥–ª—è JSON-LD —Å—Ö–µ–º—ã
        settingsMap: settingsMap
      };
    } catch (error) {
      console.error('Error fetching homepage SEO data:', error);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ—É–Ω–∫—Ü–∏–π
  const featureMatch = req.path.match(/^\/(?:ro\/)?(?:city\/([^\/]+)\/(?:([^\/]+)\/)?)?(?:pediatric-dentistry|parking|sos|work24h|credit|weekend-work)$/);
  if (featureMatch) {
    const isRomanian = req.path.startsWith('/ro');
    const language = isRomanian ? 'ro' : 'ru';
    const citySlug = featureMatch[1];
    const districtSlug = featureMatch[2];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–∞–π–æ–Ω–æ–≤
      const cities = await storage.getCities();
      const districts = await storage.getDistrictsByCity(citySlug || '');
      
      const selectedCity = citySlug ? cities.find(c => c[language === 'ro' ? 'slugRo' : 'slugRu'] === citySlug) : null;
      const selectedDistrict = districtSlug ? districts.find(d => d[language === 'ro' ? 'slugRo' : 'slugRu'] === districtSlug) : null;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ URL
      let feature = '';
      if (req.path.includes('pediatric-dentistry')) feature = 'pediatricDentistry';
      else if (req.path.includes('parking')) feature = 'parking';
      else if (req.path.includes('sos')) feature = 'sos';
      else if (req.path.includes('work24h')) feature = 'work24h';
      else if (req.path.includes('credit')) feature = 'credit';
      else if (req.path.includes('weekend-work')) feature = 'weekendWork';
      
      const featureNames: Record<string, { ru: string, ro: string, titleRu: string, titleRo: string }> = {
        'pediatricDentistry': { ru: '–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è', ro: 'Stomatologie pediatricƒÉ', titleRu: '–î–µ—Ç—Å–∫–∏–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏', titleRo: 'Stomatologii pediatrice' },
        'parking': { ru: '–ü–∞—Ä–∫–æ–≤–∫–∞', ro: 'Parcare', titleRu: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ —Å –ø–∞—Ä–∫–æ–≤–∫–æ–π', titleRo: 'Stomatologii cu parcare' },
        'sos': { ru: 'SOS —É—Å–ª—É–≥–∏', ro: 'Servicii SOS', titleRu: '–°—Ä–æ—á–Ω—ã–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏', titleRo: 'Stomatologii urgente' },
        'work24h': { ru: '–†–∞–±–æ—Ç–∞ 24 —á–∞—Å–∞', ro: 'Lucru 24 ore', titleRu: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏', titleRo: 'Stomatologii 24/7' },
        'credit': { ru: '–ö—Ä–µ–¥–∏—Ç', ro: 'Credit', titleRu: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É', titleRo: 'Stomatologii √Æn rate' },
        'weekendWork': { ru: '–†–∞–±–æ—Ç–∞ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ', ro: 'Lucru √Æn weekend', titleRu: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ', titleRo: 'Stomatologii care lucreazƒÉ √Æn weekend' }
      };
      
      // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–∞–π–æ–Ω–æ–≤
      const getCityNameDeclension = (city: any) => {
        if (!city) return '';
        
        if (language === 'ru') {
          const cityDecl: Record<string, string> = {
            '–ö–∏—à–∏–Ω—ë–≤': '–ö–∏—à–∏–Ω—ë–≤–µ',
            '–ë–µ–ª—å—Ü—ã': '–ë–µ–ª—å—Ü–∞—Ö', 
            '–ö–æ–º—Ä–∞—Ç': '–ö–æ–º—Ä–∞—Ç–µ',
            '–¢–∏—Ä–∞—Å–ø–æ–ª—å': '–¢–∏—Ä–∞—Å–ø–æ–ª–µ',
            '–ö–∞—Ö—É–ª': '–ö–∞—Ö—É–ª–µ',
            '–û—Ä—Ö–µ–π': '–û—Ä—Ö–µ–µ',
            '–°–æ—Ä–æ–∫–∞': '–°–æ—Ä–æ–∫–µ',
            '–£–Ω–≥–µ–Ω—ã': '–£–Ω–≥–µ–Ω–∞—Ö'
          };
          return cityDecl[city.nameRu] || city.nameRu;
        } else {
          return city.nameRo;
        }
      };

      const getDistrictNameDeclension = (district: any) => {
        if (!district) return '';
        
        if (language === 'ru') {
          const districtDecl: Record<string, string> = {
            '–¶–µ–Ω—Ç—Ä': '–¶–µ–Ω—Ç—Ä–µ',
            '–ë–æ—Ç–∞–Ω–∏–∫–∞': '–ë–æ—Ç–∞–Ω–∏–∫–µ',
            '–†—ã—à–∫–∞–Ω—å': '–†—ã—à–∫–∞–Ω–∞—Ö',
            '–ß–µ–∫–∞–Ω—ã': '–ß–µ–∫–∞–Ω–∞—Ö',
            '–°–∫—É–ª—è–Ω–∫–∞': '–°–∫—É–ª—è–Ω–∫–µ',
            '–ë—É—é–∫–∞–Ω—ã': '–ë—É—é–∫–∞–Ω–∞—Ö',
            '–¢–µ–ª–µ—Ü–µ–Ω—Ç—Ä': '–¢–µ–ª–µ—Ü–µ–Ω—Ç—Ä–µ',
            '–ü–æ—Å—Ç': '–ü–æ—Å—Ç—É',
            '–†—ã—à–∫–∞–Ω–æ–≤–∫–∞': '–†—ã—à–∫–∞–Ω–æ–≤–∫–µ',
            '–ë–æ—Ç–∞–Ω–∏–∫–∞-1': '–ë–æ—Ç–∞–Ω–∏–∫–µ',
            '–ë–æ—Ç–∞–Ω–∏–∫–∞-2': '–ë–æ—Ç–∞–Ω–∏–∫–µ',
            '–ß–µ–∫–∞–Ω—ã-1': '–ß–µ–∫–∞–Ω–∞—Ö',
            '–ß–µ–∫–∞–Ω—ã-2': '–ß–µ–∫–∞–Ω–∞—Ö',
            '–°–∫—É–ª—è–Ω–∫–∞-1': '–°–∫—É–ª—è–Ω–∫–µ',
            '–°–∫—É–ª—è–Ω–∫–∞-2': '–°–∫—É–ª—è–Ω–∫–µ',
            '–°—Ç–∞—Ä–∞—è –ü–æ—á—Ç–∞': '–°—Ç–∞—Ä–æ–π –ü–æ—á—Ç–µ',
            '–ù–æ–≤–∞—è –ü–æ—á—Ç–∞': '–ù–æ–≤–æ–π –ü–æ—á—Ç–µ'
          };
          return districtDecl[district.nameRu] || district.nameRu;
        } else {
          return district.nameRo;
        }
      };

      const getDistrictPreposition = (district: any) => {
        if (!district) return '–Ω–∞';
        
        if (language === 'ru') {
          // –î–ª—è "–¶–µ–Ω—Ç—Ä" –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–≥ "–≤", –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö "–Ω–∞"
          return district.nameRu === '–¶–µ–Ω—Ç—Ä' ? '–≤' : '–Ω–∞';
        } else {
          return '√Æn'; // –î–ª—è —Ä—É–º—ã–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤—Å–µ–≥–¥–∞ "√Æn"
        }
      };

      const featureInfo = featureNames[feature];
      if (featureInfo) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ—É–Ω–∫—Ü–∏–∏
        let title, description, keywords;
        
        if (selectedCity && selectedDistrict) {
          const cityName = getCityNameDeclension(selectedCity);
          const districtName = getDistrictNameDeclension(selectedDistrict);
          const districtPreposition = getDistrictPreposition(selectedDistrict);
          title = language === 'ru' 
            ? `${featureInfo.titleRu} –≤ ${cityName} ${districtPreposition} ${districtName} | MDent.md`
            : `${featureInfo.titleRo} √Æn ${cityName}, ${districtName} | MDent.md`;
          description = language === 'ru'
            ? `–ù–∞–π–¥–∏—Ç–µ ${featureInfo.titleRu.toLowerCase()} –≤ —Ä–∞–π–æ–Ω–µ ${districtName}, ${cityName}. –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω, –æ—Ç–∑—ã–≤—ã, —Ü–µ–Ω—ã, –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã.`
            : `GƒÉsi»õi ${featureInfo.titleRo.toLowerCase()} √Æn sectorul ${districtName}, ${cityName}. Programare online, recenzii, pre»õuri, adrese »ôi telefoane.`;
          keywords = language === 'ru'
            ? `${featureInfo.ru.toLowerCase()} ${districtName} ${cityName}, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è ${districtName}, ${featureInfo.ru.toLowerCase()} ${cityName}`
            : `${featureInfo.ro.toLowerCase()} ${districtName} ${cityName}, stomatologie ${districtName}, ${featureInfo.ro.toLowerCase()} ${cityName}`;
        } else if (selectedCity) {
          const cityName = getCityNameDeclension(selectedCity);
          title = language === 'ru' 
            ? `${featureInfo.titleRu} –≤ ${cityName} | MDent.md`
            : `${featureInfo.titleRo} √Æn ${cityName} | MDent.md`;
          description = language === 'ru'
            ? `–ù–∞–π–¥–∏—Ç–µ ${featureInfo.titleRu.toLowerCase()} –≤ ${cityName}. –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω, –æ—Ç–∑—ã–≤—ã, —Ü–µ–Ω—ã, –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã.`
            : `GƒÉsi»õi ${featureInfo.titleRo.toLowerCase()} √Æn ${cityName}. Programare online, recenzii, pre»õuri, adrese »ôi telefoane.`;
          keywords = language === 'ru'
            ? `${featureInfo.ru.toLowerCase()} ${cityName}, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è ${cityName}, ${featureInfo.ru.toLowerCase()}`
            : `${featureInfo.ro.toLowerCase()} ${cityName}, stomatologie ${cityName}, ${featureInfo.ro.toLowerCase()}`;
        } else {
          title = language === 'ru' 
            ? `${featureInfo.titleRu} –≤ –ú–æ–ª–¥–æ–≤–µ | MDent.md`
            : `${featureInfo.titleRo} √Æn Moldova | MDent.md`;
          description = language === 'ru'
            ? `–ù–∞–π–¥–∏—Ç–µ ${featureInfo.titleRu.toLowerCase()} –≤ –ú–æ–ª–¥–æ–≤–µ. –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω, –æ—Ç–∑—ã–≤—ã, —Ü–µ–Ω—ã, –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã.`
            : `GƒÉsi»õi ${featureInfo.titleRo.toLowerCase()} √Æn Moldova. Programare online, recenzii, pre»õuri, adrese »ôi telefoane.`;
          keywords = language === 'ru'
            ? `${featureInfo.ru.toLowerCase()}, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è –ú–æ–ª–¥–æ–≤–∞, ${featureInfo.ru.toLowerCase()} –∫–ª–∏–Ω–∏–∫–∏`
            : `${featureInfo.ro.toLowerCase()}, stomatologie Moldova, ${featureInfo.ro.toLowerCase()} clinici`;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º baseUrl –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const protocol = req.headers['x-forwarded-proto'] || (req.secure ? 'https' : 'http');
        const host = req.headers.host || 'localhost:5000';
        const baseUrl = `${protocol}://${host}`;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é Schema.org —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–∞–ª–æ–≥–∞
        const schemaData = {
          name: title.replace(' | MDent.md', ''),
          description,
          url: `${baseUrl}${req.path}`,
          about: {
            '@type': 'MedicalSpecialty',
            name: featureInfo[language === 'ro' ? 'ro' : 'ru']
          },
          mainEntity: {
            '@type': 'ItemList',
            name: language === 'ru' ? '–°–ø–∏—Å–æ–∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫' : 'Lista clinicilor stomatologice',
            description: language === 'ru' ? '–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫' : 'Catalogul clinicilor stomatologice verificate'
          }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–æ–¥
        if (selectedCity) {
          schemaData.spatialCoverage = {
            '@type': 'Place',
            name: selectedCity[language === 'ro' ? 'nameRo' : 'nameRu'],
            address: {
              '@type': 'PostalAddress', 
              addressLocality: selectedCity[language === 'ro' ? 'nameRo' : 'nameRu'],
              addressCountry: 'MD'
            }
          };
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
          if (selectedDistrict) {
            schemaData.spatialCoverage.address.addressRegion = selectedDistrict[language === 'ro' ? 'nameRo' : 'nameRu'];
          }
        }

        (req as any).featureSEO = {
          title,
          description,
          keywords,
          h1: title.replace(' | MDent.md', ''),
          ogTitle: title,
          ogDescription: description,
          ogImage: `${baseUrl}/images/clinic-image-1757955205248-68680144.png`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å–∞–π—Ç–∞
          canonical: `${baseUrl}${req.path}`,
          robots: 'index,follow,max-snippet:150,max-image-preview:large,max-video-preview:30',
          language,
          schemaType: 'CollectionPage',
          schemaData
        };
      }
    } catch (error) {
      console.error('Error fetching feature SEO data:', error);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ä–∞–π–æ–Ω–æ–≤
  const cityMatch = req.path.match(/^\/(?:ro\/)?city\/([^\/]+)(?:\/([^\/]+))?$/);
  if (cityMatch) {
    const isRomanian = req.path.startsWith('/ro');
    const language = isRomanian ? 'ro' : 'ru';
    const citySlug = cityMatch[1];
    const districtSlug = cityMatch[2];
    
    try {
      const cities = await storage.getCities();
      const selectedCity = cities.find(c => c[language === 'ro' ? 'slugRo' : 'slugRu'] === citySlug);
      
      if (selectedCity) {
        let selectedDistrict = null;
        if (districtSlug) {
          const districts = await storage.getDistrictsByCity(selectedCity.id);
          selectedDistrict = districts.find(d => d[language === 'ro' ? 'slugRo' : 'slugRu'] === districtSlug);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –≥–æ—Ä–æ–¥–æ–≤
        const getCityNameDeclensionLocal = (city: any) => {
          if (!city) return '';
          
          if (language === 'ru') {
            const cityDecl: Record<string, string> = {
              '–ö–∏—à–∏–Ω—ë–≤': '–ö–∏—à–∏–Ω—ë–≤–µ',
              '–ë–µ–ª—å—Ü—ã': '–ë–µ–ª—å—Ü–∞—Ö', 
              '–ö–æ–º—Ä–∞—Ç': '–ö–æ–º—Ä–∞—Ç–µ',
              '–¢–∏—Ä–∞—Å–ø–æ–ª—å': '–¢–∏—Ä–∞—Å–ø–æ–ª–µ',
              '–ö–∞—Ö—É–ª': '–ö–∞—Ö—É–ª–µ',
              '–û—Ä—Ö–µ–π': '–û—Ä—Ö–µ–µ',
              '–°–æ—Ä–æ–∫–∞': '–°–æ—Ä–æ–∫–µ',
              '–£–Ω–≥–µ–Ω—ã': '–£–Ω–≥–µ–Ω–∞—Ö'
            };
            return cityDecl[city.nameRu] || city.nameRu;
          } else {
            return city.nameRo;
          }
        };

        const getDistrictNameDeclensionLocal = (district: any) => {
          if (!district) return '';
          
          if (language === 'ru') {
            const districtDecl: Record<string, string> = {
              '–¶–µ–Ω—Ç—Ä': '–¶–µ–Ω—Ç—Ä–µ',
              '–ë–æ—Ç–∞–Ω–∏–∫–∞': '–ë–æ—Ç–∞–Ω–∏–∫–µ',
              '–†—ã—à–∫–∞–Ω—å': '–†—ã—à–∫–∞–Ω–∞—Ö',
              '–ß–µ–∫–∞–Ω—ã': '–ß–µ–∫–∞–Ω–∞—Ö',
              '–°–∫—É–ª—è–Ω–∫–∞': '–°–∫—É–ª—è–Ω–∫–µ',
              '–ë—É—é–∫–∞–Ω—ã': '–ë—É—é–∫–∞–Ω–∞—Ö',
              '–¢–µ–ª–µ—Ü–µ–Ω—Ç—Ä': '–¢–µ–ª–µ—Ü–µ–Ω—Ç—Ä–µ',
              '–ü–æ—Å—Ç': '–ü–æ—Å—Ç—É',
              '–†—ã—à–∫–∞–Ω–æ–≤–∫–∞': '–†—ã—à–∫–∞–Ω–æ–≤–∫–µ',
              '–ë–æ—Ç–∞–Ω–∏–∫–∞-1': '–ë–æ—Ç–∞–Ω–∏–∫–µ',
              '–ë–æ—Ç–∞–Ω–∏–∫–∞-2': '–ë–æ—Ç–∞–Ω–∏–∫–µ',
              '–ß–µ–∫–∞–Ω—ã-1': '–ß–µ–∫–∞–Ω–∞—Ö',
              '–ß–µ–∫–∞–Ω—ã-2': '–ß–µ–∫–∞–Ω–∞—Ö',
              '–°–∫—É–ª—è–Ω–∫–∞-1': '–°–∫—É–ª—è–Ω–∫–µ',
              '–°–∫—É–ª—è–Ω–∫–∞-2': '–°–∫—É–ª—è–Ω–∫–µ',
              '–°—Ç–∞—Ä–∞—è –ü–æ—á—Ç–∞': '–°—Ç–∞—Ä–æ–π –ü–æ—á—Ç–µ',
              '–ù–æ–≤–∞—è –ü–æ—á—Ç–∞': '–ù–æ–≤–æ–π –ü–æ—á—Ç–µ'
            };
            return districtDecl[district.nameRu] || district.nameRu;
          } else {
            return district.nameRo;
          }
        };

        const getDistrictPrepositionLocal = (district: any) => {
          if (!district) return '–Ω–∞';
          
          if (language === 'ru') {
            // –î–ª—è "–¶–µ–Ω—Ç—Ä" –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–≥ "–≤", –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö "–Ω–∞"
            return district.nameRu === '–¶–µ–Ω—Ç—Ä' ? '–≤' : '–Ω–∞';
          } else {
            return '√Æn'; // –î–ª—è —Ä—É–º—ã–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤—Å–µ–≥–¥–∞ "√Æn"
          }
        };

        const cityName = getCityNameDeclensionLocal(selectedCity);
        const districtName = selectedDistrict ? getDistrictNameDeclensionLocal(selectedDistrict) : '';
        
        let title, description, keywords;
        
        if (selectedDistrict) {
          // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–π–æ–Ω–∞
          const districtPreposition = getDistrictPrepositionLocal(selectedDistrict);
          title = language === 'ru' 
            ? `–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ –≤ ${cityName} ${districtPreposition} ${districtName} | MDent.md`
            : `Clinici stomatologice √Æn sectorul ${districtName}, ${cityName} | MDent.md`;
          description = language === 'ru'
            ? `–ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–∏–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–ª–∏–Ω–∏–∫–∏ –≤ —Ä–∞–π–æ–Ω–µ ${districtName}, ${cityName}. –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω, –æ—Ç–∑—ã–≤—ã, —Ü–µ–Ω—ã, –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã.`
            : `GƒÉsi»õi cele mai bune clinici stomatologice √Æn sectorul ${districtName}, ${cityName}. Programare online, recenzii, pre»õuri, adrese »ôi telefoane.`;
          keywords = language === 'ru'
            ? `—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è ${districtName} ${cityName}, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥ ${districtName}, –ª–µ—á–µ–Ω–∏–µ –∑—É–±–æ–≤ ${districtName}`
            : `stomatologie ${districtName} ${cityName}, stomatolog ${districtName}, tratament dentar ${districtName}`;
        } else {
          // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ä–æ–¥–∞
          title = language === 'ru' 
            ? `–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ –≤ ${cityName} | MDent.md`
            : `Clinici stomatologice √Æn ${cityName} | MDent.md`;
          description = language === 'ru'
            ? `–ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–∏–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–ª–∏–Ω–∏–∫–∏ –≤ ${cityName}. –ó–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω, –æ—Ç–∑—ã–≤—ã, —Ü–µ–Ω—ã, –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã.`
            : `GƒÉsi»õi cele mai bune clinici stomatologice √Æn ${cityName}. Programare online, recenzii, pre»õuri, adrese »ôi telefoane.`;
          keywords = language === 'ru'
            ? `—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è ${cityName}, —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥ ${cityName}, –ª–µ—á–µ–Ω–∏–µ –∑—É–±–æ–≤ ${cityName}, –∫–ª–∏–Ω–∏–∫–∞ ${cityName}`
            : `stomatologie ${cityName}, stomatolog ${cityName}, tratament dentar ${cityName}, clinicƒÉ ${cityName}`;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º baseUrl –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const protocol = req.headers['x-forwarded-proto'] || (req.secure ? 'https' : 'http');
        const host = req.headers.host || 'localhost:5000';
        const baseUrl = `${protocol}://${host}`;

        // Schema.org –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –ª–æ–∫–∞—Ü–∏–π
        const schemaData = {
          name: title.replace(' | MDent.md', ''),
          description,
          url: `${baseUrl}${req.path}`,
          spatialCoverage: {
            '@type': 'Place',
            name: selectedDistrict ? `${districtName}, ${cityName}` : cityName,
            address: {
              '@type': 'PostalAddress',
              addressLocality: cityName,
              addressCountry: 'MD'
            }
          },
          mainEntity: {
            '@type': 'ItemList',
            name: language === 'ru' ? '–°–ø–∏—Å–æ–∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫' : 'Lista clinicilor stomatologice',
            description: language === 'ru' ? '–ö–∞—Ç–∞–ª–æ–≥ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫ –≤ —Ä–µ–≥–∏–æ–Ω–µ' : 'Catalogul clinicilor stomatologice din regiune'
          },
          provider: {
            '@type': 'Organization',
            name: 'Dent Moldova',
            url: baseUrl
          }
        };
        
        if (selectedDistrict) {
          schemaData.spatialCoverage.address.addressRegion = districtName;
        }
        
        (req as any).locationSEO = {
          title,
          description,
          keywords,
          h1: title.replace(' | MDent.md', ''),
          ogTitle: title,
          ogDescription: description,
          ogImage: `${baseUrl}/images/clinic-image-1757955205248-68680144.png`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å–∞–π—Ç–∞
          canonical: `${baseUrl}${req.path}`,
          robots: 'index,follow,max-snippet:150,max-image-preview:large,max-video-preview:30',
          language,
          schemaType: 'CollectionPage',
          schemaData
        };
      }
    } catch (error) {
      console.error('Error fetching location SEO data:', error);
    }
  }
  
  next();
}
