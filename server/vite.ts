import express, { type Express } from "express";
import fs from "fs";
import path from "path";
import { createServer as createViteServer, createLogger } from "vite";
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–π JSON-LD —Å—Ö–µ–º—ã
function generateBasicSchema(seoData: any, settingsMap: any, clinicData?: any) {
  const baseUrl = settingsMap.websiteUrl || 'https://dentmoldova.md';
  const organizationName = settingsMap.organizationName || 'Dent Moldova';
  const organizationDescription = settingsMap.organizationDescription || '–ö–∞—Ç–∞–ª–æ–≥ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫ –≤ –ú–æ–ª–¥–æ–≤–µ';
  const organizationCity = settingsMap.organizationCity || '–ö–∏—à–∏–Ω—ë–≤';
  const organizationCountry = settingsMap.organizationCountry || 'MD';
  const businessType = settingsMap.businessType || 'Dentist';
  const businessPriceRange = settingsMap.businessPriceRange || '$$';
  const businessOpeningHours = settingsMap.businessOpeningHours || 'Mo-Fr 09:00-18:00';
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ö–µ–º—ã
  const schemaType = seoData.schemaType || 'Organization';
  
  // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Å—Ö–µ–º
  const baseSchema = {
    "@context": "https://schema.org",
    "@type": schemaType,
    "name": clinicData?.nameRu || organizationName,
    "description": clinicData?.seoDescriptionRu || organizationDescription,
    "url": clinicData ? `${baseUrl}/clinic/${clinicData.slug}` : baseUrl,
    "logo": clinicData?.logoUrl ? `${baseUrl}${clinicData.logoUrl}` : (settingsMap.logo ? `${baseUrl}${settingsMap.logo}` : undefined),
    "address": {
      "@type": "PostalAddress",
      "addressLocality": clinicData?.city?.nameRu || organizationCity,
      "addressCountry": organizationCountry,
      "streetAddress": clinicData?.addressRu
    },
    "contactPoint": {
      "@type": "ContactPoint",
      "contactType": "customer service",
      "availableLanguage": ["Russian", "Romanian"],
      "telephone": clinicData?.phone
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏
  if (clinicData) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤ > Google —Ä–µ–π—Ç–∏–Ω–≥
    if (clinicData.reviewsRating && clinicData.reviewsCount) {
      baseSchema.aggregateRating = {
        "@type": "AggregateRating",
        "ratingValue": clinicData.reviewsRating,
        "reviewCount": clinicData.reviewsCount,
        "bestRating": 5,
        "worstRating": 1
      };
    } else if (clinicData.googleRating && clinicData.googleReviewsCount) {
      // Fallback –Ω–∞ Google —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤
      baseSchema.aggregateRating = {
        "@type": "AggregateRating",
        "ratingValue": parseFloat(clinicData.googleRating),
        "reviewCount": clinicData.googleReviewsCount,
        "bestRating": 5,
        "worstRating": 1
      };
    }

    // DentHUB —Ä–µ–π—Ç–∏–Ω–≥ (–∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)
    if (clinicData.dScore) {
      baseSchema.additionalProperty = [
        {
          "@type": "PropertyValue",
          "name": "DentHUB Score",
          "value": clinicData.dScore,
          "maxValue": 100,
          "description": "–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ DentHUB"
        }
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã DentHUB –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      if (clinicData.reviewsIndex) {
        baseSchema.additionalProperty.push({
          "@type": "PropertyValue",
          "name": "Reviews Index",
          "value": clinicData.reviewsIndex,
          "maxValue": 100,
          "description": "–ò–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–æ–≤"
        });
      }

      if (clinicData.trustIndex) {
        baseSchema.additionalProperty.push({
          "@type": "PropertyValue",
          "name": "Trust Index",
          "value": clinicData.trustIndex,
          "maxValue": 100,
          "description": "–ò–Ω–¥–µ–∫—Å –¥–æ–≤–µ—Ä–∏—è"
        });
      }

      if (clinicData.accessIndex) {
        baseSchema.additionalProperty.push({
          "@type": "PropertyValue",
          "name": "Access Index",
          "value": clinicData.accessIndex,
          "maxValue": 100,
          "description": "–ò–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
        });
      }

      if (clinicData.priceIndex) {
        baseSchema.additionalProperty.push({
          "@type": "PropertyValue",
          "name": "Price Index",
          "value": clinicData.priceIndex,
          "maxValue": 100,
          "description": "–¶–µ–Ω–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å"
        });
      }
    }

            // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏, –ø–æ—Ç–æ–º fallback –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏
            if (clinicData.services && clinicData.services.length > 0) {
              console.log('üîç Analyzing services for medicalSpecialty:', clinicData.services.map((s: any) => s.name));
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª—É–≥
              const serviceSpecialties = new Set<string>();
              
              clinicData.services.forEach((service: any) => {
                const serviceName = service.name.toLowerCase();
                
                // –ü–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —É—Å–ª—É–≥ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                
                // –ò–º–ø–ª–∞–Ω—Ç–æ–ª–æ–≥–∏—è
                if (serviceName.includes('–∏–º–ø–ª–∞–Ω—Ç') || serviceName.includes('implant') || serviceName.includes('–∏–º–ø–ª–∞–Ω—Ç–∞—Ç') ||
                    serviceName.includes('all-on-4') || serviceName.includes('all-on-6') || serviceName.includes('—Å–∏–Ω—É—Å-–ª–∏—Ñ—Ç') ||
                    serviceName.includes('–∫–æ—Å—Ç–Ω–∞—è –ø–ª–∞—Å—Ç–∏–∫–∞') || serviceName.includes('–ª–∞–∑–µ—Ä–Ω–∞—è –∏–º–ø–ª–∞–Ω—Ç–∞—Ü') ||
                    serviceName.includes('–æ–¥–Ω–æ–º–æ–º–µ–Ω—Ç–Ω') && serviceName.includes('–∏–º–ø–ª–∞–Ω—Ç–∞—Ü')) {
                  serviceSpecialties.add('Implantology');
                }
                
                // –û—Ä–∞–ª—å–Ω–∞—è —Ö–∏—Ä—É—Ä–≥–∏—è
                if (serviceName.includes('—Ö–∏—Ä—É—Ä–≥') || serviceName.includes('—É–¥–∞–ª–µ–Ω') || serviceName.includes('surgery') || 
                    serviceName.includes('extraction') || serviceName.includes('–æ–ø–µ—Ä–∞—Ü') || serviceName.includes('—Ä–µ–∑–µ–∫—Ü') ||
                    serviceName.includes('—Ü–∏—Å—Ç—ç–∫—Ç–æ–º') || serviceName.includes('–∏—Å—Å–µ—á–µ–Ω') || serviceName.includes('–∫–∏—Å—Ç') ||
                    serviceName.includes('–∑—É–± –º—É–¥—Ä–æ—Å—Ç') || serviceName.includes('–ª–∞–∑–µ—Ä–Ω–∞—è —Ö–∏—Ä—É—Ä–≥') ||
                    serviceName.includes('—É–∑–¥–µ—á–∫') || serviceName.includes('–º–∏–Ω–∏-–∏–º–ø–ª–∞–Ω—Ç')) {
                  serviceSpecialties.add('Oral Surgery');
                }
                
                // –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è
                if (serviceName.includes('–±—Ä–µ–∫–µ—Ç') || serviceName.includes('–æ—Ä—Ç–æ–¥–æ–Ω—Ç') || serviceName.includes('orthodont') ||
                    serviceName.includes('–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω') || serviceName.includes('–∫–∞–ø–ø') || serviceName.includes('—ç–ª–∞–π–Ω–µ—Ä') ||
                    serviceName.includes('—Ä–µ—Ç–µ–π–Ω–µ—Ä') || serviceName.includes('–ø–ª–∞—Å—Ç–∏–Ω–∫') || serviceName.includes('invisalign') ||
                    serviceName.includes('–ª–∏–Ω–≥–≤–∞–ª—å–Ω') || serviceName.includes('—Å–∞–ø—Ñ–∏—Ä–æ–≤') || serviceName.includes('–∫–µ—Ä–∞–º–∏—á–µ—Å–∫')) {
                  serviceSpecialties.add('Orthodontics');
                }
                
                // –ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (serviceName.includes('–ø—Ä–æ—Ç–µ–∑') || serviceName.includes('prosthodont') || serviceName.includes('–∫–æ—Ä–æ–Ω') ||
                    serviceName.includes('–º–æ—Å—Ç') || serviceName.includes('—Å—ä–µ–º–Ω') || serviceName.includes('–∑—É–±–Ω–æ–π –ø—Ä–æ—Ç–µ–∑') ||
                    serviceName.includes('–≤–∫–ª–∞–¥–∫') || serviceName.includes('–Ω–∞–∫–ª–∞–¥–∫') || serviceName.includes('—à—Ç–∏—Ñ—Ç') ||
                    serviceName.includes('–º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫') || serviceName.includes('–±–µ–∑–º–µ—Ç–∞–ª–ª–æ–≤') || serviceName.includes('—Ü–∏—Ä–∫–æ–Ω–∏') ||
                    serviceName.includes('e.max') || serviceName.includes('inlay') || serviceName.includes('onlay') ||
                    serviceName.includes('–±—é–≥–µ–ª—å–Ω') || serviceName.includes('–ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω') && serviceName.includes('–∏–º–ø–ª–∞–Ω—Ç')) {
                  serviceSpecialties.add('Prosthodontics');
                }
                
                // –≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—è (–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
                if (serviceName.includes('–ª–µ—á–µ–Ω') || serviceName.includes('–ø–ª–æ–º–±') || serviceName.includes('endodont') ||
                    serviceName.includes('–∫–æ—Ä–Ω–µ–≤') || serviceName.includes('–∫–∞–Ω–∞–ª') || serviceName.includes('–ø—É–ª—å–ø') ||
                    serviceName.includes('–¥–µ–ø—É–ª—å–ø–∏—Ä') || serviceName.includes('—Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω') || serviceName.includes('–∞–ø–µ–∫—Å') ||
                    serviceName.includes('–∫–∞—Ä–∏–µ—Å') || serviceName.includes('–ø—É–ª—å–ø–∏—Ç') || serviceName.includes('–ø–µ—Ä–∏–æ–¥–æ–Ω—Ç–∏—Ç') ||
                    serviceName.includes('—Å–≤–µ—Ç–æ–≤–∞—è –ø–ª–æ–º–±') || serviceName.includes('–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–æ–º–±') ||
                    serviceName.includes('–º–∏–∫—Ä–æ—Å–∫–æ–ø') || serviceName.includes('–ø–µ—Ä–µ–ª–µ—á–∏–≤–∞–Ω') ||
                    serviceName.includes('—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω') || serviceName.includes('—à–ø–æ–Ω–∫')) {
                  serviceSpecialties.add('Endodontics');
                }
                
                // –ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è
                if (serviceName.includes('–¥–µ—Å–µ–Ω') || serviceName.includes('–ø–∞—Ä–æ–¥–æ–Ω—Ç') || serviceName.includes('periodont') ||
                    serviceName.includes('–≥–∏–Ω–≥–∏–≤') || serviceName.includes('–∫—é—Ä–µ—Ç–∞–∂') || serviceName.includes('–ª–æ—Å–∫—É—Ç–Ω') ||
                    serviceName.includes('—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü') || serviceName.includes('—à–∏–Ω–∏—Ä–æ–≤–∞–Ω') || serviceName.includes('–ø–∞—Ä–æ–¥–æ–Ω—Ç–æ–∑') ||
                    serviceName.includes('–¥–µ—Å–Ω–µ–≤') || serviceName.includes('–∫–∞—Ä–º–∞–Ω') || serviceName.includes('–ª–∞–∑–µ—Ä–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ')) {
                  serviceSpecialties.add('Periodontics');
                }
                
                // –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
                if (serviceName.includes('–¥–µ—Ç—Å–∫') || serviceName.includes('pediatric') || serviceName.includes('–º–æ–ª–æ—á–Ω') ||
                    serviceName.includes('–≥–µ—Ä–º–µ—Ç–∏–∑–∞—Ü') || serviceName.includes('—Ñ—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω') || serviceName.includes('—Å–µ—Ä–µ–±—Ä–µ–Ω') ||
                    serviceName.includes('—Ü–≤–µ—Ç–Ω') && serviceName.includes('–ø–ª–æ–º–±') || serviceName.includes('—Å–µ–¥–∞—Ü') ||
                    serviceName.includes('–æ–±—â–∏–π –Ω–∞—Ä–∫–æ–∑') || serviceName.includes('–∞–¥–∞–ø—Ç–∞—Ü') || serviceName.includes('—Ä–µ–±–µ–Ω–∫') ||
                    serviceName.includes('–¥–µ—Ç—Å–∫–∞—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫') || serviceName.includes('–≥–∏–≥–∏–µ–Ω–∞ –¥–µ—Ç—è–º')) {
                  serviceSpecialties.add('Pediatric Dentistry');
                }
                
                // –≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
                if (serviceName.includes('—ç—Å—Ç–µ—Ç') || serviceName.includes('–æ—Ç–±–µ–ª') || serviceName.includes('–≤–∏–Ω–∏—Ä') || 
                    serviceName.includes('cosmetic') || serviceName.includes('veneers') || serviceName.includes('whitening') ||
                    serviceName.includes('bleaching') || serviceName.includes('–ª–∞–º–∏–Ω') || serviceName.includes('—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü') ||
                    serviceName.includes('–∫–æ–º–ø–æ–∑–∏—Ç') || serviceName.includes('—Ñ–æ—Ç–æ–ø–æ–ª–∏–º–µ—Ä') || serviceName.includes('–Ω–∞—Ä–∞—â–∏–≤–∞–Ω') ||
                    serviceName.includes('–æ—Ñ–∏—Å–Ω–æ–µ') || serviceName.includes('zoom') || serviceName.includes('–¥–æ–º–∞—à–Ω–µ–µ –æ—Ç–±–µ–ª') ||
                    serviceName.includes('–∫–µ—Ä–∞–º–∏—á–µ—Å–∫') && serviceName.includes('–≤–∏–Ω–∏—Ä') || serviceName.includes('–ª—é–º–∏–Ω–∏—Ä') ||
                    serviceName.includes('–≥–æ–ª–ª–∏–≤—É–¥—Å–∫') || serviceName.includes('smile design') || serviceName.includes('—É–ª—ã–±–∫')) {
                  serviceSpecialties.add('Cosmetic Dentistry');
                }
                
                // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞
                if (serviceName.includes('–≥–∏–≥–∏–µ–Ω') || serviceName.includes('—á–∏—Å—Ç–∫') || serviceName.includes('hygiene') ||
                    (serviceName.includes('—É–¥–∞–ª–µ–Ω') && serviceName.includes('–∑—É–±–Ω') && serviceName.includes('–∫–∞–º–µ–Ω—å')) ||
                    serviceName.includes('—É–ª—å—Ç—Ä–∞–∑–≤—É–∫') || serviceName.includes('air flow') || serviceName.includes('–ø–æ–ª–∏—Ä–æ–≤–∫') ||
                    serviceName.includes('—Ñ—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω') || serviceName.includes('–≥–µ—Ä–º–µ—Ç–∏–∑–∞—Ü') || serviceName.includes('–ø–µ—Å–∫–æ—Å—Ç—Ä—É–π') ||
                    serviceName.includes('–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω') && serviceName.includes('—á–∏—Å—Ç–∫') || serviceName.includes('—Ñ–∏—Å—Å—É—Ä')) {
                  serviceSpecialties.add('Dental Hygiene');
                }
                
                // –†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                if (serviceName.includes('—Ç–æ–º–æ–≥—Ä–∞—Ñ') || serviceName.includes('—Ä–µ–Ω—Ç–≥–µ–Ω') || serviceName.includes('—Å–Ω–∏–º–æ–∫') ||
                    serviceName.includes('–¥–∏–∞–≥–Ω–æ—Å—Ç') || serviceName.includes('–ø–∞–Ω–æ—Ä–∞–º') || serviceName.includes('–ø—Ä–∏—Ü–µ–ª—å–Ω') ||
                    serviceName.includes('–æ—Ä—Ç–æ–ø–∞–Ω—Ç–æ–º') || serviceName.includes('—Ü–µ—Ñ–∞–ª–æ–º–µ—Ç—Ä') || serviceName.includes('3d') ||
                    serviceName.includes('–∫—Ç') || serviceName.includes('—Ñ–æ—Ç–æ–ø—Ä–æ—Ç–æ–∫–æ–ª') || serviceName.includes('–æ—Å–º–æ—Ç—Ä') ||
                    serviceName.includes('–ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è') || serviceName.includes('—Å–º–µ—Ç') || serviceName.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü')) {
                  serviceSpecialties.add('Oral and Maxillofacial Radiology');
                }
                
                // –ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–∞—è —Ö–∏—Ä—É—Ä–≥–∏—è
                if (serviceName.includes('—á–µ–ª—é—Å—Ç–Ω') || serviceName.includes('–ª–∏—Ü–µ–≤') || serviceName.includes('maxillofacial') ||
                    serviceName.includes('—Ç—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥') || serviceName.includes('–ø–µ—Ä–µ–ª–æ–º') || serviceName.includes('–≤–ø—Ä–∞–≤–ª–µ–Ω') ||
                    serviceName.includes('–≤–Ω—á—Å') || serviceName.includes('–¥–∏—Å—Ñ—É–Ω–∫—Ü') || serviceName.includes('–∞—Ä—Ç—Ä–æ–∑')) {
                  serviceSpecialties.add('Oral and Maxillofacial Surgery');
                }
                
                // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–Ω–µ—Å—Ç–µ–∑–∏–æ–ª–æ–≥–∏—è
                if (serviceName.includes('–∞–Ω–µ—Å—Ç–µ–∑') || serviceName.includes('–Ω–∞—Ä–∫–æ–∑') || serviceName.includes('—Å–µ–¥–∞—Ü') ||
                    (serviceName.includes('–æ–±–µ–∑–±–æ–ª') && serviceName.includes('–º–µ—Å—Ç–Ω')) || serviceName.includes('–ª–µ—á–µ–Ω–∏–µ –≤–æ —Å–Ω–µ')) {
                  serviceSpecialties.add('Dental Anesthesiology');
                }
                
                // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–∞—Ç–æ–ª–æ–≥–∏—è
                if (serviceName.includes('–ø–∞—Ç–æ–ª–æ–≥') || serviceName.includes('–±–∏–æ–ø—Å') || serviceName.includes('—Ü–∏—Ç–æ–ª–æ–≥') ||
                    serviceName.includes('–≥–∏—Å—Ç–æ–ª–æ–≥') || serviceName.includes('–æ–ø—É—Ö–æ–ª') || serviceName.includes('–Ω–æ–≤–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω')) {
                  serviceSpecialties.add('Oral and Maxillofacial Pathology');
                }
                
                // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞
                if (serviceName.includes('–º–µ–¥–∏—Ü–∏–Ω') || serviceName.includes('—Ç–µ—Ä–∞–ø–µ–≤—Ç') || serviceName.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü') ||
                    serviceName.includes('–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω') || serviceName.includes('–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫') || serviceName.includes('–ø–æ–≤—Ç–æ—Ä–Ω') ||
                    serviceName.includes('—É–∑–∫') && serviceName.includes('—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç') || serviceName.includes('—Å–æ—Å—Ç–∞–≤–ª–µ–Ω')) {
                  serviceSpecialties.add('Oral Medicine');
                }
                
                // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞
                if (serviceName.includes('–æ–±—â–µ—Å—Ç–≤–µ–Ω') || serviceName.includes('—Å–∞–Ω–∏—Ç–∞—Ä–Ω') ||
                    serviceName.includes('—ç–ø–∏–¥–µ–º–∏–æ–ª–æ–≥') || serviceName.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫') || serviceName.includes('–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω')) {
                  serviceSpecialties.add('Dental Public Health');
                }
                
                // –õ–∞–∑–µ—Ä–Ω–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
                if (serviceName.includes('–ª–∞–∑–µ—Ä–Ω') || serviceName.includes('laser') || serviceName.includes('–ª–∞–∑–µ—Ä')) {
                  serviceSpecialties.add('Laser Dentistry');
                }
                
                // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è —Å–Ω–∞ –∏ –±—Ä—É–∫—Å–∏–∑–º–∞
                if (serviceName.includes('–±—Ä—É–∫—Å–∏–∑–º') || serviceName.includes('–Ω–æ—á–Ω–∞—è –∫–∞–ø') || serviceName.includes('–∫–∞–ø') && serviceName.includes('—Å–ø–æ—Ä—Ç') ||
                    serviceName.includes('—Å–∫—Ä–µ–∂–µ—Ç–∞–Ω') || serviceName.includes('—Å–∂–∞—Ç–∏') && serviceName.includes('–∑—É–±')) {
                  serviceSpecialties.add('Sleep Dentistry');
                }
                
                // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
                if (serviceName.includes('sos') || serviceName.includes('—Å—Ä–æ—á–Ω') || serviceName.includes('—ç–∫—Å—Ç—Ä–µ–Ω–Ω') ||
                    serviceName.includes('24/7') || serviceName.includes('–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω') || serviceName.includes('–Ω–µ–æ—Ç–ª–æ–∂–Ω')) {
                  serviceSpecialties.add('Emergency Dentistry');
                }
              });
              
              if (serviceSpecialties.size > 0) {
                baseSchema.medicalSpecialty = Array.from(serviceSpecialties);
              }
            }
            
            // Fallback –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏, –µ—Å–ª–∏ —É—Å–ª—É–≥–∏ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (!baseSchema.medicalSpecialty && clinicData.specializations && clinicData.specializations.length > 0) {
              console.log('üîç Using fallback specializations from clinic data:', clinicData.specializations);
              baseSchema.medicalSpecialty = clinicData.specializations;
            } else if (!baseSchema.medicalSpecialty) {
              console.log('üîç No medicalSpecialty determined - no services matched and no clinic specializations');
            }

    // –Ø–∑—ã–∫–∏
    if (clinicData.languages && clinicData.languages.length > 0) {
      baseSchema.availableLanguage = clinicData.languages;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∏ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫–ª–∏–Ω–∏–∫
  if (clinicData) {
            // –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫–∏
            if (clinicData.workingHours && clinicData.workingHours.length > 0) {
              const openingHours = clinicData.workingHours
                .filter((wh: any) => wh.isOpen)
                .map((wh: any) => {
                  const dayNames = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];
                  const dayName = dayNames[wh.dayOfWeek];
                  if (wh.is24Hours) {
                    return `${dayName} 00:00-23:59`;
                  } else if (wh.openTime && wh.closeTime) {
                    let hours = `${dayName} ${wh.openTime}-${wh.closeTime}`;
                    if (wh.breakStartTime && wh.breakEndTime) {
                      hours += `,${wh.breakStartTime}-${wh.breakEndTime}`;
                    }
                    return hours;
                  }
                  return null;
                })
                .filter(Boolean);
              
              // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
              const uniqueOpeningHours = [...new Set(openingHours)];
              
              if (uniqueOpeningHours.length > 0) {
                baseSchema.openingHours = uniqueOpeningHours;
              }
            }

    // –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª—É–≥ –∫–ª–∏–Ω–∏–∫–∏
    if (clinicData.services && clinicData.services.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –∏–∑ —É—Å–ª—É–≥
      const prices = clinicData.services
        .filter((service: any) => service.price && service.price > 0)
        .map((service: any) => service.price);
      
      if (prices.length > 0) {
        const minPrice = Math.min(...prices);
        const maxPrice = Math.max(...prices);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
        let priceRange = '$';
        if (maxPrice >= 5000) priceRange = '$$$$';
        else if (maxPrice >= 2000) priceRange = '$$$';
        else if (maxPrice >= 800) priceRange = '$$';
        
        baseSchema.priceRange = priceRange;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
        if (!baseSchema.additionalProperty) {
          baseSchema.additionalProperty = [];
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        baseSchema.additionalProperty.push({
          "@type": "PropertyValue",
          "name": "Price Range",
          "value": `${minPrice}-${maxPrice} MDL`,
          "description": "–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –Ω–∞ —É—Å–ª—É–≥–∏"
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥
        baseSchema.additionalProperty.push({
          "@type": "PropertyValue", 
          "name": "Services Count",
          "value": clinicData.services.length,
          "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥"
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ
        const currencies = [...new Set(clinicData.services.map((service: any) => service.currency))];
        if (currencies.length > 0) {
          baseSchema.additionalProperty.push({
            "@type": "PropertyValue",
            "name": "Currency",
            "value": currencies.join(', '),
            "description": "–í–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"
          });
        }
      }
    } else if (clinicData.priceIndex) {
      // Fallback –Ω–∞ priceIndex –µ—Å–ª–∏ –Ω–µ—Ç —É—Å–ª—É–≥
      let priceRange = '$';
      if (clinicData.priceIndex >= 80) priceRange = '$$$$';
      else if (clinicData.priceIndex >= 60) priceRange = '$$$';
      else if (clinicData.priceIndex >= 40) priceRange = '$$';
      baseSchema.priceRange = priceRange;
    }
  }

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ö–µ–º
  if (schemaType === 'Organization') {
    return {
      ...baseSchema,
      "sameAs": settingsMap.organizationUrl ? [settingsMap.organizationUrl] : undefined
    };
  } else if (schemaType === 'LocalBusiness' || schemaType === 'Dentist') {
    return {
      ...baseSchema,
      "@type": "Dentist",
      "priceRange": baseSchema.priceRange || businessPriceRange,
      "openingHours": baseSchema.openingHours || businessOpeningHours,
      "sameAs": settingsMap.organizationUrl ? [settingsMap.organizationUrl] : undefined
    };
  } else {
    // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
    return baseSchema;
  }
}

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true as const,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ
    if (url.startsWith('/admin')) {
      try {
        console.log('üîç Vite middleware - checking admin access for URL:', url);
        
        // Get admin access code from settings
        const { storage } = await import('./storage');
        const settings = await storage.getAllSiteSettings();
        const settingsMap = settings.reduce((acc: any, setting: any) => {
          acc[setting.key] = setting.value;
          return acc;
        }, {});
        
        const adminAccessCode = settingsMap.adminAccessCode;
        console.log('üîç Vite middleware - admin access code from settings:', adminAccessCode);
        
        // If no access code is set, allow normal access
        if (!adminAccessCode || adminAccessCode.trim() === '') {
          console.log('üîç Vite middleware - no access code set, allowing normal access');
        } else {
          // Check if access code is provided in query parameters
          // The URL should be /admin?ruslan (where ruslan is the access code)
          const providedCode = req.query[adminAccessCode];
          console.log('üîç Vite middleware - provided code in query:', providedCode);
          console.log('üîç Vite middleware - all query params:', req.query);
          console.log('üîç Vite middleware - looking for param:', adminAccessCode);
          
          // Check if the access code parameter exists (even if empty)
          if (!(adminAccessCode in req.query)) {
            console.log('üîç Vite middleware - access code parameter not found, redirecting to home');
            // Redirect to home page if access code parameter is not found
            return res.redirect('/');
          }
          
          console.log('üîç Vite middleware - access code parameter found, allowing access to login page');
          // If access code parameter is found, allow access to admin login page
        }
      } catch (error) {
        console.error('Error checking admin access code in Vite middleware:', error);
        // On error, allow normal access
      }
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü
    if (url.includes('/clinic/')) {
      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      res.setHeader('Pragma', 'no-cache');
      res.setHeader('Expires', '0');
    }

    try {
      const clientTemplate = path.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ URL –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lang –∞—Ç—Ä–∏–±—É—Ç
      const isRomanian = url.startsWith('/clinic/ro/') || url === '/ro';
      const lang = isRomanian ? 'ro' : 'ru';
      template = template.replace(
        /<html lang="[^"]*"/,
        `<html lang="${lang}"`
      );
      console.log('üîß Setting HTML lang attribute to:', lang, 'for URL:', url);

      // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏
      const { storage } = await import('./storage');
      const settings = await storage.getAllSiteSettings();
      const settingsMap = settings.reduce((acc: any, setting: any) => {
        acc[setting.key] = setting.value;
        return acc;
      }, {});

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–≤–∏–∫–æ–Ω –∫–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è –ª—É—á—à–µ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
      console.log('üîç Favicon check:', settingsMap.favicon);
      if (settingsMap.favicon) {
        console.log('‚úÖ Adding favicon to HTML:', settingsMap.favicon);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        const faviconUrl = settingsMap.favicon;
        const extension = faviconUrl.split('.').pop()?.toLowerCase();
        let mimeType = 'image/x-icon';
        
        if (extension === 'png') mimeType = 'image/png';
        else if (extension === 'jpg' || extension === 'jpeg') mimeType = 'image/jpeg';
        else if (extension === 'svg') mimeType = 'image/svg+xml';
        
        // –î–æ–±–∞–≤–ª—è–µ–º preload –≤ –Ω–∞—á–∞–ª–æ head –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        template = template.replace(
          /<head>/,
          `<head>
    <!-- Favicon preload –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ -->
    <link rel="preload" href="${faviconUrl}" as="image" type="${mimeType}" fetchpriority="high" crossorigin="anonymous">`
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–≥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        template = template.replace(
          /<\/head>/,
          `    <!-- Favicon –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤ –∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ -->
    <link rel="icon" type="${mimeType}" href="${faviconUrl}" sizes="any">
    <link rel="shortcut icon" href="${faviconUrl}" type="${mimeType}">
    <link rel="icon" href="${faviconUrl}" type="${mimeType}">
    <link rel="apple-touch-icon" href="${faviconUrl}" sizes="180x180">
    <link rel="apple-touch-icon-precomposed" href="${faviconUrl}">
    <meta name="msapplication-TileImage" content="${faviconUrl}">
    <meta name="msapplication-config" content="/browserconfig.xml">
    <link rel="manifest" href="/site.webmanifest">
  </head>`
        );
        console.log('‚úÖ Favicon preload and tags added to HTML');
      } else {
        console.log('‚ùå No favicon found in settings');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å–∞–π—Ç–∞ –≤ –º–µ—Ç–∞-—Ç–µ–≥–∏ Open Graph
      if (settingsMap.logo) {
        console.log('‚úÖ Adding logo to HTML:', settingsMap.logo);
        const logoUrl = `${settingsMap.websiteUrl || 'https://dentmoldova.md'}${settingsMap.logo}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º og:image –∏ og:logo
        template = template.replace(
          /<\/head>/,
          `    <!-- Logo –¥–ª—è Open Graph -->
    <meta property="og:image" content="${logoUrl}" />
    <meta property="og:logo" content="${logoUrl}" />
  </head>`
        );
        console.log('‚úÖ Logo added to HTML');
      } else {
        console.log('‚ùå No logo found in settings');
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º SEO –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const clinicSEO = (req as any).clinicSEO;
      const homepageSEO = (req as any).homepageSEO;
      const seoData = clinicSEO || homepageSEO;
      
      if (seoData) {
        console.log('üîß Applying SEO data:', seoData.title);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º title
        template = template.replace(
          /<title>.*?<\/title>/,
          `<title>${seoData.title}</title>`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º meta description
        template = template.replace(
          /<meta name="description" content="[^"]*"/,
          `<meta name="description" content="${seoData.description}"`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º meta keywords
        if (seoData.keywords) {
          template = template.replace(
            /<meta name="keywords" content="[^"]*"/,
            `<meta name="keywords" content="${seoData.keywords}"`
          );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º robots
        template = template.replace(
          /<meta name="robots" content="[^"]*"/,
          `<meta name="robots" content="${seoData.robots}"`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º Open Graph —Ç–µ–≥–∏
        if (seoData.ogTitle) {
          template = template.replace(
            /<meta property="og:title" content="[^"]*"/,
            `<meta property="og:title" content="${seoData.ogTitle}"`
          );
        }
        
        if (seoData.ogDescription) {
          template = template.replace(
            /<meta property="og:description" content="[^"]*"/,
            `<meta property="og:description" content="${seoData.ogDescription}"`
          );
        }
        
        if (seoData.ogImage) {
          template = template.replace(
            /<meta property="og:image" content=".*?" \/>/,
            `<meta property="og:image" content="${seoData.ogImage}" />`
          );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º canonical URL
        if (seoData.canonical) {
          template = template.replace(
            /<link rel="canonical" href="[^"]*"/,
            `<link rel="canonical" href="${seoData.canonical}"`
          );
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º JSON-LD —Å—Ö–µ–º—É
        if (seoData.schemaType && seoData.schemaData && Object.keys(seoData.schemaData).length > 0) {
          let jsonLdSchema;
          
          try {
            // –ï—Å–ª–∏ schemaData —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (typeof seoData.schemaData === 'object') {
              jsonLdSchema = seoData.schemaData;
            } else {
              // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
              jsonLdSchema = JSON.parse(seoData.schemaData);
            }
          } catch (error) {
            console.error('‚ùå Error parsing schemaData:', error);
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            jsonLdSchema = generateBasicSchema(seoData, seoData.settingsMap || settingsMap, seoData.clinicData);
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º JSON-LD –≤ head
          const jsonLdScript = `<script type="application/ld+json">${JSON.stringify(jsonLdSchema, null, 2)}</script>`;
          template = template.replace(
            /<\/head>/,
            `    ${jsonLdScript}
  </head>`
          );
          console.log('‚úÖ Custom JSON-LD schema added to HTML');
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ö–µ–º—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é
          console.log('üîç Generating basic schema with clinicData:', seoData.clinicData ? 'YES' : 'NO');
          if (seoData.clinicData) {
            console.log('üîç Clinic data available:', {
              name: seoData.clinicData.nameRu,
              googleRating: seoData.clinicData.googleRating,
              googleReviewsCount: seoData.clinicData.googleReviewsCount,
              dScore: seoData.clinicData.dScore,
              reviewsRating: seoData.clinicData.reviewsRating,
              reviewsCount: seoData.clinicData.reviewsCount,
              services: seoData.clinicData.services ? seoData.clinicData.services.length : 0,
              servicesData: seoData.clinicData.services ? seoData.clinicData.services.slice(0, 3).map((s: any) => ({ name: s.name, price: s.price, currency: s.currency })) : []
            });
          } else {
            console.log('‚ùå No clinic data available for schema generation');
          }
          const basicSchema = generateBasicSchema(seoData, seoData.settingsMap || settingsMap, seoData.clinicData);
          console.log('üîç Generated schema:', JSON.stringify(basicSchema, null, 2));
          const jsonLdScript = `<script type="application/ld+json">${JSON.stringify(basicSchema, null, 2)}</script>`;
          template = template.replace(
            /<\/head>/,
            `    ${jsonLdScript}
  </head>`
          );
          console.log('‚úÖ Basic JSON-LD schema added to HTML');
        }
        
      }

      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(import.meta.dirname, "..", "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", async (req, res) => {
    try {
      const indexPath = path.resolve(distPath, "index.html");
      let template = await fs.promises.readFile(indexPath, "utf-8");
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ URL –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lang –∞—Ç—Ä–∏–±—É—Ç
      const isRomanian = req.originalUrl.startsWith('/clinic/ro/') || req.originalUrl === '/ro';
      const lang = isRomanian ? 'ro' : 'ru';
      template = template.replace(
        /<html lang="[^"]*"/,
        `<html lang="${lang}"`
      );
      console.log('üîß Setting HTML lang attribute to:', lang, 'for URL:', req.originalUrl);

      // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ (–ø—Ä–æ–¥–∞–∫—à–Ω)
      const { storage } = await import('./storage');
      const settings = await storage.getAllSiteSettings();
      const settingsMap = settings.reduce((acc: any, setting: any) => {
        acc[setting.key] = setting.value;
        return acc;
      }, {});

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–≤–∏–∫–æ–Ω –∫–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è –ª—É—á—à–µ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (–ø—Ä–æ–¥–∞–∫—à–Ω)
      console.log('üîç Favicon check (prod):', settingsMap.favicon);
      if (settingsMap.favicon) {
        console.log('‚úÖ Adding favicon to HTML (prod):', settingsMap.favicon);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        const faviconUrl = settingsMap.favicon;
        const extension = faviconUrl.split('.').pop()?.toLowerCase();
        let mimeType = 'image/x-icon';
        
        if (extension === 'png') mimeType = 'image/png';
        else if (extension === 'jpg' || extension === 'jpeg') mimeType = 'image/jpeg';
        else if (extension === 'svg') mimeType = 'image/svg+xml';
        
        // –î–æ–±–∞–≤–ª—è–µ–º preload –≤ –Ω–∞—á–∞–ª–æ head –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        template = template.replace(
          /<head>/,
          `<head>
    <!-- Favicon preload –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ -->
    <link rel="preload" href="${faviconUrl}" as="image" type="${mimeType}" fetchpriority="high" crossorigin="anonymous">`
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–≥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        template = template.replace(
          /<\/head>/,
          `    <!-- Favicon –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤ –∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ -->
    <link rel="icon" type="${mimeType}" href="${faviconUrl}" sizes="any">
    <link rel="shortcut icon" href="${faviconUrl}" type="${mimeType}">
    <link rel="icon" href="${faviconUrl}" type="${mimeType}">
    <link rel="apple-touch-icon" href="${faviconUrl}" sizes="180x180">
    <link rel="apple-touch-icon-precomposed" href="${faviconUrl}">
    <meta name="msapplication-TileImage" content="${faviconUrl}">
    <meta name="msapplication-config" content="/browserconfig.xml">
    <link rel="manifest" href="/site.webmanifest">
  </head>`
        );
        console.log('‚úÖ Favicon preload and tags added to HTML (prod)');
      } else {
        console.log('‚ùå No favicon found in settings (prod)');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å–∞–π—Ç–∞ –≤ –º–µ—Ç–∞-—Ç–µ–≥–∏ Open Graph (–ø—Ä–æ–¥–∞–∫—à–Ω)
      if (settingsMap.logo) {
        console.log('‚úÖ Adding logo to HTML (prod):', settingsMap.logo);
        const logoUrl = `${settingsMap.websiteUrl || 'https://dentmoldova.md'}${settingsMap.logo}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º og:image –∏ og:logo
        template = template.replace(
          /<\/head>/,
          `    <!-- Logo –¥–ª—è Open Graph -->
    <meta property="og:image" content="${logoUrl}" />
    <meta property="og:logo" content="${logoUrl}" />
  </head>`
        );
        console.log('‚úÖ Logo added to HTML (prod)');
      } else {
        console.log('‚ùå No logo found in settings (prod)');
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º SEO –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const clinicSEO = (req as any).clinicSEO;
      const homepageSEO = (req as any).homepageSEO;
      const seoData = clinicSEO || homepageSEO;
      
      if (seoData) {
        console.log('üîß Applying SEO data:', seoData.title);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º title
        template = template.replace(
          /<title>.*?<\/title>/,
          `<title>${seoData.title}</title>`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º meta description
        template = template.replace(
          /<meta name="description" content="[^"]*"/,
          `<meta name="description" content="${seoData.description}"`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º meta keywords
        if (seoData.keywords) {
          template = template.replace(
            /<meta name="keywords" content="[^"]*"/,
            `<meta name="keywords" content="${seoData.keywords}"`
          );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º robots
        template = template.replace(
          /<meta name="robots" content="[^"]*"/,
          `<meta name="robots" content="${seoData.robots}"`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º Open Graph —Ç–µ–≥–∏
        if (seoData.ogTitle) {
          template = template.replace(
            /<meta property="og:title" content="[^"]*"/,
            `<meta property="og:title" content="${seoData.ogTitle}"`
          );
        }
        
        if (seoData.ogDescription) {
          template = template.replace(
            /<meta property="og:description" content="[^"]*"/,
            `<meta property="og:description" content="${seoData.ogDescription}"`
          );
        }
        
        if (seoData.ogImage) {
          template = template.replace(
            /<meta property="og:image" content=".*?" \/>/,
            `<meta property="og:image" content="${seoData.ogImage}" />`
          );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º canonical URL
        if (seoData.canonical) {
          template = template.replace(
            /<link rel="canonical" href="[^"]*"/,
            `<link rel="canonical" href="${seoData.canonical}"`
          );
        }
        
      }
      
      res.status(200).set({ "Content-Type": "text/html" }).end(template);
    } catch (error) {
      console.error('Error serving static file:', error);
      res.sendFile(path.resolve(distPath, "index.html"));
    }
  });
}
