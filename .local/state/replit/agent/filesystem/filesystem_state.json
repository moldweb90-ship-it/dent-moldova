{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Dent Moldova - Dental Clinic Directory\n\n## Overview\n\nDent Moldova is a minimalist dental clinic directory web application for Moldova, inspired by the Nomad List design aesthetic. The application provides a fast, simple catalog of dental clinics with filtering, search, and detailed clinic information. It features a clean, card-based interface with rating systems and multi-language support (Russian and Romanian).\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management\n- **UI Framework**: Radix UI components with Tailwind CSS for styling\n- **Component Architecture**: Modular component structure with reusable UI components\n\n**Key Design Decisions**:\n- Minimalist design approach with clean, card-based layouts\n- Responsive grid system (1-4 columns) for clinic cards\n- Light theme with neutral color palette\n- No external maps integration in MVP to maintain simplicity\n\n### Backend Architecture\n\n**Framework**: Express.js with TypeScript\n- **API Design**: RESTful API endpoints for clinic data, cities, and districts\n- **Development Server**: Vite middleware integration for hot reloading\n- **Request Handling**: Express middleware for JSON parsing and logging\n\n**Key Design Decisions**:\n- Separation of concerns with dedicated route handlers\n- Centralized error handling middleware\n- Development-optimized logging and debugging\n\n### Data Storage Solutions\n\n**Database**: PostgreSQL with Drizzle ORM\n- **Schema Design**: Relational structure with cities, districts, clinics, and packages\n- **Connection**: Neon serverless PostgreSQL for cloud deployment\n- **Migrations**: Drizzle Kit for database schema management\n\n**Key Design Decisions**:\n- Normalized database structure for geographical data\n- JSON columns for flexible arrays (languages, specializations, tags)\n- UUID primary keys for better scalability\n- Built-in support for multilingual content (Russian/Romanian)\n\n### Internationalization\n\n**Framework**: Custom i18n implementation with language detection\n- **Languages**: Russian (default) and Romanian\n- **Storage**: JSON files for translation dictionaries\n- **Architecture**: Context-based language switching with persistent preferences\n\n**Key Design Decisions**:\n- File-based translations for easy content management\n- Seamless language switching without page reload\n- Consistent naming conventions for multilingual database fields\n\n### Authentication and Authorization\n\n**Current State**: Minimal authentication structure in place\n- **User Schema**: Basic user table with username support\n- **Session Management**: Express session configuration ready\n- **Future Extension**: Architecture prepared for role-based access control\n\n### Search and Filtering System\n\n**Implementation**: Query parameter-based filtering with debounced search\n- **Search**: Full-text search across clinic names and services\n- **Filters**: Multi-select filters for districts, specializations, languages\n- **Sorting**: Multiple sort options (D-score, price, trust, reviews)\n- **Pagination**: Server-side pagination with configurable page sizes\n\n**Key Design Decisions**:\n- URL-based filter state for shareable links\n- Debounced search input to reduce server load\n- Mobile-responsive filter interface with drawer/sheet components\n\n### Scoring System\n\n**D-Score Algorithm**: Weighted composite score for clinic ranking\n- **Components**: Trust index (30%), Reviews (25%), Price (25%), Access (20%)\n- **Implementation**: Calculated server-side and stored in database\n- **Display**: Visual score bars with color coding (green/yellow/red)\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL driver\n- **Connection Pooling**: Built-in connection management for serverless environments\n\n### UI and Styling\n- **Radix UI**: Accessible component primitives for dialogs, selects, checkboxes, etc.\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n- **Fonts**: Google Fonts integration (Inter, DM Sans, Fira Code, Geist Mono)\n\n### Development Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundling for production builds\n- **Replit Integration**: Development environment optimizations\n\n### Runtime Libraries\n- **TanStack Query**: Server state synchronization and caching\n- **Wouter**: Lightweight routing for single-page application\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Component variant management\n- **CLSX/Tailwind Merge**: Conditional CSS class handling\n\n### Development Dependencies\n- **TSX**: TypeScript execution for development server\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n- **React Hook Form**: Form state management with validation\n- **Zod**: Runtime type validation for API inputs and schemas","size_bytes":5221},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { clinics } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { eq } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport crypto from \"crypto\";\n\n// Admin credentials\nconst ADMIN_USERNAME = 'admin';\nconst ADMIN_PASSWORD = 'dancerboy';\n\n// Session middleware\ndeclare module 'express-session' {\n  interface SessionData {\n    isAdminAuthenticated?: boolean;\n  }\n}\n\n// File upload configuration\nconst uploadDir = path.join(process.cwd(), 'img');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: uploadDir,\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, 'clinic-logo-' + uniqueSuffix + path.extname(file.originalname));\n    }\n  }),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  }\n});\n\n// Middleware to check admin authentication\nconst requireAdminAuth = (req: any, res: any, next: any) => {\n  if (!req.session?.isAdminAuthenticated) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration\n  app.use(session({\n    secret: 'dent-moldova-admin-secret-key-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Serve uploaded files\n  app.use('/img', (req, res, next) => {\n    res.header('Cross-Origin-Resource-Policy', 'cross-origin');\n    next();\n  }, express.static(uploadDir));\n\n  // ===== ADMIN AUTHENTICATION ROUTES =====\n  \n  // Admin login\n  app.post('/api/admin/auth/login', async (req: any, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {\n        req.session.isAdminAuthenticated = true;\n        res.json({ success: true, message: 'Успешный вход в админ панель' });\n      } else {\n        res.status(401).json({ message: 'Неверный логин или пароль' });\n      }\n    } catch (error) {\n      console.error('Admin login error:', error);\n      res.status(500).json({ message: 'Ошибка сервера' });\n    }\n  });\n\n  // Check admin authentication status\n  app.get('/api/admin/auth/check', (req: any, res) => {\n    if (req.session?.isAdminAuthenticated) {\n      res.json({ authenticated: true });\n    } else {\n      res.status(401).json({ authenticated: false });\n    }\n  });\n\n  // Admin logout\n  app.post('/api/admin/auth/logout', (req: any, res) => {\n    req.session.destroy(() => {\n      res.json({ success: true, message: 'Вышли из админ панели' });\n    });\n  });\n\n  // ===== ADMIN CLINIC ROUTES =====\n  \n  // Get all clinics for admin (with pagination)\n  app.get('/api/admin/clinics', requireAdminAuth, async (req, res) => {\n    try {\n      const querySchema = z.object({\n        q: z.string().optional(),\n        page: z.string().optional().transform(val => val ? parseInt(val) : 1),\n        limit: z.string().optional().transform(val => val ? parseInt(val) : 20),\n      });\n\n      const { q, page, limit } = querySchema.parse(req.query);\n      const result = await storage.getClinics({ q, page, limit });\n      \n      res.json(result);\n    } catch (error) {\n      console.error('Error fetching admin clinics:', error);\n      res.status(500).json({ message: 'Ошибка при получении клиник' });\n    }\n  });\n\n  // Get single clinic for admin\n  app.get('/api/admin/clinics/:id', requireAdminAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const clinic = await storage.getClinicById(id);\n      \n      if (!clinic) {\n        return res.status(404).json({ message: 'Клиника не найдена' });\n      }\n      \n      res.json(clinic);\n    } catch (error) {\n      console.error('Error fetching admin clinic:', error);\n      res.status(500).json({ message: 'Ошибка при получении клиники' });\n    }\n  });\n\n  // Create new clinic\n  app.post('/api/admin/clinics', requireAdminAuth, upload.single('logo'), async (req: any, res) => {\n    try {\n      const clinicSchema = z.object({\n        name: z.string().min(1, 'Название обязательно'),\n        cityId: z.string().min(1, 'Город обязателен'),\n        address: z.string().optional(),\n        phone: z.string().optional(),\n        website: z.string().optional(),\n        bookingUrl: z.string().optional(),\n        languages: z.string().optional().transform(val => val ? JSON.parse(val) : []),\n        specializations: z.string().optional().transform(val => val ? JSON.parse(val) : []),\n        tags: z.string().optional().transform(val => val ? JSON.parse(val) : []),\n        verified: z.string().optional().transform(val => val === 'true'),\n        cnam: z.string().optional().transform(val => val === 'true'),\n        availToday: z.string().optional().transform(val => val === 'true'),\n        availTomorrow: z.string().optional().transform(val => val === 'true'),\n        priceIndex: z.string().transform(val => parseInt(val) || 50),\n        trustIndex: z.string().transform(val => parseInt(val) || 50),\n        reviewsIndex: z.string().transform(val => parseInt(val) || 50),\n        accessIndex: z.string().transform(val => parseInt(val) || 50),\n      });\n\n      const clinicData = clinicSchema.parse(req.body);\n      \n      // Generate slug from name\n      const slug = clinicData.name.toLowerCase()\n        .replace(/[^a-z0-9\\s-]/g, '')\n        .replace(/\\s+/g, '-')\n        .replace(/-+/g, '-')\n        .trim()\n        .replace(/^-+|-+$/g, '');\n      \n      // Add logo path if uploaded\n      let logoUrl = null;\n      if (req.file) {\n        logoUrl = `/img/${req.file.filename}`;\n      }\n      \n      // Calculate D-Score\n      const dScore = Math.round(\n        clinicData.trustIndex * 0.3 +\n        clinicData.reviewsIndex * 0.25 +\n        clinicData.priceIndex * 0.25 +\n        clinicData.accessIndex * 0.2\n      );\n\n      const newClinic = await storage.createClinic({\n        ...clinicData,\n        slug,\n        logoUrl,\n        dScore,\n      });\n      \n      res.status(201).json(newClinic);\n    } catch (error: any) {\n      console.error('Error creating clinic:', error);\n      res.status(400).json({ message: error.message || 'Ошибка при создании клиники' });\n    }\n  });\n\n  // Update clinic\n  app.put('/api/admin/clinics/:id', requireAdminAuth, upload.single('logo'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if clinic exists\n      const existingClinic = await storage.getClinicById(id);\n      if (!existingClinic) {\n        return res.status(404).json({ message: 'Клиника не найдена' });\n      }\n\n      const clinicSchema = z.object({\n        name: z.string().optional(),\n        cityId: z.string().optional(),\n        address: z.string().optional(),\n        phone: z.string().optional(),\n        website: z.string().optional(),\n        bookingUrl: z.string().optional(),\n        languages: z.string().optional().transform(val => val ? JSON.parse(val) : undefined),\n        specializations: z.string().optional().transform(val => val ? JSON.parse(val) : undefined),\n        tags: z.string().optional().transform(val => val ? JSON.parse(val) : undefined),\n        verified: z.string().optional().transform(val => val === 'true'),\n        cnam: z.string().optional().transform(val => val === 'true'),\n        availToday: z.string().optional().transform(val => val === 'true'),\n        availTomorrow: z.string().optional().transform(val => val === 'true'),\n        priceIndex: z.string().optional().transform(val => val ? parseInt(val) : undefined),\n        trustIndex: z.string().optional().transform(val => val ? parseInt(val) : undefined),\n        reviewsIndex: z.string().optional().transform(val => val ? parseInt(val) : undefined),\n        accessIndex: z.string().optional().transform(val => val ? parseInt(val) : undefined),\n        recommended: z.string().optional().transform(val => val === 'true'),\n        promotionalLabels: z.string().optional().transform(val => val ? JSON.parse(val) : undefined),\n      });\n\n      const parsedUpdates = clinicSchema.parse(req.body);\n      const updates: any = { ...parsedUpdates };\n      \n      // Update logo if uploaded\n      if (req.file) {\n        updates.logoUrl = `/img/${req.file.filename}`;\n      }\n      \n      // Recalculate D-Score if rating indexes are provided\n      if (updates.trustIndex || updates.reviewsIndex || updates.priceIndex || updates.accessIndex) {\n        const trustIndex = updates.trustIndex ?? existingClinic.trustIndex;\n        const reviewsIndex = updates.reviewsIndex ?? existingClinic.reviewsIndex;\n        const priceIndex = updates.priceIndex ?? existingClinic.priceIndex;\n        const accessIndex = updates.accessIndex ?? existingClinic.accessIndex;\n        \n        updates.dScore = Math.round(\n          trustIndex * 0.3 +\n          reviewsIndex * 0.25 +\n          priceIndex * 0.25 +\n          accessIndex * 0.2\n        );\n      }\n      \n      // Update slug if name changed\n      if (updates.name) {\n        updates.slug = updates.name.toLowerCase()\n          .replace(/[^a-z0-9\\s-]/g, '')\n          .replace(/\\s+/g, '-')\n          .replace(/-+/g, '-')\n          .trim()\n          .replace(/^-+|-+$/g, '');\n      }\n      \n      const updatedClinic = await storage.updateClinic(id, updates);\n      res.json(updatedClinic);\n    } catch (error: any) {\n      console.error('Error updating clinic:', error);\n      res.status(400).json({ message: error.message || 'Ошибка при обновлении клиники' });\n    }\n  });\n\n  // Delete clinic\n  app.delete('/api/admin/clinics/:id', requireAdminAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if clinic exists\n      const existingClinic = await storage.getClinicById(id);\n      if (!existingClinic) {\n        return res.status(404).json({ message: 'Клиника не найдена' });\n      }\n      \n      await storage.deleteClinic(id);\n      res.json({ success: true, message: 'Клиника удалена' });\n    } catch (error) {\n      console.error('Error deleting clinic:', error);\n      res.status(500).json({ message: 'Ошибка при удалении клиники' });\n    }\n  });\n\n  // Get clinic services\n  app.get('/api/admin/clinics/:id/services', requireAdminAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if clinic exists\n      const existingClinic = await storage.getClinicById(id);\n      if (!existingClinic) {\n        return res.status(404).json({ message: 'Клиника не найдена' });\n      }\n      \n      const services = await storage.getClinicServices(id);\n      res.json(services);\n    } catch (error) {\n      console.error('Error fetching clinic services:', error);\n      res.status(500).json({ message: 'Ошибка при получении услуг клиники' });\n    }\n  });\n\n  // Update clinic services\n  app.put('/api/admin/clinics/:id/services', requireAdminAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const servicesSchema = z.array(z.object({\n        name: z.string().min(1, 'Название услуги обязательно'),\n        price: z.number().min(1, 'Цена должна быть больше 0'),\n        currency: z.string().default('MDL')\n      }));\n      \n      // Check if clinic exists\n      const existingClinic = await storage.getClinicById(id);\n      if (!existingClinic) {\n        return res.status(404).json({ message: 'Клиника не найдена' });\n      }\n      \n      const validatedServices = servicesSchema.parse(req.body);\n      await storage.updateClinicServices(id, validatedServices);\n      \n      res.json({ success: true, message: 'Услуги клиники обновлены' });\n    } catch (error: any) {\n      console.error('Error updating clinic services:', error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: 'Неверные данные услуг' });\n      }\n      res.status(500).json({ message: 'Ошибка при обновлении услуг клиники' });\n    }\n  });\n\n  // Get admin statistics\n  app.get('/api/admin/stats', requireAdminAuth, async (req, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching admin stats:', error);\n      res.status(500).json({ message: 'Ошибка при получении статистики' });\n    }\n  });\n  \n  // Get recent clinics for admin dashboard\n  app.get('/api/admin/recent-clinics', requireAdminAuth, async (req, res) => {\n    try {\n      const recentClinics = await storage.getRecentClinics(5);\n      res.json(recentClinics);\n    } catch (error) {\n      console.error('Error fetching recent clinics:', error);\n      res.status(500).json({ message: 'Ошибка при получении клиник' });\n    }\n  });\n\n  // Get today's view statistics\n  app.get('/api/admin/today-views', requireAdminAuth, async (req, res) => {\n    try {\n      const viewsCount = await storage.getTodayViews();\n      res.json({ views: viewsCount });\n    } catch (error) {\n      console.error('Error fetching today views:', error);\n      res.status(500).json({ message: 'Ошибка при получении статистики просмотров' });\n    }\n  });\n\n  // Settings endpoints\n  app.get('/api/admin/settings', requireAdminAuth, async (req, res) => {\n    try {\n      const settings = await storage.getAllSiteSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error getting settings:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/admin/settings', requireAdminAuth, async (req, res) => {\n    try {\n      const { siteTitle, metaDescription, robotsTxt } = req.body;\n      \n      // Save each setting individually\n      const promises = [];\n      if (siteTitle !== undefined) {\n        promises.push(storage.setSiteSetting('siteTitle', siteTitle));\n      }\n      if (metaDescription !== undefined) {\n        promises.push(storage.setSiteSetting('metaDescription', metaDescription));\n      }\n      if (robotsTxt !== undefined) {\n        promises.push(storage.setSiteSetting('robotsTxt', robotsTxt));\n      }\n      \n      await Promise.all(promises);\n      \n      // Create robots.txt file in public directory\n      if (robotsTxt !== undefined) {\n        const publicDir = path.join(process.cwd(), 'public');\n        if (!fs.existsSync(publicDir)) {\n          fs.mkdirSync(publicDir, { recursive: true });\n        }\n        fs.writeFileSync(path.join(publicDir, 'robots.txt'), robotsTxt);\n      }\n      \n      res.json({ message: 'Settings saved successfully' });\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Serve robots.txt\n  app.get('/robots.txt', (req, res) => {\n    const robotsPath = path.join(process.cwd(), 'public', 'robots.txt');\n    if (fs.existsSync(robotsPath)) {\n      res.sendFile(robotsPath);\n    } else {\n      // Default robots.txt if file doesn't exist\n      res.type('text/plain');\n      res.send('User-agent: *\\nDisallow: /admin\\nDisallow: /api\\n');\n    }\n  });\n\n  // API endpoint to get SEO settings for frontend\n  app.get('/api/seo-settings', async (req, res) => {\n    try {\n      const settings = await storage.getAllSiteSettings();\n      const settingsMap = settings.reduce((acc: any, setting: any) => {\n        acc[setting.key] = setting.value;\n        return acc;\n      }, {});\n      \n      res.json({\n        siteTitle: settingsMap.siteTitle || 'Dent Moldova - Каталог стоматологических клиник',\n        metaDescription: settingsMap.metaDescription || 'Найдите лучшую стоматологическую клинику в Молдове. Каталог проверенных клиник с ценами, отзывами и рейтингами.'\n      });\n    } catch (error) {\n      console.error(\"Error getting SEO settings:\", error);\n      res.json({\n        siteTitle: 'Dent Moldova - Каталог стоматологических клиник',\n        metaDescription: 'Найдите лучшую стоматологическую клинику в Молдове. Каталог проверенных клиник с ценами, отзывами и рейтингами.'\n      });\n    }\n  });\n\n  // Booking endpoints\n  app.post('/api/bookings', async (req, res) => {\n    try {\n      const { clinicId, firstName, lastName, phone, email, service, preferredDate, preferredTime, notes } = req.body;\n      \n      // Validate required fields\n      if (!clinicId || !firstName || !lastName || !phone || !service || !preferredDate || !preferredTime) {\n        return res.status(400).json({ message: 'Отсутствуют обязательные поля' });\n      }\n\n      const bookingData = {\n        clinicId,\n        firstName,\n        lastName,\n        phone,\n        email: email || null,\n        service,\n        preferredDate,\n        preferredTime,\n        notes: notes || null,\n      };\n\n      const booking = await storage.createBooking(bookingData);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Ошибка при создании заявки\" });\n    }\n  });\n\n  // Admin booking management\n  app.get('/api/admin/bookings', requireAdminAuth, async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      res.json({ bookings });\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Ошибка при получении заявок\" });\n    }\n  });\n\n  app.get('/api/admin/bookings/:id', requireAdminAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const booking = await storage.getBookingById(id);\n      \n      if (!booking) {\n        return res.status(404).json({ message: \"Заявка не найдена\" });\n      }\n      \n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error fetching booking:\", error);\n      res.status(500).json({ message: \"Ошибка при получении заявки\" });\n    }\n  });\n\n  app.put('/api/admin/bookings/:id/status', requireAdminAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ message: \"Статус обязателен\" });\n      }\n      \n      const booking = await storage.updateBookingStatus(id, status);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error updating booking status:\", error);\n      res.status(500).json({ message: \"Ошибка при обновлении статуса заявки\" });\n    }\n  });\n\n  // Record a view (middleware for tracking)\n  const recordViewMiddleware = async (req: any, res: any, next: any) => {\n    try {\n      const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\n      const userAgent = req.get('User-Agent') || '';\n      const route = req.path;\n      \n      // Extract clinic ID if it's a clinic page\n      let clinicId = null;\n      if (route.includes('/clinic/')) {\n        const slug = route.split('/clinic/')[1];\n        if (slug) {\n          const clinic = await storage.getClinicBySlug(slug);\n          clinicId = clinic?.id || null;\n        }\n      }\n      \n      // Record the view asynchronously (don't block the response)\n      storage.recordView({\n        ipAddress,\n        userAgent,\n        route,\n        clinicId,\n      }).catch(error => console.error('Error recording view:', error));\n      \n    } catch (error) {\n      console.error('Error in view tracking middleware:', error);\n    }\n    next();\n  };\n\n  // ===== PUBLIC ROUTES (existing) =====\n  // Get cities\n  app.get(\"/api/cities\", async (req, res) => {\n    try {\n      const cities = await storage.getCities();\n      res.json(cities);\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get districts by city\n  app.get(\"/api/cities/:cityId/districts\", async (req, res) => {\n    try {\n      const { cityId } = req.params;\n      const districts = await storage.getDistrictsByCity(cityId);\n      res.json(districts);\n    } catch (error) {\n      console.error(\"Error fetching districts:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Add view tracking middleware for all public routes\n  app.use('/api/clinics', recordViewMiddleware);\n  app.use('/clinic', recordViewMiddleware);\n  \n  // Get recommended clinics for the homepage\n  app.get(\"/api/recommended-clinics\", async (req, res) => {\n    try {\n      const recommendedClinics = await storage.getRecommendedClinics();\n      res.json({ clinics: recommendedClinics });\n    } catch (error) {\n      console.error(\"Error fetching recommended clinics:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get clinics with filters\n  app.get(\"/api/clinics\", async (req, res) => {\n    try {\n      const querySchema = z.object({\n        q: z.string().optional(),\n        city: z.string().optional(),\n        districts: z.union([z.string(), z.array(z.string())]).optional().transform(val => \n          typeof val === 'string' ? [val] : val\n        ),\n        specializations: z.union([z.string(), z.array(z.string())]).optional().transform(val => \n          typeof val === 'string' ? [val] : val\n        ),\n        languages: z.union([z.string(), z.array(z.string())]).optional().transform(val => \n          typeof val === 'string' ? [val] : val\n        ),\n        verified: z.string().optional().transform(val => val === 'true'),\n        urgentToday: z.string().optional().transform(val => val === 'true'),\n        priceMin: z.string().optional().transform(val => val ? parseInt(val) : undefined),\n        priceMax: z.string().optional().transform(val => val ? parseInt(val) : undefined),\n        sort: z.enum(['dscore', 'price', 'trust', 'reviews']).optional(),\n        page: z.string().optional().transform(val => val ? parseInt(val) : 1),\n        limit: z.string().optional().transform(val => val ? parseInt(val) : 12),\n      });\n\n      const filters = querySchema.parse(req.query);\n      const result = await storage.getClinics(filters);\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching clinics:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get clinic by slug\n  app.get(\"/api/clinics/:slug\", async (req, res) => {\n    try {\n      const { slug } = req.params;\n      const clinic = await storage.getClinicBySlug(slug);\n      \n      if (!clinic) {\n        return res.status(404).json({ message: \"Clinic not found\" });\n      }\n      \n      res.json(clinic);\n    } catch (error) {\n      console.error(\"Error fetching clinic:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":24070},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { cities, districts, clinics, packages } from \"@shared/schema\";\n\nfunction calculateDScore(trustIndex: number, reviewsIndex: number, priceIndex: number, accessIndex: number): number {\n  return Math.round(0.3 * trustIndex + 0.25 * reviewsIndex + 0.25 * (100 - priceIndex) + 0.2 * accessIndex);\n}\n\nasync function seed() {\n  console.log(\"Starting seed...\");\n\n  // Clear existing data\n  await db.delete(packages);\n  await db.delete(clinics);\n  await db.delete(districts);\n  await db.delete(cities);\n\n  // Create cities\n  const [chisinau, balti, comrat, tiraspol, cahul, orhei, soroca, ungheni] = await db.insert(cities).values([\n    { nameRu: \"Кишинёв\", nameRo: \"Chișinău\" },\n    { nameRu: \"Бельцы\", nameRo: \"Bălți\" },\n    { nameRu: \"Комрат\", nameRo: \"Comrat\" },\n    { nameRu: \"Тирасполь\", nameRo: \"Tiraspol\" },\n    { nameRu: \"Кахул\", nameRo: \"Cahul\" },\n    { nameRu: \"Орхей\", nameRo: \"Orhei\" },\n    { nameRu: \"Сорока\", nameRo: \"Soroca\" },\n    { nameRu: \"Унгены\", nameRo: \"Ungheni\" }\n  ]).returning();\n\n  // Create districts\n  const [centru, botanica, riscani, baltiCentru, comratCentru, tiraspolCentru, cahulCentru, orheiCentru, sorocaCentru, ungheniCentru] = await db.insert(districts).values([\n    { cityId: chisinau.id, nameRu: \"Центр\", nameRo: \"Centru\" },\n    { cityId: chisinau.id, nameRu: \"Ботаника\", nameRo: \"Botanica\" },\n    { cityId: chisinau.id, nameRu: \"Рышкань\", nameRo: \"Rîșcani\" },\n    { cityId: balti.id, nameRu: \"Центр\", nameRo: \"Centru\" },\n    { cityId: comrat.id, nameRu: \"Центр\", nameRo: \"Centru\" },\n    { cityId: tiraspol.id, nameRu: \"Центр\", nameRo: \"Centru\" },\n    { cityId: cahul.id, nameRu: \"Центр\", nameRo: \"Centru\" },\n    { cityId: orhei.id, nameRu: \"Центр\", nameRo: \"Centru\" },\n    { cityId: soroca.id, nameRu: \"Центр\", nameRo: \"Centru\" },\n    { cityId: ungheni.id, nameRu: \"Центр\", nameRo: \"Centru\" }\n  ]).returning();\n\n  // Create clinics data\n  const clinicsData = [\n    // Chișinău clinics\n    {\n      slug: \"life-dental-centru\",\n      name: \"Life Dental\",\n      logoUrl: \"/images/clinics/dental-clinic-01.jpg\",\n      cityId: chisinau.id,\n      districtId: centru.id,\n      address: \"bd. Ștefan cel Mare 100\",\n      phone: \"+373 22 000 100\",\n      website: \"https://lifedental.md\",\n      bookingUrl: \"/book/life-dental-centru\",\n      languages: [\"ru\", \"ro\", \"en\"],\n      specializations: [\"implants\", \"veneers\", \"hygiene\"],\n      tags: [\"рассрочка\", \"цифровая диагностика\"],\n      verified: true,\n      cnam: true,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 62,\n      trustIndex: 88,\n      reviewsIndex: 74,\n      accessIndex: 80,\n      dScore: 0 // Will be calculated\n    },\n    {\n      slug: \"denta-pro-botanica\",\n      name: \"Denta Pro\",\n      logoUrl: \"/images/clinics/modern-office-02.jpg\",\n      cityId: chisinau.id,\n      districtId: botanica.id,\n      address: \"str. Dacia 15\",\n      phone: \"+373 22 000 200\",\n      website: \"https://dentapro.md\",\n      bookingUrl: \"/book/denta-pro-botanica\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"hygiene\", \"endo\"],\n      tags: [\"запись онлайн\"],\n      verified: false,\n      cnam: false,\n      availToday: true,\n      availTomorrow: false,\n      priceIndex: 75,\n      trustIndex: 65,\n      reviewsIndex: 58,\n      accessIndex: 72,\n      dScore: 0\n    },\n    {\n      slug: \"smilecare-riscani\",\n      name: \"SmileCare\",\n      logoUrl: \"/images/clinics/white-office-03.jpg\",\n      cityId: chisinau.id,\n      districtId: riscani.id,\n      address: \"str. Alba Iulia 45\",\n      phone: \"+373 22 000 300\",\n      website: \"https://smilecare.md\",\n      bookingUrl: \"/book/smilecare-riscani\",\n      languages: [\"ru\", \"ro\", \"en\"],\n      specializations: [\"implants\", \"ortho\"],\n      tags: [\"премиум\", \"гарантия\"],\n      verified: true,\n      cnam: true,\n      availToday: false,\n      availTomorrow: true,\n      priceIndex: 35,\n      trustIndex: 95,\n      reviewsIndex: 89,\n      accessIndex: 92,\n      dScore: 0\n    },\n    {\n      slug: \"dental-plus-centru\",\n      name: \"Dental Plus\",\n      logoUrl: \"/images/clinics/professional-dental-04.jpg\",\n      cityId: chisinau.id,\n      districtId: centru.id,\n      address: \"bd. Ștefan cel Mare 75\",\n      phone: \"+373 22 000 400\",\n      website: \"https://dentalplus.md\",\n      bookingUrl: \"/book/dental-plus-centru\",\n      languages: [\"ru\", \"en\"],\n      specializations: [\"implants\", \"veneers\", \"ortho\"],\n      tags: [\"инновации\", \"3D диагностика\"],\n      verified: true,\n      cnam: false,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 45,\n      trustIndex: 82,\n      reviewsIndex: 77,\n      accessIndex: 85,\n      dScore: 0\n    },\n    {\n      slug: \"family-dental-botanica\",\n      name: \"Family Dental\",\n      logoUrl: \"/images/clinics/family-clinic-05.jpg\",\n      cityId: chisinau.id,\n      districtId: botanica.id,\n      address: \"str. Calea Iesilor 25\",\n      phone: \"+373 22 000 500\",\n      website: \"https://familydental.md\",\n      bookingUrl: \"/book/family-dental-botanica\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"kids\", \"hygiene\", \"endo\"],\n      tags: [\"семейная\", \"детская\"],\n      verified: true,\n      cnam: true,\n      availToday: false,\n      availTomorrow: false,\n      priceIndex: 58,\n      trustIndex: 78,\n      reviewsIndex: 82,\n      accessIndex: 75,\n      dScore: 0\n    },\n    {\n      slug: \"modern-dent-riscani\",\n      name: \"Modern Dent\",\n      logoUrl: \"/images/clinics/contemporary-06.jpg\",\n      cityId: chisinau.id,\n      districtId: riscani.id,\n      address: \"str. Mihail Kogalniceanu 88\",\n      phone: \"+373 22 000 600\",\n      website: \"https://moderndent.md\",\n      bookingUrl: \"/book/modern-dent-riscani\",\n      languages: [\"ru\", \"ro\", \"en\"],\n      specializations: [\"implants\", \"veneers\", \"hygiene\", \"ortho\"],\n      tags: [\"современные технологии\", \"безболезненно\"],\n      verified: true,\n      cnam: false,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 52,\n      trustIndex: 86,\n      reviewsIndex: 79,\n      accessIndex: 88,\n      dScore: 0\n    },\n    {\n      slug: \"white-smile-centru\",\n      name: \"White Smile\",\n      logoUrl: \"/images/clinics/bright-smile-07.jpg\",\n      cityId: chisinau.id,\n      districtId: centru.id,\n      address: \"str. Puskin 22\",\n      phone: \"+373 22 000 700\",\n      website: \"https://whitesmile.md\",\n      bookingUrl: \"/book/white-smile-centru\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"veneers\", \"hygiene\"],\n      tags: [\"отбеливание\", \"эстетика\"],\n      verified: false,\n      cnam: false,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 68,\n      trustIndex: 72,\n      reviewsIndex: 65,\n      accessIndex: 70,\n      dScore: 0\n    },\n    {\n      slug: \"dentomax-botanica\",\n      name: \"DentoMax\",\n      logoUrl: \"/images/clinics/premium-dental-08.jpg\",\n      cityId: chisinau.id,\n      districtId: botanica.id,\n      address: \"str. Independentei 55\",\n      phone: \"+373 22 000 800\",\n      website: \"https://dentomax.md\",\n      bookingUrl: \"/book/dentomax-botanica\",\n      languages: [\"ru\", \"ro\", \"en\"],\n      specializations: [\"implants\", \"endo\", \"ortho\"],\n      tags: [\"немецкое оборудование\", \"профессионально\"],\n      verified: true,\n      cnam: true,\n      availToday: false,\n      availTomorrow: true,\n      priceIndex: 42,\n      trustIndex: 90,\n      reviewsIndex: 85,\n      accessIndex: 82,\n      dScore: 0\n    },\n    {\n      slug: \"clinic-32-riscani\",\n      name: \"Клиника 32\",\n      logoUrl: \"/images/clinics/comfort-clinic-09.jpg\",\n      cityId: chisinau.id,\n      districtId: riscani.id,\n      address: \"bd. Moscovei 125\",\n      phone: \"+373 22 000 900\",\n      website: \"https://clinic32.md\",\n      bookingUrl: \"/book/clinic-32-riscani\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"implants\", \"hygiene\", \"kids\"],\n      tags: [\"доступные цены\", \"комфорт\"],\n      verified: false,\n      cnam: true,\n      availToday: true,\n      availTomorrow: false,\n      priceIndex: 72,\n      trustIndex: 68,\n      reviewsIndex: 71,\n      accessIndex: 76,\n      dScore: 0\n    },\n    {\n      slug: \"brilliant-dental-centru\",\n      name: \"Brilliant Dental\",\n      logoUrl: \"/images/clinics/luxury-dental-10.jpg\",\n      cityId: chisinau.id,\n      districtId: centru.id,\n      address: \"str. Armeneasca 15\",\n      phone: \"+373 22 001 000\",\n      website: \"https://brilliantdental.md\",\n      bookingUrl: \"/book/brilliant-dental-centru\",\n      languages: [\"ru\", \"ro\", \"en\"],\n      specializations: [\"veneers\", \"implants\", \"hygiene\"],\n      tags: [\"люксовый сервис\", \"VIP\"],\n      verified: true,\n      cnam: false,\n      availToday: false,\n      availTomorrow: true,\n      priceIndex: 25,\n      trustIndex: 92,\n      reviewsIndex: 88,\n      accessIndex: 78,\n      dScore: 0\n    },\n    {\n      slug: \"dental-art-botanica\",\n      name: \"Dental Art\",\n      logoUrl: \"/images/clinics/artistic-dental-11.jpg\",\n      cityId: chisinau.id,\n      districtId: botanica.id,\n      address: \"str. Tighina 35\",\n      phone: \"+373 22 001 100\",\n      website: \"https://dentalart.md\",\n      bookingUrl: \"/book/dental-art-botanica\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"veneers\", \"endo\", \"hygiene\"],\n      tags: [\"художественная стоматология\", \"красота\"],\n      verified: true,\n      cnam: false,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 55,\n      trustIndex: 80,\n      reviewsIndex: 75,\n      accessIndex: 83,\n      dScore: 0\n    },\n    {\n      slug: \"perfect-smile-riscani\",\n      name: \"Perfect Smile\",\n      logoUrl: \"/images/clinics/perfect-care-12.jpg\",\n      cityId: chisinau.id,\n      districtId: riscani.id,\n      address: \"str. Vadul lui Voda 88\",\n      phone: \"+373 22 001 200\",\n      website: \"https://perfectsmile.md\",\n      bookingUrl: \"/book/perfect-smile-riscani\",\n      languages: [\"ru\", \"ro\", \"en\"],\n      specializations: [\"ortho\", \"kids\", \"hygiene\"],\n      tags: [\"брекеты\", \"детский стоматолог\"],\n      verified: false,\n      cnam: true,\n      availToday: false,\n      availTomorrow: false,\n      priceIndex: 65,\n      trustIndex: 74,\n      reviewsIndex: 69,\n      accessIndex: 77,\n      dScore: 0\n    },\n\n    // Bălți clinics\n    {\n      slug: \"kidssmile-balti\",\n      name: \"KidsSmile\",\n      logoUrl: \"/images/clinics/children-clinic-13.jpg\",\n      cityId: balti.id,\n      districtId: baltiCentru.id,\n      address: \"str. Stefan cel Mare 45\",\n      phone: \"+373 23 000 100\",\n      website: \"https://kidssmile.md\",\n      bookingUrl: \"/book/kidssmile-balti\",\n      languages: [\"ro\", \"ru\"],\n      specializations: [\"kids\", \"hygiene\"],\n      tags: [\"детская\", \"игровая зона\"],\n      verified: false,\n      cnam: false,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 85,\n      trustIndex: 42,\n      reviewsIndex: 38,\n      accessIndex: 55,\n      dScore: 0\n    },\n    {\n      slug: \"nord-dental-balti\",\n      name: \"Nord Dental\",\n      logoUrl: \"/images/clinics/northern-dental-14.jpg\",\n      cityId: balti.id,\n      districtId: baltiCentru.id,\n      address: \"str. Independentei 12\",\n      phone: \"+373 23 000 200\",\n      website: \"https://norddental.md\",\n      bookingUrl: \"/book/nord-dental-balti\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"implants\", \"endo\", \"hygiene\"],\n      tags: [\"опытные врачи\", \"качество\"],\n      verified: true,\n      cnam: true,\n      availToday: false,\n      availTomorrow: true,\n      priceIndex: 48,\n      trustIndex: 85,\n      reviewsIndex: 78,\n      accessIndex: 80,\n      dScore: 0\n    },\n    {\n      slug: \"balti-smile-center\",\n      name: \"Bălți Smile Center\",\n      logoUrl: \"/images/clinics/smile-center-15.jpg\",\n      cityId: balti.id,\n      districtId: baltiCentru.id,\n      address: \"str. Vasile Alecsandri 8\",\n      phone: \"+373 23 000 300\",\n      website: \"https://baltismile.md\",\n      bookingUrl: \"/book/balti-smile-center\",\n      languages: [\"ro\", \"ru\", \"en\"],\n      specializations: [\"implants\", \"veneers\", \"ortho\"],\n      tags: [\"современная клиника\", \"европейские стандарты\"],\n      verified: true,\n      cnam: false,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 38,\n      trustIndex: 88,\n      reviewsIndex: 83,\n      accessIndex: 85,\n      dScore: 0\n    },\n\n    // Comrat clinics\n    {\n      slug: \"comrat-dental-center\",\n      name: \"Comrat Dental Center\",\n      logoUrl: \"/images/clinics/southern-clinic-16.jpg\",\n      cityId: comrat.id,\n      districtId: comratCentru.id,\n      address: \"str. Lenin 25\",\n      phone: \"+373 29 000 100\",\n      website: \"https://comratdental.md\",\n      bookingUrl: \"/book/comrat-dental-center\",\n      languages: [\"ru\", \"ro\", \"bg\"],\n      specializations: [\"hygiene\", \"endo\", \"implants\"],\n      tags: [\"региональный центр\", \"опыт\"],\n      verified: true,\n      cnam: true,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 58,\n      trustIndex: 75,\n      reviewsIndex: 68,\n      accessIndex: 72,\n      dScore: 0\n    },\n\n    // Tiraspol clinic\n    {\n      slug: \"pridnestrovie-smile\",\n      name: \"Приднестровье Смайл\",\n      logoUrl: \"/images/clinics/east-clinic-17.jpg\",\n      cityId: tiraspol.id,\n      districtId: tiraspolCentru.id,\n      address: \"ул. 25 Октября 45\",\n      phone: \"+373 53 000 100\",\n      website: \"https://pridnestroviesmile.md\",\n      bookingUrl: \"/book/pridnestrovie-smile\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"hygiene\", \"ortho\", \"kids\"],\n      tags: [\"семейная стоматология\", \"рассрочка\"],\n      verified: false,\n      cnam: false,\n      availToday: false,\n      availTomorrow: true,\n      priceIndex: 72,\n      trustIndex: 65,\n      reviewsIndex: 58,\n      accessIndex: 68,\n      dScore: 0\n    },\n\n    // Cahul clinic\n    {\n      slug: \"south-dental-cahul\",\n      name: \"South Dental\",\n      logoUrl: \"/images/clinics/border-clinic-18.jpg\",\n      cityId: cahul.id,\n      districtId: cahulCentru.id,\n      address: \"str. Stefan cel Mare 88\",\n      phone: \"+373 29 200 100\",\n      website: \"https://southdental.md\",\n      bookingUrl: \"/book/south-dental-cahul\",\n      languages: [\"ro\", \"ru\"],\n      specializations: [\"implants\", \"hygiene\", \"veneers\"],\n      tags: [\"современное оборудование\", \"качество\"],\n      verified: true,\n      cnam: true,\n      availToday: true,\n      availTomorrow: false,\n      priceIndex: 48,\n      trustIndex: 82,\n      reviewsIndex: 75,\n      accessIndex: 78,\n      dScore: 0\n    },\n\n    // Orhei clinic\n    {\n      slug: \"orhei-family-dental\",\n      name: \"Orhei Family Dental\",\n      logoUrl: \"/images/clinics/countryside-19.jpg\",\n      cityId: orhei.id,\n      districtId: orheiCentru.id,\n      address: \"str. Vasile Lupu 12\",\n      phone: \"+373 23 500 100\",\n      website: \"https://orheifamily.md\",\n      bookingUrl: \"/book/orhei-family-dental\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"hygiene\", \"endo\", \"kids\"],\n      tags: [\"семейный подход\", \"уют\"],\n      verified: false,\n      cnam: true,\n      availToday: true,\n      availTomorrow: true,\n      priceIndex: 65,\n      trustIndex: 72,\n      reviewsIndex: 68,\n      accessIndex: 75,\n      dScore: 0\n    },\n\n    // Soroca clinic\n    {\n      slug: \"soroca-modern-dental\",\n      name: \"Soroca Modern Dental\",\n      logoUrl: \"/images/clinics/fortress-clinic-20.jpg\",\n      cityId: soroca.id,\n      districtId: sorocaCentru.id,\n      address: \"str. Independentei 33\",\n      phone: \"+373 23 000 555\",\n      website: \"https://sorocamodern.md\",\n      bookingUrl: \"/book/soroca-modern-dental\",\n      languages: [\"ru\", \"ro\"],\n      specializations: [\"implants\", \"ortho\", \"hygiene\"],\n      tags: [\"северная Молдова\", \"профессионализм\"],\n      verified: true,\n      cnam: false,\n      availToday: false,\n      availTomorrow: true,\n      priceIndex: 52,\n      trustIndex: 78,\n      reviewsIndex: 72,\n      accessIndex: 80,\n      dScore: 0\n    }\n  ];\n\n  // Calculate D-scores\n  clinicsData.forEach(clinic => {\n    clinic.dScore = calculateDScore(clinic.trustIndex, clinic.reviewsIndex, clinic.priceIndex, clinic.accessIndex);\n  });\n\n  // Insert clinics\n  const insertedClinics = await db.insert(clinics).values(clinicsData).returning();\n\n  // Create packages for each clinic\n  const packagesData = [];\n  for (const clinic of insertedClinics) {\n    // Base prices vary by clinic quality\n    const multiplier = clinic.dScore > 80 ? 1.2 : clinic.dScore > 60 ? 1.0 : 0.8;\n    \n    packagesData.push(\n      {\n        clinicId: clinic.id,\n        code: \"implant_standard\",\n        nameRu: \"Имплант стандарт\",\n        nameRo: \"Implant standard\",\n        priceMin: Math.round(8000 * multiplier),\n        priceMax: Math.round(15000 * multiplier),\n        priceMedian: Math.round(11500 * multiplier)\n      },\n      {\n        clinicId: clinic.id,\n        code: \"hygiene_pro\",\n        nameRu: \"Профгигиена\",\n        nameRo: \"Igienă profesională\",\n        priceMin: Math.round(500 * multiplier),\n        priceMax: Math.round(1200 * multiplier),\n        priceMedian: Math.round(850 * multiplier)\n      },\n      {\n        clinicId: clinic.id,\n        code: \"rct_molar\",\n        nameRu: \"Лечение каналов моляр\",\n        nameRo: \"Tratament canal molar\",\n        priceMin: Math.round(2000 * multiplier),\n        priceMax: Math.round(3800 * multiplier),\n        priceMedian: Math.round(2900 * multiplier)\n      }\n    );\n  }\n\n  await db.insert(packages).values(packagesData);\n\n  console.log(\"Seed completed successfully!\");\n  console.log(`Created ${insertedClinics.length} clinics with ${packagesData.length} packages`);\n}\n\n// Run seed if this file is executed directly\nseed().catch(console.error);\n\nexport { seed };\n","size_bytes":18161},"server/storage.ts":{"content":"import { \n  cities, districts, clinics, packages, services, users, siteViews, siteSettings, bookings,\n  type City, type District, type Clinic, type Package, type Service, type User, type SiteView, type SiteSetting, type Booking,\n  type InsertCity, type InsertDistrict, type InsertClinic, type InsertPackage, type InsertService, type InsertUser, type InsertSiteView, type InsertSiteSetting, type InsertBooking\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, ilike, inArray, gte, lte, desc, asc, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods (existing)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // City methods\n  getCities(): Promise<City[]>;\n  createCity(city: InsertCity): Promise<City>;\n\n  // District methods\n  getDistrictsByCity(cityId: string): Promise<District[]>;\n  createDistrict(district: InsertDistrict): Promise<District>;\n\n  // Clinic methods\n  getClinics(filters: ClinicFilters): Promise<{ clinics: (Clinic & { city: City; district: District | null; services: Service[] })[]; total: number }>;\n  getClinicBySlug(slug: string): Promise<(Clinic & { city: City; district: District | null; services: Service[] }) | undefined>;\n  createClinic(clinic: InsertClinic): Promise<Clinic>;\n  updateClinicDScore(id: string, dScore: number): Promise<void>;\n  \n  // Admin clinic methods\n  getClinicById(id: string): Promise<Clinic | undefined>;\n  updateClinic(id: string, updates: Partial<InsertClinic>): Promise<Clinic>;\n  deleteClinic(id: string): Promise<void>;\n  getAdminStats(): Promise<{ totalClinics: number; verifiedClinics: number; totalCities: number; averageDScore: number }>;\n\n  // Package methods\n  createPackage(pkg: InsertPackage): Promise<Package>;\n\n  // View tracking methods\n  recordView(view: InsertSiteView): Promise<SiteView>;\n  getTodayViews(): Promise<number>;\n  getRecentClinics(limit?: number): Promise<(Clinic & { city: City; district: District | null })[]>;\n  getRecommendedClinics(): Promise<(Clinic & { city: City; district: District | null; services: Service[] })[]>;\n  \n  // Site settings methods\n  getSiteSetting(key: string): Promise<SiteSetting | undefined>;\n  setSiteSetting(key: string, value: string): Promise<SiteSetting>;\n  getAllSiteSettings(): Promise<SiteSetting[]>;\n  \n  // Booking methods\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  \n  // Service methods  \n  getClinicServices(clinicId: string): Promise<Service[]>;\n  updateClinicServices(clinicId: string, services: {name: string, price: number, currency: string}[]): Promise<void>;\n  getBookings(): Promise<(Booking & { clinic: Clinic })[]>;\n  getBookingById(id: string): Promise<(Booking & { clinic: Clinic }) | undefined>;\n  updateBookingStatus(id: string, status: string): Promise<Booking>;\n}\n\nexport interface ClinicFilters {\n  q?: string;\n  city?: string;\n  districts?: string[];\n  specializations?: string[];\n  languages?: string[];\n  verified?: boolean;\n  urgentToday?: boolean;\n  priceMin?: number;\n  priceMax?: number;\n  sort?: 'dscore' | 'price' | 'trust' | 'reviews';\n  page?: number;\n  limit?: number;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getCities(): Promise<City[]> {\n    return await db.select().from(cities);\n  }\n\n  async createCity(city: InsertCity): Promise<City> {\n    const [newCity] = await db.insert(cities).values(city).returning();\n    return newCity;\n  }\n\n  async getDistrictsByCity(cityId: string): Promise<District[]> {\n    return await db.select().from(districts).where(eq(districts.cityId, cityId));\n  }\n\n  async createDistrict(district: InsertDistrict): Promise<District> {\n    const [newDistrict] = await db.insert(districts).values(district).returning();\n    return newDistrict;\n  }\n\n  async getClinics(filters: ClinicFilters): Promise<{ clinics: (Clinic & { city: City; district: District | null; services: Service[] })[]; total: number }> {\n    const { q, city, districts: filterDistricts, specializations, languages, verified, urgentToday, priceMin, priceMax, sort = 'dscore', page = 1, limit = 12 } = filters;\n\n    let query = db\n      .select({\n        clinic: clinics,\n        city: cities,\n        district: districts,\n      })\n      .from(clinics)\n      .leftJoin(cities, eq(clinics.cityId, cities.id))\n      .leftJoin(districts, eq(clinics.districtId, districts.id));\n\n    const conditions = [];\n\n    // Search query - search in name, specializations, tags, and services\n    if (q) {\n      // Find clinics that have matching services\n      const subquery = db\n        .select({ clinicId: services.clinicId })\n        .from(services)\n        .where(\n          ilike(services.name, `%${q}%`)\n        );\n      \n      conditions.push(\n        or(\n          ilike(clinics.name, `%${q}%`),\n          sql`${clinics.specializations}::text ilike ${`%${q}%`}`,\n          sql`${clinics.tags}::text ilike ${`%${q}%`}`,\n          sql`${clinics.id} IN (${subquery})`\n        )\n      );\n    }\n\n    // City filter\n    if (city) {\n      conditions.push(eq(cities.id, city));\n    }\n\n    // Districts filter\n    if (filterDistricts && filterDistricts.length > 0) {\n      conditions.push(inArray(clinics.districtId, filterDistricts));\n    }\n\n    // Specializations filter\n    if (specializations && specializations.length > 0) {\n      // Use SQL for proper JSON array contains check\n      const specializationConditions = specializations.map(spec => \n        sql`${clinics.specializations}::jsonb ? ${spec}`\n      );\n      conditions.push(...specializationConditions);\n    }\n\n    // Languages filter\n    if (languages && languages.length > 0) {\n      const languageConditions = languages.map(lang => \n        sql`${clinics.languages}::jsonb ? ${lang}`\n      );\n      conditions.push(...languageConditions);\n    }\n\n    // Verified filter\n    if (verified) {\n      conditions.push(eq(clinics.verified, true));\n    }\n\n    // Urgent today filter\n    if (urgentToday) {\n      conditions.push(eq(clinics.availToday, true));\n    }\n\n    // Price range filter\n    if (priceMin !== undefined) {\n      conditions.push(gte(clinics.priceIndex, priceMin));\n    }\n    if (priceMax !== undefined) {\n      conditions.push(lte(clinics.priceIndex, priceMax));\n    }\n\n    // Apply conditions and sorting\n    let finalQuery: any = query;\n    if (conditions.length > 0) {\n      finalQuery = finalQuery.where(and(...conditions));\n    }\n\n    // Sorting\n    switch (sort) {\n      case 'price':\n        finalQuery = finalQuery.orderBy(asc(clinics.priceIndex));\n        break;\n      case 'trust':\n        finalQuery = finalQuery.orderBy(desc(clinics.trustIndex));\n        break;\n      case 'reviews':\n        finalQuery = finalQuery.orderBy(desc(clinics.reviewsIndex));\n        break;\n      case 'dscore':\n      default:\n        finalQuery = finalQuery.orderBy(desc(clinics.dScore));\n        break;\n    }\n\n    // Pagination\n    const offset = (page - 1) * limit;\n    const results = await finalQuery.limit(limit).offset(offset);\n\n    // Get services for each clinic\n    const clinicIds = results.map((r: any) => r.clinic.id);\n    const clinicServices = clinicIds.length > 0 \n      ? await db.select().from(services).where(inArray(services.clinicId, clinicIds))\n      : [];\n\n    // Get total count\n    let countQuery = db.select({ count: count() }).from(clinics)\n      .leftJoin(cities, eq(clinics.cityId, cities.id))\n      .leftJoin(districts, eq(clinics.districtId, districts.id));\n\n    if (conditions.length > 0) {\n      countQuery = countQuery.where(and(...conditions)) as any;\n    }\n\n    const [{ count: total }] = await countQuery;\n\n    // Combine results\n    const clinicsWithServices = results.map((result: any) => ({\n      ...result.clinic,\n      city: result.city!,\n      // district: removed\n      services: clinicServices.filter(service => service.clinicId === result.clinic.id)\n    }));\n\n    return { clinics: clinicsWithServices, total };\n  }\n\n  async getClinicBySlug(slug: string): Promise<(Clinic & { city: City; district: District | null; services: Service[] }) | undefined> {\n    const [result] = await db\n      .select({\n        clinic: clinics,\n        city: cities,\n        district: districts,\n      })\n      .from(clinics)\n      .leftJoin(cities, eq(clinics.cityId, cities.id))\n      .leftJoin(districts, eq(clinics.districtId, districts.id))\n      .where(eq(clinics.slug, slug));\n\n    if (!result) return undefined;\n\n    const clinicServices = await db.select().from(services).where(eq(services.clinicId, result.clinic.id));\n\n    return {\n      ...result.clinic,\n      city: result.city!,\n      district: result.district,\n      services: clinicServices\n    } as any;\n  }\n\n  async createClinic(clinic: InsertClinic): Promise<Clinic> {\n    const [newClinic] = await db.insert(clinics).values(clinic as any).returning();\n    return newClinic;\n  }\n\n  async updateClinicDScore(id: string, dScore: number): Promise<void> {\n    await db.update(clinics)\n      .set({ dScore, updatedAt: new Date() })\n      .where(eq(clinics.id, id));\n  }\n\n  async createPackage(pkg: InsertPackage): Promise<Package> {\n    const [newPackage] = await db.insert(packages).values(pkg).returning();\n    return newPackage;\n  }\n\n  // Admin methods implementation\n  async getClinicById(id: string): Promise<Clinic | undefined> {\n    const [clinic] = await db.select().from(clinics).where(eq(clinics.id, id));\n    return clinic || undefined;\n  }\n\n  async updateClinic(id: string, updates: Partial<InsertClinic>): Promise<Clinic> {\n    const updateData = { ...updates, updatedAt: new Date() };\n    const [updatedClinic] = await db.update(clinics)\n      .set(updateData as any)\n      .where(eq(clinics.id, id))\n      .returning();\n    return updatedClinic;\n  }\n\n  async deleteClinic(id: string): Promise<void> {\n    // Delete associated packages first\n    await db.delete(packages).where(eq(packages.clinicId, id));\n    // Then delete clinic\n    await db.delete(clinics).where(eq(clinics.id, id));\n  }\n\n  async getAdminStats(): Promise<{ totalClinics: number; verifiedClinics: number; totalCities: number; averageDScore: number }> {\n    const [stats] = await db\n      .select({\n        totalClinics: count(),\n        verifiedClinics: sql<number>`sum(case when ${clinics.verified} then 1 else 0 end)`,\n        averageDScore: sql<number>`avg(${clinics.dScore})`,\n      })\n      .from(clinics);\n\n    const [cityStats] = await db\n      .select({ totalCities: count() })\n      .from(cities);\n\n    return {\n      totalClinics: stats.totalClinics,\n      verifiedClinics: Number(stats.verifiedClinics),\n      totalCities: cityStats.totalCities,\n      averageDScore: Number(stats.averageDScore) || 0,\n    };\n  }\n\n  // View tracking methods\n  async recordView(view: InsertSiteView): Promise<SiteView> {\n    const [newView] = await db.insert(siteViews).values(view).returning();\n    return newView;\n  }\n\n  async getTodayViews(): Promise<number> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    // Count unique IP addresses for today\n    const [result] = await db\n      .select({ \n        count: sql<number>`count(distinct ${siteViews.ipAddress})` \n      })\n      .from(siteViews)\n      .where(gte(siteViews.createdAt, today));\n      \n    return result.count || 0;\n  }\n\n  async getRecommendedClinics(): Promise<(Clinic & { city: City; district: District | null; services: Service[] })[]> {\n    const results = await db.query.clinics.findMany({\n      where: eq(clinics.recommended, true),\n      with: {\n        city: true,\n        district: true,\n        services: true,\n      },\n      orderBy: desc(clinics.dScore),\n      limit: 6,\n    });\n    return results as any;\n  }\n\n  async getRecentClinics(limit: number = 5): Promise<(Clinic & { city: City; district: District | null })[]> {\n    const results = await db.query.clinics.findMany({\n      with: {\n        city: true,\n        district: true,\n      },\n      orderBy: [desc(clinics.createdAt)],\n      limit: limit,\n    });\n\n    return results as (Clinic & { city: City; district: District | null })[];\n  }\n\n  // Site settings methods\n  async getSiteSetting(key: string): Promise<SiteSetting | undefined> {\n    const [setting] = await db.select().from(siteSettings).where(eq(siteSettings.key, key));\n    return setting || undefined;\n  }\n\n  async setSiteSetting(key: string, value: string): Promise<SiteSetting> {\n    const [setting] = await db\n      .insert(siteSettings)\n      .values({ key, value })\n      .onConflictDoUpdate({\n        target: siteSettings.key,\n        set: {\n          value,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return setting;\n  }\n\n  async getAllSiteSettings(): Promise<SiteSetting[]> {\n    return await db.select().from(siteSettings);\n  }\n\n  // Booking methods\n  async createBooking(bookingData: InsertBooking): Promise<Booking> {\n    const [booking] = await db.insert(bookings).values(bookingData).returning();\n    return booking;\n  }\n\n  async getBookings(): Promise<(Booking & { clinic: Clinic })[]> {\n    const results = await db\n      .select({\n        booking: bookings,\n        clinic: clinics,\n      })\n      .from(bookings)\n      .leftJoin(clinics, eq(bookings.clinicId, clinics.id))\n      .orderBy(desc(bookings.createdAt));\n\n    return results.map(result => ({\n      ...result.booking,\n      clinic: result.clinic!,\n    }));\n  }\n\n  async getBookingById(id: string): Promise<(Booking & { clinic: Clinic }) | undefined> {\n    const [result] = await db\n      .select({\n        booking: bookings,\n        clinic: clinics,\n      })\n      .from(bookings)\n      .leftJoin(clinics, eq(bookings.clinicId, clinics.id))\n      .where(eq(bookings.id, id));\n\n    if (!result) return undefined;\n\n    return {\n      ...result.booking,\n      clinic: result.clinic!,\n    };\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<Booking> {\n    const [booking] = await db\n      .update(bookings)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(bookings.id, id))\n      .returning();\n    return booking;\n  }\n\n  // Service methods\n  async getClinicServices(clinicId: string): Promise<Service[]> {\n    return db.select().from(services).where(eq(services.clinicId, clinicId));\n  }\n\n  async updateClinicServices(clinicId: string, serviceData: {name: string, price: number, currency: string}[]): Promise<void> {\n    // First delete all existing services for this clinic\n    await db.delete(services).where(eq(services.clinicId, clinicId));\n    \n    // Then insert new services if any\n    if (serviceData.length > 0) {\n      await db.insert(services).values(\n        serviceData.map(service => ({\n          clinicId,\n          name: service.name,\n          price: service.price,\n          currency: service.currency\n        }))\n      );\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15370},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const cities = pgTable(\"cities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nameRu: text(\"name_ru\").notNull(),\n  nameRo: text(\"name_ro\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const districts = pgTable(\"districts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cityId: varchar(\"city_id\").notNull().references(() => cities.id),\n  nameRu: text(\"name_ru\").notNull(),\n  nameRo: text(\"name_ro\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const clinics = pgTable(\"clinics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slug: varchar(\"slug\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  logoUrl: text(\"logo_url\"),\n  cityId: varchar(\"city_id\").notNull().references(() => cities.id),\n  districtId: varchar(\"district_id\").references(() => districts.id),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  website: text(\"website\"),\n  bookingUrl: text(\"booking_url\"),\n  languages: json(\"languages\").$type<string[]>().default([]),\n  specializations: json(\"specializations\").$type<string[]>().default([]),\n  tags: json(\"tags\").$type<string[]>().default([]),\n  verified: boolean(\"verified\").default(false),\n  cnam: boolean(\"cnam\").default(false),\n  availToday: boolean(\"avail_today\").default(false),\n  availTomorrow: boolean(\"avail_tomorrow\").default(false),\n  priceIndex: integer(\"price_index\").notNull(),\n  trustIndex: integer(\"trust_index\").notNull(),\n  reviewsIndex: integer(\"reviews_index\").notNull(),\n  accessIndex: integer(\"access_index\").notNull(),\n  dScore: integer(\"d_score\").notNull(),\n  googleRating: integer(\"google_rating\"),\n  googleReviewsCount: integer(\"google_reviews_count\"),\n  recommended: boolean(\"recommended\").default(false),\n  promotionalLabels: json(\"promotional_labels\").$type<string[]>().default([]),\n  currency: varchar(\"currency\").notNull().default(\"MDL\"), // MDL, EUR, USD\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const packages = pgTable(\"packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id),\n  code: varchar(\"code\").notNull(), // \"implant_standard\" | \"hygiene_pro\" | \"rct_molar\"\n  nameRu: text(\"name_ru\").notNull(),\n  nameRo: text(\"name_ro\").notNull(),\n  priceMin: integer(\"price_min\").notNull(),\n  priceMax: integer(\"price_max\").notNull(),\n  priceMedian: integer(\"price_median\").notNull(),\n});\n\n// Services table for custom clinic services managed by admin\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id),\n  name: text(\"name\").notNull(),\n  price: integer(\"price\").notNull(), // Base price\n  currency: varchar(\"currency\").notNull().default(\"MDL\"), // MDL, EUR, USD\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// View tracking table for real IP-based analytics\nexport const siteViews = pgTable(\"site_views\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ipAddress: varchar(\"ip_address\").notNull(),\n  userAgent: text(\"user_agent\"),\n  route: varchar(\"route\").notNull(),\n  clinicId: varchar(\"clinic_id\").references(() => clinics.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Site settings table for admin configuration\nexport const siteSettings = pgTable(\"site_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\").notNull().unique(),\n  value: text(\"value\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Bookings table for clinic appointment requests\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  service: text(\"service\").notNull(),\n  preferredDate: text(\"preferred_date\").notNull(),\n  preferredTime: text(\"preferred_time\").notNull(),\n  notes: text(\"notes\"),\n  status: varchar(\"status\").notNull().default(\"new\"), // new, contacted, confirmed, completed, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const citiesRelations = relations(cities, ({ many }) => ({\n  districts: many(districts),\n  clinics: many(clinics),\n}));\n\nexport const districtsRelations = relations(districts, ({ one, many }) => ({\n  city: one(cities, {\n    fields: [districts.cityId],\n    references: [cities.id],\n  }),\n  clinics: many(clinics),\n}));\n\nexport const clinicsRelations = relations(clinics, ({ one, many }) => ({\n  city: one(cities, {\n    fields: [clinics.cityId],\n    references: [cities.id],\n  }),\n  district: one(districts, {\n    fields: [clinics.districtId],\n    references: [districts.id],\n  }),\n  packages: many(packages),\n  services: many(services),\n}));\n\nexport const packagesRelations = relations(packages, ({ one }) => ({\n  clinic: one(clinics, {\n    fields: [packages.clinicId],\n    references: [clinics.id],\n  }),\n}));\n\nexport const servicesRelations = relations(services, ({ one }) => ({\n  clinic: one(clinics, {\n    fields: [services.clinicId],\n    references: [clinics.id],\n  }),\n}));\n\nexport const siteViewsRelations = relations(siteViews, ({ one }) => ({\n  clinic: one(clinics, {\n    fields: [siteViews.clinicId],\n    references: [clinics.id],\n  }),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  clinic: one(clinics, {\n    fields: [bookings.clinicId],\n    references: [clinics.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCitySchema = createInsertSchema(cities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDistrictSchema = createInsertSchema(districts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClinicSchema = createInsertSchema(clinics).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPackageSchema = createInsertSchema(packages).omit({\n  id: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSiteViewSchema = createInsertSchema(siteViews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSiteSettingSchema = createInsertSchema(siteSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type City = typeof cities.$inferSelect;\nexport type District = typeof districts.$inferSelect;\nexport type Clinic = typeof clinics.$inferSelect;\nexport type Package = typeof packages.$inferSelect;\nexport type Service = typeof services.$inferSelect;\nexport type SiteView = typeof siteViews.$inferSelect;\nexport type SiteSetting = typeof siteSettings.$inferSelect;\nexport type Booking = typeof bookings.$inferSelect;\n\nexport type InsertCity = z.infer<typeof insertCitySchema>;\nexport type InsertDistrict = z.infer<typeof insertDistrictSchema>;\nexport type InsertClinic = z.infer<typeof insertClinicSchema>;\nexport type InsertPackage = z.infer<typeof insertPackageSchema>;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type InsertSiteView = z.infer<typeof insertSiteViewSchema>;\nexport type InsertSiteSetting = z.infer<typeof insertSiteSettingSchema>;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\n// Keep existing user schema for compatibility\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":8461},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useSEO } from \"@/hooks/useSEO\";\nimport Home from \"@/pages/Home\";\nimport ClinicPage from \"@/pages/clinic/[slug]\";\nimport AdminPage from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  // Initialize SEO settings globally\n  useSEO();\n  \n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/clinic/:slug\" component={ClinicPage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":992},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n}\n\n/* Custom score bar colors */\n.score-red {\n  background-color: hsl(0 85% 60%);\n}\n\n.score-yellow {\n  background-color: hsl(48 89% 60%);\n}\n\n.score-green {\n  background-color: hsl(142 72% 48%);\n}\n","size_bytes":3648},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/administrator/AdminApp.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { AdminLogin } from './AdminLogin';\nimport { AdminDashboard } from './AdminDashboard';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport function AdminApp() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [loginError, setLoginError] = useState('');\n\n  useEffect(() => {\n    // Check if admin is already authenticated\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      await apiRequest('GET', '/api/admin/auth/check');\n      setIsAuthenticated(true);\n    } catch (error) {\n      setIsAuthenticated(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLogin = async (username: string, password: string) => {\n    setLoginError('');\n    try {\n      await apiRequest('POST', '/api/admin/auth/login', { username, password });\n      setIsAuthenticated(true);\n    } catch (error: any) {\n      setLoginError(error.message || 'Неверный логин или пароль');\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest('POST', '/api/admin/auth/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n    setIsAuthenticated(false);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-100\">\n        <AdminLogin\n          onLogin={handleLogin}\n          error={loginError}\n          loading={false}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <AdminDashboard onLogout={handleLogout} />\n    </div>\n  );\n}","size_bytes":1884},"client/src/administrator/AdminDashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { AdminHeader } from './components/AdminHeader';\nimport { AdminSidebar } from './components/AdminSidebar';\nimport { ClinicsManagement } from './components/ClinicsManagement';\nimport { Dashboard } from './components/Dashboard';\nimport { PackagesManagement } from './components/PackagesManagement';\nimport { CitiesManagement } from './components/CitiesManagement';\nimport { Settings } from './components/Settings';\nimport { BookingsManagement } from './components/BookingsManagement';\n\ntype AdminPage = 'dashboard' | 'clinics' | 'packages' | 'cities' | 'bookings' | 'settings';\n\ninterface AdminDashboardProps {\n  onLogout: () => void;\n}\n\nexport function AdminDashboard({ onLogout }: AdminDashboardProps) {\n  const [currentPage, setCurrentPage] = useState<AdminPage>('dashboard');\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n\n  const renderCurrentPage = () => {\n    switch (currentPage) {\n      case 'dashboard':\n        return <Dashboard onNavigate={setCurrentPage} />;\n      case 'clinics':\n        return <ClinicsManagement />;\n      case 'packages':\n        return <PackagesManagement />;\n      case 'cities':\n        return <CitiesManagement />;\n      case 'bookings':\n        return <BookingsManagement />;\n      case 'settings':\n        return <Settings />;\n      default:\n        return <Dashboard onNavigate={setCurrentPage} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminHeader \n        onLogout={onLogout}\n        onToggleSidebar={() => setSidebarOpen(!sidebarOpen)}\n        sidebarOpen={sidebarOpen}\n      />\n      \n      <div className=\"flex\">\n        <AdminSidebar \n          currentPage={currentPage}\n          onPageChange={setCurrentPage}\n          isOpen={sidebarOpen}\n        />\n        \n        <main className={`flex-1 transition-all duration-300 ${sidebarOpen ? 'ml-64' : 'ml-16'}`}>\n          <div className=\"p-6\">\n            {renderCurrentPage()}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":2034},"client/src/administrator/AdminLogin.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Lock, User } from 'lucide-react';\n\ninterface AdminLoginProps {\n  onLogin: (username: string, password: string) => void;\n  error?: string;\n  loading?: boolean;\n}\n\nexport function AdminLogin({ onLogin, error, loading }: AdminLoginProps) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onLogin(username, password);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            Административная панель\n          </CardTitle>\n          <p className=\"text-gray-600\">Dent Moldova Admin</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\">Логин</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  placeholder=\"admin\"\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Пароль</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"••••••••\"\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              disabled={loading}\n            >\n              {loading ? 'Вход...' : 'Войти в админку'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2892},"client/src/components/AddClinicModal.tsx":{"content":"import { useState } from 'react';\nimport { useTranslation } from '../lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Building2 } from 'lucide-react';\n\ninterface AddClinicModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\ninterface FormData {\n  clinicName: string;\n  contactEmail: string;\n  contactPhone: string;\n  city: string;\n  address: string;\n  website: string;\n  specializations: string[];\n  description: string;\n}\n\nexport function AddClinicModal({ open, onClose }: AddClinicModalProps) {\n  const { t, language } = useTranslation();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  \n  const [formData, setFormData] = useState<FormData>({\n    clinicName: '',\n    contactEmail: '',\n    contactPhone: '',\n    city: '',\n    address: '',\n    website: '',\n    specializations: [],\n    description: ''\n  });\n\n  const updateField = (field: keyof FormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!formData.clinicName.trim()) newErrors.clinicName = 'Введите название клиники';\n    if (!formData.contactEmail.trim()) newErrors.contactEmail = 'Введите email';\n    if (!formData.contactPhone.trim()) newErrors.contactPhone = 'Введите телефон';\n    if (!formData.city.trim()) newErrors.city = 'Выберите город';\n    if (!formData.address.trim()) newErrors.address = 'Введите адрес';\n    if (!formData.description.trim()) newErrors.description = 'Введите описание';\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (formData.contactEmail && !emailRegex.test(formData.contactEmail)) {\n      newErrors.contactEmail = 'Неверный формат email';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n\n    setLoading(true);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    setLoading(false);\n    \n    toast({\n      title: \"Заявка отправлена!\",\n      description: \"Мы рассмотрим вашу заявку в течение 24 часов и свяжемся с вами для обсуждения деталей размещения.\",\n    });\n    \n    onClose();\n    \n    // Reset form\n    setFormData({\n      clinicName: '',\n      contactEmail: '',\n      contactPhone: '',\n      city: '',\n      address: '',\n      website: '',\n      specializations: [],\n      description: ''\n    });\n  };\n\n  const cities = [\n    { id: 'chisinau', name: 'Кишинев' },\n    { id: 'balti', name: 'Бельцы' },\n    { id: 'tiraspol', name: 'Тирасполь' },\n    { id: 'cahul', name: 'Кахул' },\n    { id: 'orhei', name: 'Орхей' },\n    { id: 'comrat', name: 'Комрат' }\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"border-b border-gray-200 pb-4\">\n          <DialogTitle className=\"text-2xl font-bold text-gray-900 flex items-center\">\n            <Building2 className=\"h-6 w-6 mr-2 text-blue-600\" />\n            {t('clinicFormTitle')}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm text-blue-700\">\n            <p>Размещение клиники в каталоге Dent Moldova поможет вам привлечь новых пациентов. Заполните форму, и мы свяжемся с вами в ближайшее время.</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"clinicName\">{t('clinicName')} *</Label>\n              <Input\n                id=\"clinicName\"\n                value={formData.clinicName}\n                onChange={(e) => updateField('clinicName', e.target.value)}\n                placeholder=\"Например: Dent Perfect\"\n                className={errors.clinicName ? 'border-red-500' : ''}\n              />\n              {errors.clinicName && <p className=\"text-red-500 text-sm mt-1\">{errors.clinicName}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"city\">Город *</Label>\n              <Select value={formData.city} onValueChange={(value) => updateField('city', value)}>\n                <SelectTrigger className={errors.city ? 'border-red-500' : ''}>\n                  <SelectValue placeholder=\"Выберите город\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {cities.map(city => (\n                    <SelectItem key={city.id} value={city.id}>{city.name}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.city && <p className=\"text-red-500 text-sm mt-1\">{errors.city}</p>}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"address\">Адрес *</Label>\n            <Input\n              id=\"address\"\n              value={formData.address}\n              onChange={(e) => updateField('address', e.target.value)}\n              placeholder=\"ул. Штефан чел Маре, 123\"\n              className={errors.address ? 'border-red-500' : ''}\n            />\n            {errors.address && <p className=\"text-red-500 text-sm mt-1\">{errors.address}</p>}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"contactEmail\">{t('clinicEmail')} *</Label>\n              <Input\n                id=\"contactEmail\"\n                type=\"email\"\n                value={formData.contactEmail}\n                onChange={(e) => updateField('contactEmail', e.target.value)}\n                placeholder=\"info@clinic.md\"\n                className={errors.contactEmail ? 'border-red-500' : ''}\n              />\n              {errors.contactEmail && <p className=\"text-red-500 text-sm mt-1\">{errors.contactEmail}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"contactPhone\">{t('clinicPhone')} *</Label>\n              <Input\n                id=\"contactPhone\"\n                value={formData.contactPhone}\n                onChange={(e) => updateField('contactPhone', e.target.value)}\n                placeholder=\"+373 XX XXX XXX\"\n                className={errors.contactPhone ? 'border-red-500' : ''}\n              />\n              {errors.contactPhone && <p className=\"text-red-500 text-sm mt-1\">{errors.contactPhone}</p>}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"website\">Сайт клиники</Label>\n            <Input\n              id=\"website\"\n              type=\"url\"\n              value={formData.website}\n              onChange={(e) => updateField('website', e.target.value)}\n              placeholder=\"https://clinic.md\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">{t('clinicDescription')} *</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => updateField('description', e.target.value)}\n              placeholder=\"Расскажите о ваших услугах, специализациях, преимуществах, оборудовании...\"\n              rows={4}\n              className={errors.description ? 'border-red-500' : ''}\n            />\n            {errors.description && <p className=\"text-red-500 text-sm mt-1\">{errors.description}</p>}\n          </div>\n\n          <div className=\"flex justify-end space-x-4 pt-4 border-t border-gray-200\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              {t('close')}\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={loading}\n              className=\"bg-blue-600 text-white hover:bg-blue-700\"\n            >\n              {loading ? 'Отправляем...' : t('submit')}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8955},"client/src/components/BookingForm.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Calendar, Clock, Phone, User, Mail } from 'lucide-react';\n\nconst bookingSchema = z.object({\n  firstName: z.string().min(2, 'Имя должно содержать минимум 2 символа'),\n  lastName: z.string().min(2, 'Фамилия должна содержать минимум 2 символа'),\n  phone: z.string().min(10, 'Введите корректный номер телефона'),\n  email: z.union([z.literal(''), z.string().email('Введите корректный email')]).optional(),\n  service: z.string().min(1, 'Выберите услугу'),\n  preferredDate: z.string().min(1, 'Выберите предпочтительную дату'),\n  preferredTime: z.string().min(1, 'Выберите предпочтительное время'),\n  notes: z.string().optional(),\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\ninterface BookingFormProps {\n  clinic: {\n    id: string;\n    name: string;\n    phone?: string;\n    specializations?: string[];\n  } | null;\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function BookingForm({ clinic, open, onClose }: BookingFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      phone: '',\n      email: '',\n      service: '',\n      preferredDate: '',\n      preferredTime: '',\n      notes: '',\n    }\n  });\n\n  const onSubmit = async (data: BookingFormData) => {\n    setIsSubmitting(true);\n    try {\n      const bookingData = {\n        ...data,\n        clinicId: clinic?.id\n      };\n      \n      await apiRequest('POST', '/api/bookings', bookingData);\n      \n      toast({\n        title: 'Заявка отправлена!',\n        description: `Ваша заявка на запись в ${clinic?.name} успешно отправлена. Мы свяжемся с вами в ближайшее время.`,\n      });\n      \n      form.reset();\n      onClose();\n    } catch (error: any) {\n      toast({\n        title: 'Ошибка',\n        description: error.message || 'Не удалось отправить заявку. Попробуйте еще раз.',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!clinic) return null;\n\n  const services = clinic.specializations || [\n    'Консультация стоматолога',\n    'Лечение кариеса',\n    'Профессиональная чистка',\n    'Отбеливание зубов',\n    'Имплантация',\n    'Ортодонтия',\n    'Удаление зубов'\n  ];\n\n  const timeSlots = [\n    '09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00', '18:00'\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Calendar className=\"h-5 w-5\" />\n            <span>Записаться на прием</span>\n          </DialogTitle>\n          <p className=\"text-sm text-gray-600\">{clinic.name}</p>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Personal Information */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label htmlFor=\"firstName\" className=\"flex items-center space-x-1\">\n                <User className=\"h-3 w-3\" />\n                <span>Имя</span>\n              </Label>\n              <Input\n                id=\"firstName\"\n                {...form.register('firstName')}\n                placeholder=\"Ваше имя\"\n                className=\"mt-1\"\n              />\n              {form.formState.errors.firstName && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.firstName.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"lastName\">Фамилия</Label>\n              <Input\n                id=\"lastName\"\n                {...form.register('lastName')}\n                placeholder=\"Ваша фамилия\"\n                className=\"mt-1\"\n              />\n              {form.formState.errors.lastName && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.lastName.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Contact Information */}\n          <div>\n            <Label htmlFor=\"phone\" className=\"flex items-center space-x-1\">\n              <Phone className=\"h-3 w-3\" />\n              <span>Телефон</span>\n            </Label>\n            <Input\n              id=\"phone\"\n              {...form.register('phone')}\n              placeholder=\"+373 XX XXX XXX\"\n              className=\"mt-1\"\n            />\n            {form.formState.errors.phone && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.phone.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\" className=\"flex items-center space-x-1\">\n              <Mail className=\"h-3 w-3\" />\n              <span>Email (необязательно)</span>\n            </Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              {...form.register('email')}\n              placeholder=\"your@email.com\"\n              className=\"mt-1\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n            )}\n          </div>\n\n          {/* Service Selection */}\n          <div>\n            <Label htmlFor=\"service\">Услуга</Label>\n            <select\n              id=\"service\"\n              {...form.register('service')}\n              className=\"mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">Выберите услугу</option>\n              {services.map((service) => (\n                <option key={service} value={service}>{service}</option>\n              ))}\n            </select>\n            {form.formState.errors.service && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.service.message}</p>\n            )}\n          </div>\n\n          {/* Date and Time */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label htmlFor=\"preferredDate\">Предпочтительная дата</Label>\n              <Input\n                id=\"preferredDate\"\n                type=\"date\"\n                {...form.register('preferredDate')}\n                min={new Date().toISOString().split('T')[0]}\n                className=\"mt-1\"\n              />\n              {form.formState.errors.preferredDate && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.preferredDate.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"preferredTime\" className=\"flex items-center space-x-1\">\n                <Clock className=\"h-3 w-3\" />\n                <span>Время</span>\n              </Label>\n              <select\n                id=\"preferredTime\"\n                {...form.register('preferredTime')}\n                className=\"mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">Выберите время</option>\n                {timeSlots.map((time) => (\n                  <option key={time} value={time}>{time}</option>\n                ))}\n              </select>\n              {form.formState.errors.preferredTime && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.preferredTime.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Additional Notes */}\n          <div>\n            <Label htmlFor=\"notes\">Дополнительные пожелания</Label>\n            <Textarea\n              id=\"notes\"\n              {...form.register('notes')}\n              placeholder=\"Расскажите о ваших пожеланиях или особенностях...\"\n              className=\"mt-1 resize-none\"\n              rows={3}\n            />\n          </div>\n\n          {/* Contact Info Display */}\n          {clinic.phone && (\n            <div className=\"bg-blue-50 p-3 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Для срочной записи:</strong> {clinic.phone}\n              </p>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n              disabled={isSubmitting}\n            >\n              Отменить\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n            >\n              {isSubmitting ? 'Отправка...' : 'Записаться'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9981},"client/src/components/BookingModal.tsx":{"content":"import { useState } from 'react';\nimport { useTranslation } from '../lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Clinic {\n  id: string;\n  name: string;\n  specializations: string[];\n}\n\ninterface BookingModalProps {\n  clinic: Clinic | null;\n  open: boolean;\n  onClose: () => void;\n}\n\ninterface FormData {\n  name: string;\n  phone: string;\n  email: string;\n  contactMethod: string;\n  service: string;\n  date: string;\n  time: string;\n  comment: string;\n  agreement: boolean;\n}\n\nexport function BookingModal({ clinic, open, onClose }: BookingModalProps) {\n  const { t, language } = useTranslation();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  \n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    phone: '',\n    email: '',\n    contactMethod: 'phone',\n    service: '',\n    date: '',\n    time: '',\n    comment: '',\n    agreement: false\n  });\n\n  if (!clinic) return null;\n\n  const updateField = (field: keyof FormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const formatPhoneNumber = (value: string) => {\n    const cleaned = value.replace(/\\\\D/g, '');\n    const match = cleaned.match(/^(373)?(\\\\d{0,2})(\\\\d{0,3})(\\\\d{0,3})$/);\n    if (match) {\n      return ['+373', match[2], match[3], match[4]].filter(Boolean).join(' ');\n    }\n    return value;\n  };\n\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const formatted = formatPhoneNumber(e.target.value);\n    updateField('phone', formatted);\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!formData.name.trim()) newErrors.name = 'Введите имя';\n    if (!formData.phone.trim()) newErrors.phone = 'Введите телефон';\n    if (!formData.email.trim()) newErrors.email = 'Введите email';\n    if (!formData.service) newErrors.service = 'Выберите услугу';\n    if (!formData.date) newErrors.date = 'Выберите дату';\n    if (!formData.time) newErrors.time = 'Выберите время';\n    if (!formData.agreement) newErrors.agreement = 'Необходимо согласие';\n\n    // Email validation\n    const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\n    if (formData.email && !emailRegex.test(formData.email)) {\n      newErrors.email = 'Неверный формат email';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n\n    setLoading(true);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    setLoading(false);\n    \n    toast({\n      title: \"Запись успешно отправлена!\",\n      description: `Мы свяжемся с вами в ближайшее время для подтверждения записи в ${clinic.name}.`,\n    });\n    \n    onClose();\n    \n    // Reset form\n    setFormData({\n      name: '',\n      phone: '',\n      email: '',\n      contactMethod: 'phone',\n      service: '',\n      date: '',\n      time: '',\n      comment: '',\n      agreement: false\n    });\n  };\n\n  const timeSlots = [\n    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',\n    '12:00', '12:30', '14:00', '14:30', '15:00', '15:30',\n    '16:00', '16:30', '17:00', '17:30', '18:00'\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"border-b border-gray-200 pb-4\">\n          <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n            Запись в {clinic.name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"name\">Имя *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => updateField('name', e.target.value)}\n                className={errors.name ? 'border-red-500' : ''}\n              />\n              {errors.name && <p className=\"text-red-500 text-sm mt-1\">{errors.name}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"phone\">Телефон *</Label>\n              <Input\n                id=\"phone\"\n                value={formData.phone}\n                onChange={handlePhoneChange}\n                placeholder=\"+373 XX XXX XXX\"\n                className={errors.phone ? 'border-red-500' : ''}\n              />\n              {errors.phone && <p className=\"text-red-500 text-sm mt-1\">{errors.phone}</p>}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email *</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => updateField('email', e.target.value)}\n              className={errors.email ? 'border-red-500' : ''}\n            />\n            {errors.email && <p className=\"text-red-500 text-sm mt-1\">{errors.email}</p>}\n          </div>\n\n          <div>\n            <Label htmlFor=\"contactMethod\">Предпочтительный способ связи</Label>\n            <Select value={formData.contactMethod} onValueChange={(value) => updateField('contactMethod', value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"phone\">Телефон</SelectItem>\n                <SelectItem value=\"email\">Email</SelectItem>\n                <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                <SelectItem value=\"telegram\">Telegram</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"service\">Услуга *</Label>\n            <Select value={formData.service} onValueChange={(value) => updateField('service', value)}>\n              <SelectTrigger className={errors.service ? 'border-red-500' : ''}>\n                <SelectValue placeholder=\"Выберите услугу\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"consultation\">Консультация</SelectItem>\n                <SelectItem value=\"hygiene\">Профессиональная гигиена</SelectItem>\n                <SelectItem value=\"implants\">Имплантация</SelectItem>\n                <SelectItem value=\"veneers\">Виниры</SelectItem>\n                <SelectItem value=\"endo\">Лечение каналов</SelectItem>\n                <SelectItem value=\"ortho\">Ортодонтия</SelectItem>\n              </SelectContent>\n            </Select>\n            {errors.service && <p className=\"text-red-500 text-sm mt-1\">{errors.service}</p>}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"date\">Предпочтительная дата *</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) => updateField('date', e.target.value)}\n                min={new Date().toISOString().split('T')[0]}\n                className={errors.date ? 'border-red-500' : ''}\n              />\n              {errors.date && <p className=\"text-red-500 text-sm mt-1\">{errors.date}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"time\">Время *</Label>\n              <Select value={formData.time} onValueChange={(value) => updateField('time', value)}>\n                <SelectTrigger className={errors.time ? 'border-red-500' : ''}>\n                  <SelectValue placeholder=\"Выберите время\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {timeSlots.map(time => (\n                    <SelectItem key={time} value={time}>{time}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.time && <p className=\"text-red-500 text-sm mt-1\">{errors.time}</p>}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"comment\">Комментарий</Label>\n            <Textarea\n              id=\"comment\"\n              value={formData.comment}\n              onChange={(e) => updateField('comment', e.target.value)}\n              placeholder=\"Дополнительная информация...\"\n              rows={3}\n            />\n          </div>\n\n          <div className=\"flex items-start space-x-2\">\n            <Checkbox\n              id=\"agreement\"\n              checked={formData.agreement}\n              onCheckedChange={(checked) => updateField('agreement', checked)}\n              className={errors.agreement ? 'border-red-500' : ''}\n            />\n            <label htmlFor=\"agreement\" className=\"text-sm text-gray-700 leading-tight\">\n              Я согласен на обработку персональных данных и получение информационных сообщений *\n            </label>\n          </div>\n          {errors.agreement && <p className=\"text-red-500 text-sm\">{errors.agreement}</p>}\n\n          <div className=\"flex justify-end space-x-4 pt-4 border-t border-gray-200\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Отмена\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={loading}\n              className=\"bg-blue-600 text-white hover:bg-blue-700\"\n            >\n              {loading ? 'Отправляем...' : 'Записаться'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10524},"client/src/components/ClinicCard.tsx":{"content":"import { ScoreBar } from './ScoreBar';\nimport { useTranslation, SPECIALIZATIONS } from '../lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Info, Flame } from 'lucide-react';\nimport { useState } from 'react';\nimport { getMinPrice, formatPrice, type Currency } from '@/lib/currency';\n\ninterface Service {\n  id: string;\n  name: string;\n  price: number;\n  currency: Currency;\n}\n\ninterface Clinic {\n  id: string;\n  slug: string;\n  name: string;\n  logoUrl?: string;\n  city: { nameRu: string; nameRo: string };\n  district?: { nameRu: string; nameRo: string } | null;\n  languages: string[];\n  specializations: string[];\n  tags: string[];\n  verified: boolean;\n  cnam: boolean;\n  availToday: boolean;\n  priceIndex: number;\n  trustIndex: number;\n  reviewsIndex: number;\n  accessIndex: number;\n  dScore: number;\n  recommended?: boolean;\n  promotionalLabels?: string[];\n  currency: Currency;\n  services?: Service[];\n}\n\ninterface ClinicCardProps {\n  clinic: Clinic;\n  onClinicClick: (slug: string) => void;\n  onBookClick: (clinic: Clinic) => void;\n  onPricesClick: (slug: string) => void;\n}\n\nexport function ClinicCard({ clinic, onClinicClick, onBookClick, onPricesClick }: ClinicCardProps) {\n  const { t, language } = useTranslation();\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Get minimum price with currency support\n  const minPriceInfo = clinic.services && clinic.services.length > 0\n    ? getMinPrice(clinic.services.map(s => ({ \n        price: s.price, \n        currency: s.currency || clinic.currency || 'MDL' \n      })))\n    : { \n        price: Math.round(clinic.priceIndex * 10), \n        currency: clinic.currency || 'MDL' as Currency \n      };\n\n  const promotionalLabelStyles: Record<string, string> = {\n    top: 'bg-yellow-500 text-white',\n    high_rating: 'bg-green-500 text-white',\n    premium: 'bg-purple-500 text-white',\n    verified_plus: 'bg-blue-500 text-white',\n    popular: 'bg-red-500 text-white',\n    new: 'bg-orange-500 text-white',\n    discount: 'bg-pink-500 text-white',\n    fast_service: 'bg-teal-500 text-white'\n  };\n\n  const promotionalLabelText: Record<string, string> = {\n    top: 'ТОП',\n    high_rating: 'Высокий рейтинг',\n    premium: 'Премиум',\n    verified_plus: 'Верифицирован+',\n    popular: 'Популярное',\n    new: 'Новое',\n    discount: 'Скидки',\n    fast_service: 'Быстро'\n  };\n\n  const getDScoreColor = (score: number) => {\n    if (score >= 75) return 'bg-green-500';\n    if (score >= 50) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const handleCardClick = (e: React.MouseEvent) => {\n    // Don't navigate if clicking on buttons\n    if ((e.target as HTMLElement).closest('button')) {\n      return;\n    }\n    onClinicClick(clinic.slug);\n  };\n\n  const handleBookClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onBookClick(clinic);\n  };\n\n  const handlePricesClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onPricesClick(clinic.slug);\n  };\n\n  // Приоритет: загруженное фото клиники -> сгенерированное изображение -> резервное\n  const clinicImage = clinic.logoUrl || `https://images.unsplash.com/photo-${clinic.id.slice(0, 10)}?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300`;\n  const fallbackImage = 'https://images.unsplash.com/photo-1629909613654-28e377c37b09?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300';\n\n  // Определяем стиль рамки для выделения\n  const getPromotionalBorder = () => {\n    if (!clinic.promotionalLabels || clinic.promotionalLabels.length === 0) return '';\n    \n    const label = clinic.promotionalLabels[0];\n    const borderStyles: Record<string, string> = {\n      top: 'border-4 border-yellow-400 shadow-lg shadow-yellow-400/50',\n      premium: 'border-4 border-purple-400 shadow-lg shadow-purple-400/50',\n      high_rating: 'border-4 border-green-400 shadow-lg shadow-green-400/50',\n      verified_plus: 'border-4 border-blue-400 shadow-lg shadow-blue-400/50',\n      popular: 'border-4 border-red-400 shadow-lg shadow-red-400/50',\n      new: 'border-4 border-orange-400 shadow-lg shadow-orange-400/50',\n      discount: 'border-4 border-pink-400 shadow-lg shadow-pink-400/50',\n      fast_service: 'border-4 border-teal-400 shadow-lg shadow-teal-400/50'\n    };\n    \n    return borderStyles[label] || '';\n  };\n\n  // Получаем иконку для лейбла\n  const getPromotionalIcon = () => {\n    if (!clinic.promotionalLabels || clinic.promotionalLabels.length === 0) return null;\n    \n    const label = clinic.promotionalLabels[0];\n    const icons: Record<string, string> = {\n      top: '👑',\n      premium: '💎', \n      high_rating: '⭐',\n      verified_plus: '✅',\n      popular: '🔥',\n      new: '🆕',\n      discount: '💰',\n      fast_service: '⚡'\n    };\n    \n    return icons[label] || '✨';\n  };\n\n  return (\n    <div \n      className={`relative rounded-2xl overflow-hidden cursor-pointer aspect-[3/4] md:aspect-[4/3] group ${getPromotionalBorder()}`}\n      onClick={handleCardClick}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {/* Background Image */}\n      <div className=\"absolute inset-0\">\n        <img \n          src={clinicImage}\n          alt={clinic.name}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            // Если не загрузилось загруженное фото, пробуем сгенерированное\n            if (clinic.logoUrl && (e.target as HTMLImageElement).src === clinic.logoUrl) {\n              (e.target as HTMLImageElement).src = `https://images.unsplash.com/photo-${clinic.id.slice(0, 10)}?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300`;\n            } else {\n              // Иначе используем резервное изображение\n              (e.target as HTMLImageElement).src = fallbackImage;\n            }\n          }}\n        />\n        {/* Base overlay - slightly darker for better text readability */}\n        <div className=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n      </div>\n\n\n\n\n      {/* Always visible content */}\n      <div className=\"absolute inset-0 flex flex-col justify-between text-white p-4\">\n        {/* Top section - always visible */}\n        <div className=\"flex justify-between items-start\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <h3 className=\"text-base md:text-lg font-bold drop-shadow-lg leading-tight\">{clinic.name}</h3>\n              {/* Recommended badge next to name */}\n              {clinic.recommended && (\n                <div className=\"bg-red-500 text-white px-2 py-0.5 rounded-full text-xs font-bold shadow-md flex-shrink-0\">\n                  ⭐ ТОП\n                </div>\n              )}\n              {/* Promotional icon next to name */}\n              {getPromotionalIcon() && (\n                <div className=\"bg-white bg-opacity-90 backdrop-blur-sm rounded-full w-6 h-6 flex items-center justify-center text-sm shadow-md flex-shrink-0\">\n                  {getPromotionalIcon()}\n                </div>\n              )}\n            </div>\n            <p className=\"text-xs md:text-sm drop-shadow-md opacity-90 mb-2\">\n              {language === 'ru' ? clinic.city.nameRu : clinic.city.nameRo}\n              {clinic.district && `, ${language === 'ru' ? clinic.district.nameRu : clinic.district.nameRo}`}\n            </p>\n            \n            {/* Specializations and badges */}\n            <div className=\"flex flex-wrap gap-1 mb-2\">\n              {clinic.specializations.slice(0, 1).map(spec => (\n                <span key={spec} className=\"px-1.5 md:px-2 py-0.5 bg-white bg-opacity-20 text-white text-xs rounded-full backdrop-blur-sm\">\n                  {SPECIALIZATIONS[spec as keyof typeof SPECIALIZATIONS]?.[language] || spec}\n                </span>\n              ))}\n              {clinic.verified && (\n                <span className=\"px-1.5 md:px-2 py-0.5 bg-green-500 bg-opacity-80 text-white text-xs rounded-full\">\n                  {t('verifiedBadge')}\n                </span>\n              )}\n              {clinic.cnam && (\n                <span className=\"px-1.5 md:px-2 py-0.5 bg-blue-500 bg-opacity-80 text-white text-xs rounded-full\">\n                  {t('cnamBadge')}\n                </span>\n              )}\n            </div>\n            \n            <div className=\"text-xs md:text-sm mb-1\">\n              {t('price')}: от {minPriceInfo ? formatPrice(minPriceInfo.price, minPriceInfo.currency) : formatPrice(Math.round(clinic.priceIndex * 10), clinic.currency || 'MDL')}\n            </div>\n          </div>\n          \n          {/* D-Score - always visible */}\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"flex items-center space-x-1 cursor-pointer\">\n                  <div className={`w-10 h-10 md:w-12 md:h-12 ${getDScoreColor(clinic.dScore)} rounded-full flex items-center justify-center text-white font-bold text-xs md:text-sm shadow-lg`}>\n                    {clinic.dScore}\n                  </div>\n                  <Info className=\"w-4 h-4 md:w-5 md:h-5 text-white opacity-80 hover:opacity-100\" />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <div className=\"text-sm\">\n                  <p className=\"font-semibold\">D-Score - комплексная оценка</p>\n                  <p>Доверие: 30% • Отзывы: 25%</p>\n                  <p>Цена: 25% • Доступность: 20%</p>\n                </div>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n\n        {/* Bottom section - Action Buttons - always visible */}\n        <div className={`flex space-x-2 transition-opacity duration-300 ${isHovered ? 'opacity-100' : 'opacity-90'}`}>\n          <Button \n            onClick={handleBookClick}\n            className=\"flex-1 bg-blue-600 text-white hover:bg-blue-700 shadow-lg text-xs md:text-sm\"\n            size=\"sm\"\n          >\n            {t('book')}\n          </Button>\n          <Button \n            onClick={handlePricesClick}\n            variant=\"outline\"\n            className=\"flex-1 border-2 border-white bg-white text-gray-900 hover:bg-gray-100 text-xs md:text-sm\"\n            size=\"sm\"\n          >\n            {t('prices')}\n          </Button>\n        </div>\n      </div>\n\n      {/* Hover overlay - Progress bars only */}\n      <div className={`absolute inset-0 flex items-center justify-center transition-all duration-300 pointer-events-none ${\n        isHovered ? 'bg-black bg-opacity-40' : 'bg-transparent'\n      }`}>\n        <div className={`text-white transform transition-all duration-300 ${\n          isHovered ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'\n        }`}>\n          {/* Progress bars - only visible on hover */}\n          <div className=\"space-y-1.5 md:space-y-2 bg-black bg-opacity-60 p-2 md:p-4 rounded-lg backdrop-blur-sm mx-2\">\n            <div className=\"grid grid-cols-2 gap-2 md:gap-3 text-xs\">\n              <div>\n                <div className=\"flex justify-between mb-0.5 md:mb-1\">\n                  <span className=\"text-xs\">{t('price')}</span>\n                  <span className=\"text-xs\">{100 - clinic.priceIndex}</span>\n                </div>\n                <div className=\"w-full bg-white bg-opacity-20 rounded-full h-1 md:h-1.5\">\n                  <div \n                    className={`h-1 md:h-1.5 rounded-full transition-all duration-700 delay-100 ${getDScoreColor(100 - clinic.priceIndex)}`}\n                    style={{ width: isHovered ? `${100 - clinic.priceIndex}%` : '0%' }}\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <div className=\"flex justify-between mb-0.5 md:mb-1\">\n                  <span className=\"text-xs\">{t('trust')}</span>\n                  <span className=\"text-xs\">{clinic.trustIndex}</span>\n                </div>\n                <div className=\"w-full bg-white bg-opacity-20 rounded-full h-1 md:h-1.5\">\n                  <div \n                    className={`h-1 md:h-1.5 rounded-full transition-all duration-700 delay-200 ${getDScoreColor(clinic.trustIndex)}`}\n                    style={{ width: isHovered ? `${clinic.trustIndex}%` : '0%' }}\n                  />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-2 md:gap-3 text-xs\">\n              <div>\n                <div className=\"flex justify-between mb-0.5 md:mb-1\">\n                  <span className=\"text-xs\">{t('reviews')}</span>\n                  <span className=\"text-xs\">{clinic.reviewsIndex}</span>\n                </div>\n                <div className=\"w-full bg-white bg-opacity-20 rounded-full h-1 md:h-1.5\">\n                  <div \n                    className={`h-1 md:h-1.5 rounded-full transition-all duration-700 delay-300 ${getDScoreColor(clinic.reviewsIndex)}`}\n                    style={{ width: isHovered ? `${clinic.reviewsIndex}%` : '0%' }}\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <div className=\"flex justify-between mb-0.5 md:mb-1\">\n                  <span className=\"text-xs\">{t('access')}</span>\n                  <span className=\"text-xs\">{clinic.accessIndex}</span>\n                </div>\n                <div className=\"w-full bg-white bg-opacity-20 rounded-full h-1 md:h-1.5\">\n                  <div \n                    className={`h-1 md:h-1.5 rounded-full transition-all duration-700 delay-400 ${getDScoreColor(clinic.accessIndex)}`}\n                    style={{ width: isHovered ? `${clinic.accessIndex}%` : '0%' }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14172},"client/src/components/ClinicDetail.tsx":{"content":"import { useState } from 'react';\nimport { X, Phone, Globe } from 'lucide-react';\nimport { useTranslation, SPECIALIZATIONS } from '../lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { ScoreBar } from './ScoreBar';\nimport { BookingForm } from './BookingForm';\nimport { CurrencyConverter } from './CurrencyConverter';\nimport { type Currency } from '@/lib/currency';\n\ninterface Service {\n  id: string;\n  name: string;\n  price: number;\n  currency: Currency;\n}\n\ninterface Clinic {\n  id: string;\n  slug: string;\n  name: string;\n  logoUrl?: string;\n  city: { nameRu: string; nameRo: string };\n  district?: { nameRu: string; nameRo: string } | null;\n  address?: string;\n  phone?: string;\n  website?: string;\n  languages: string[];\n  specializations: string[];\n  tags: string[];\n  verified: boolean;\n  cnam: boolean;\n  priceIndex: number;\n  trustIndex: number;\n  reviewsIndex: number;\n  accessIndex: number;\n  dScore: number;\n  currency: Currency;\n  services?: Service[];\n}\n\ninterface ClinicDetailProps {\n  clinic: Clinic | null;\n  open: boolean;\n  onClose: () => void;\n  onBookClick: (clinic: Clinic) => void;\n}\n\nexport function ClinicDetail({ clinic, open, onClose, onBookClick }: ClinicDetailProps) {\n  const { t, language } = useTranslation();\n  const [showBookingForm, setShowBookingForm] = useState(false);\n\n  if (!clinic) return null;\n\n  const getDScoreColor = (score: number) => {\n    if (score >= 75) return 'bg-green-500';\n    if (score >= 50) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const handleBookClick = () => {\n    setShowBookingForm(true);\n    // Don't close the main modal, just open booking form overlay\n  };\n\n  const handleCallClick = () => {\n    if (clinic.phone) {\n      window.open(`tel:${clinic.phone}`, '_self');\n    }\n  };\n\n  const handleWebsiteClick = () => {\n    if (clinic.website) {\n      window.open(clinic.website, '_blank');\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"border-b border-gray-200 pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n                {clinic.name}\n              </DialogTitle>\n              <div className=\"flex items-center space-x-2\">\n                {clinic.verified && (\n                  <span className=\"px-3 py-1 bg-green-100 text-green-800 text-sm font-medium rounded-full\">\n                    {t('verifiedBadge')}\n                  </span>\n                )}\n                {clinic.cnam && (\n                  <span className=\"px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full\">\n                    {t('cnamBadge')}\n                  </span>\n                )}\n              </div>\n              <div className={`w-12 h-12 ${getDScoreColor(clinic.dScore)} rounded-full flex items-center justify-center text-white font-bold text-lg`}>\n                {clinic.dScore}\n              </div>\n            </div>\n          </div>\n          <p className=\"text-gray-600 mt-2\">\n            {clinic.address && `${clinic.address}, `}\n            {language === 'ru' ? clinic.city.nameRu : clinic.city.nameRo}\n            {clinic.district && `, ${language === 'ru' ? clinic.district.nameRu : clinic.district.nameRo}`}\n          </p>\n        </DialogHeader>\n\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Left Content */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              {/* Action Buttons */}\n              <div className=\"flex space-x-4\">\n                <Button \n                  onClick={handleBookClick}\n                  className=\"bg-blue-600 text-white hover:bg-blue-700\"\n                >\n                  {t('book')}\n                </Button>\n                {clinic.phone && (\n                  <Button \n                    onClick={handleCallClick}\n                    variant=\"outline\"\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <Phone className=\"h-4 w-4\" />\n                    <span>{t('callClinic')}</span>\n                  </Button>\n                )}\n                {clinic.website && (\n                  <Button \n                    onClick={handleWebsiteClick}\n                    variant=\"outline\"\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <Globe className=\"h-4 w-4\" />\n                    <span>{t('website')}</span>\n                  </Button>\n                )}\n              </div>\n\n              {/* Services and Prices */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  {language === 'ru' ? 'Услуги и цены' : 'Servicii și prețuri'}\n                </h3>\n                {clinic.services && clinic.services.length > 0 ? (\n                  <div className=\"bg-white rounded-lg border\">\n                    <CurrencyConverter \n                      services={clinic.services.map(service => ({\n                        name: service.name,\n                        price: service.price,\n                        currency: service.currency || clinic.currency || 'MDL'\n                      }))}\n                      className=\"p-4\"\n                    />\n                  </div>\n                ) : (\n                  <div className=\"bg-gray-50 rounded-lg p-8 text-center\">\n                    <p className=\"text-gray-500\">\n                      {language === 'ru' \n                        ? 'Услуги и цены уточняются. Свяжитесь с клиникой для получения актуальной информации.' \n                        : 'Serviciile și prețurile sunt în curs de actualizare. Contactați clinica pentru informații actuale.'}\n                    </p>\n                  </div>\n                )}\n                <p className=\"text-xs text-gray-500 mt-2\">\n                  {language === 'ru' \n                    ? 'Цены предоставлены клиникой. Последнее обновление: ' \n                    : 'Prețurile sunt furnizate de clinică. Ultima actualizare: '\n                  }{new Date().toLocaleDateString()}\n                </p>\n              </div>\n\n              {/* Score Explanation */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">{t('scoreExplanation')}</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <span className=\"font-medium text-gray-900\">{t('price')}</span>\n                      <p className=\"text-sm text-gray-600\">{t('priceDescription')}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-24\">\n                        <ScoreBar value={100 - clinic.priceIndex} label=\"\" />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">{100 - clinic.priceIndex}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <span className=\"font-medium text-gray-900\">{t('trust')}</span>\n                      <p className=\"text-sm text-gray-600\">{t('trustDescription')}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-24\">\n                        <ScoreBar value={clinic.trustIndex} label=\"\" />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">{clinic.trustIndex}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <span className=\"font-medium text-gray-900\">{t('reviews')}</span>\n                      <p className=\"text-sm text-gray-600\">{t('reviewsDescription')}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-24\">\n                        <ScoreBar value={clinic.reviewsIndex} label=\"\" />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">{clinic.reviewsIndex}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <span className=\"font-medium text-gray-900\">{t('access')}</span>\n                      <p className=\"text-sm text-gray-600\">{t('accessDescription')}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-24\">\n                        <ScoreBar value={clinic.accessIndex} label=\"\" />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">{clinic.accessIndex}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Before/After Cases */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">{t('beforeAfter')}</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1606811841689-23dfddce3e95?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\" \n                      alt={language === 'ru' ? 'До лечения' : 'Înainte de tratament'} \n                      className=\"rounded-lg object-cover w-full h-24\" \n                    />\n                    <img \n                      src=\"https://images.unsplash.com/photo-1598300042247-d088f8ab3a91?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\" \n                      alt={language === 'ru' ? 'После лечения' : 'După tratament'} \n                      className=\"rounded-lg object-cover w-full h-24\" \n                    />\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    {language === 'ru' ? 'Отбеливание зубов' : 'Albirea dinților'}\n                  </p>\n                </div>\n                \n                <div className=\"space-y-4 mt-4\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1588776814546-1ffcf47267a5?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\" \n                      alt={language === 'ru' ? 'До имплантации' : 'Înainte de implant'} \n                      className=\"rounded-lg object-cover w-full h-24\" \n                    />\n                    <img \n                      src=\"https://images.unsplash.com/photo-1629909613654-28e377c37b09?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\" \n                      alt={language === 'ru' ? 'После имплантации' : 'După implant'} \n                      className=\"rounded-lg object-cover w-full h-24\" \n                    />\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    {language === 'ru' ? 'Имплантация зуба' : 'Implant dentar'}\n                  </p>\n                </div>\n              </div>\n\n              {/* Data Sources */}\n              <div className=\"bg-blue-50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">{t('dataSources')}</h4>\n                <ul className=\"text-sm text-blue-800 space-y-1\">\n                  <li>• {t('pricesProvidedBy')}</li>\n                  <li>• {t('reviewsFromPublic')}</li>\n                  <li>• {t('lastUpdated')}: 15.01.2024</li>\n                </ul>\n              </div>\n\n              {/* Disclaimer */}\n              <div className=\"bg-yellow-50 rounded-lg p-4\">\n                <p className=\"text-sm text-yellow-800\">\n                  {t('disclaimer')}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n      \n      {/* Booking Form Overlay */}\n      <BookingForm \n        clinic={clinic}\n        open={showBookingForm}\n        onClose={() => setShowBookingForm(false)}\n      />\n    </Dialog>\n  );\n}\n","size_bytes":12949},"client/src/components/ClinicGrid.tsx":{"content":"import { ClinicCard } from './ClinicCard';\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';\nimport { useTranslation } from '../lib/i18n';\n\ninterface Service {\n  id: string;\n  name: string;\n  price: number;\n}\n\ninterface Clinic {\n  id: string;\n  slug: string;\n  name: string;\n  logoUrl?: string;\n  city: { nameRu: string; nameRo: string };\n  district?: { nameRu: string; nameRo: string } | null;\n  languages: string[];\n  specializations: string[];\n  tags: string[];\n  verified: boolean;\n  cnam: boolean;\n  availToday: boolean;\n  priceIndex: number;\n  trustIndex: number;\n  reviewsIndex: number;\n  accessIndex: number;\n  dScore: number;\n  recommended?: boolean;\n  promotionalLabels?: string[];\n  services?: Service[];\n}\n\ninterface ClinicGridProps {\n  clinics: Clinic[];\n  total: number;\n  page: number;\n  limit: number;\n  onPageChange: (page: number) => void;\n  onClinicClick: (slug: string) => void;\n  onBookClick: (clinic: Clinic) => void;\n}\n\nexport function ClinicGrid({ \n  clinics, \n  total, \n  page, \n  limit, \n  onPageChange, \n  onClinicClick, \n  onBookClick\n}: ClinicGridProps) {\n  const { t } = useTranslation();\n  const totalPages = Math.ceil(total / limit);\n  const startResult = (page - 1) * limit + 1;\n  const endResult = Math.min(page * limit, total);\n\n  return (\n    <div className=\"space-y-8\">\n\n      {/* Grid */}\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 md:gap-6\">\n        {clinics.map(clinic => (\n          <ClinicCard\n            key={clinic.id}\n            clinic={clinic}\n            onClinicClick={onClinicClick}\n            onBookClick={onBookClick}\n            onPricesClick={(slug) => onClinicClick(slug)}\n          />\n        ))}\n      </div>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 rounded-lg\">\n          <div className=\"flex flex-1 justify-between sm:hidden\">\n            <button\n              onClick={() => onPageChange(Math.max(1, page - 1))}\n              disabled={page === 1}\n              className=\"relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50\"\n            >\n              {t('previous')}\n            </button>\n            <button\n              onClick={() => onPageChange(Math.min(totalPages, page + 1))}\n              disabled={page === totalPages}\n              className=\"relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50\"\n            >\n              {t('next')}\n            </button>\n          </div>\n          <div className=\"hidden sm:flex sm:flex-1 sm:items-center sm:justify-between\">\n            <div>\n            </div>\n            <Pagination>\n              <PaginationContent>\n                <PaginationItem>\n                  <PaginationPrevious \n                    onClick={() => onPageChange(Math.max(1, page - 1))}\n                    className={page === 1 ? 'pointer-events-none opacity-50' : 'cursor-pointer'}\n                  />\n                </PaginationItem>\n                \n                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                  let pageNum;\n                  if (totalPages <= 5) {\n                    pageNum = i + 1;\n                  } else if (page <= 3) {\n                    pageNum = i + 1;\n                  } else if (page >= totalPages - 2) {\n                    pageNum = totalPages - 4 + i;\n                  } else {\n                    pageNum = page - 2 + i;\n                  }\n                  \n                  return (\n                    <PaginationItem key={pageNum}>\n                      <PaginationLink\n                        onClick={() => onPageChange(pageNum)}\n                        isActive={pageNum === page}\n                        className=\"cursor-pointer\"\n                      >\n                        {pageNum}\n                      </PaginationLink>\n                    </PaginationItem>\n                  );\n                })}\n                \n                <PaginationItem>\n                  <PaginationNext \n                    onClick={() => onPageChange(Math.min(totalPages, page + 1))}\n                    className={page === totalPages ? 'pointer-events-none opacity-50' : 'cursor-pointer'}\n                  />\n                </PaginationItem>\n              </PaginationContent>\n            </Pagination>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4683},"client/src/components/CurrencyConverter.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { convertPrice, formatPrice, type Currency, CURRENCY_NAMES } from '@/lib/currency';\n\ninterface CurrencyConverterProps {\n  services: Array<{ name: string; price: number; currency: Currency }>;\n  className?: string;\n  onCurrencyChange?: (currency: Currency) => void;\n}\n\nexport function CurrencyConverter({ services, className = '', onCurrencyChange }: CurrencyConverterProps) {\n  const [selectedCurrency, setSelectedCurrency] = useState<Currency>('MDL');\n\n  // Load saved currency preference\n  useEffect(() => {\n    const savedCurrency = localStorage.getItem('preferred_currency') as Currency;\n    if (savedCurrency && ['MDL', 'EUR', 'USD'].includes(savedCurrency)) {\n      setSelectedCurrency(savedCurrency);\n    }\n  }, []);\n\n  const handleCurrencyChange = (currency: Currency) => {\n    setSelectedCurrency(currency);\n    localStorage.setItem('preferred_currency', currency);\n    onCurrencyChange?.(currency);\n  };\n\n  // Convert services to selected currency\n  const convertedServices = services.map(service => ({\n    ...service,\n    convertedPrice: convertPrice(service.price, service.currency, selectedCurrency),\n    displayPrice: formatPrice(\n      convertPrice(service.price, service.currency, selectedCurrency), \n      selectedCurrency\n    )\n  }));\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Currency Selector */}\n      <div className=\"flex items-center space-x-3\">\n        <span className=\"text-sm font-medium text-gray-700\">Валюта:</span>\n        <Select\n          value={selectedCurrency}\n          onValueChange={(value: Currency) => handleCurrencyChange(value)}\n        >\n          <SelectTrigger className=\"w-32\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"MDL\">MDL (лей)</SelectItem>\n            <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n            <SelectItem value=\"USD\">USD ($)</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Services List */}\n      <div className=\"space-y-3\">\n        {convertedServices.map((service, index) => (\n          <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n            <div className=\"font-medium text-gray-900\">\n              {service.name}\n            </div>\n            <div className=\"font-semibold text-blue-600\">\n              {service.displayPrice}\n              {service.currency !== selectedCurrency && (\n                <span className=\"text-xs text-gray-500 ml-2\">\n                  (от {formatPrice(service.price, service.currency)})\n                </span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {selectedCurrency !== 'MDL' && (\n        <p className=\"text-xs text-gray-500\">\n          * Курсы валют могут отличаться от текущих рыночных. Уточняйте актуальные цены в клинике.\n        </p>\n      )}\n    </div>\n  );\n}","size_bytes":3135},"client/src/components/Filters.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Filter, X } from 'lucide-react';\nimport { useTranslation, SPECIALIZATIONS, LANGUAGES } from '../lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Slider } from '@/components/ui/slider';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';\nimport { useIsMobile } from '@/hooks/use-mobile';\n\ninterface City {\n  id: string;\n  nameRu: string;\n  nameRo: string;\n}\n\ninterface District {\n  id: string;\n  nameRu: string;\n  nameRo: string;\n}\n\nexport interface FilterValues {\n  city?: string;\n  districts: string[];\n  specializations: string[];\n  languages: string[];\n  verified: boolean;\n  urgentToday: boolean;\n  priceRange: [number, number];\n  sort: 'dscore' | 'price' | 'trust' | 'reviews';\n}\n\ninterface FiltersProps {\n  cities: City[];\n  districts: District[];\n  filters: FilterValues;\n  onFiltersChange: (filters: FilterValues) => void;\n  onApply: () => void;\n  onReset: () => void;\n}\n\nexport function Filters({ cities, districts, filters, onFiltersChange, onApply, onReset }: FiltersProps) {\n  const { t, language } = useTranslation();\n  const isMobile = useIsMobile();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const updateFilter = (key: keyof FilterValues, value: any) => {\n    onFiltersChange({ ...filters, [key]: value });\n  };\n\n  const toggleArrayValue = (key: 'districts' | 'specializations' | 'languages', value: string) => {\n    const current = filters[key];\n    const updated = current.includes(value) \n      ? current.filter(v => v !== value)\n      : [...current, value];\n    updateFilter(key, updated);\n  };\n\n  const FiltersContent = () => (\n    <div className=\"space-y-6\">\n      {/* City Filter */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">{t('city')}</label>\n        <Select value={filters.city || 'all'} onValueChange={(value) => updateFilter('city', value === 'all' ? undefined : value)}>\n          <SelectTrigger>\n            <SelectValue placeholder={t('allCities')} />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">{t('allCities')}</SelectItem>\n            {cities.map(city => (\n              <SelectItem key={city.id} value={city.id}>\n                {language === 'ru' ? city.nameRu : city.nameRo}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* District Filter */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">{t('district')}</label>\n        <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n          {districts.map(district => (\n            <div key={district.id} className=\"flex items-center space-x-2\">\n              <Checkbox\n                id={district.id}\n                checked={filters.districts.includes(district.id)}\n                onCheckedChange={() => toggleArrayValue('districts', district.id)}\n              />\n              <label htmlFor={district.id} className=\"text-sm\">\n                {language === 'ru' ? district.nameRu : district.nameRo}\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Specialization Filter */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">{t('specialization')}</label>\n        <div className=\"space-y-2\">\n          {Object.entries(SPECIALIZATIONS).map(([key, value]) => (\n            <div key={key} className=\"flex items-center space-x-2\">\n              <Checkbox\n                id={key}\n                checked={filters.specializations.includes(key)}\n                onCheckedChange={() => toggleArrayValue('specializations', key)}\n              />\n              <label htmlFor={key} className=\"text-sm\">\n                {value[language]}\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Languages Filter */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">{t('languages')}</label>\n        <div className=\"space-y-2\">\n          {Object.entries(LANGUAGES).map(([key, value]) => (\n            <div key={key} className=\"flex items-center space-x-2\">\n              <Checkbox\n                id={`lang-${key}`}\n                checked={filters.languages.includes(key)}\n                onCheckedChange={() => toggleArrayValue('languages', key)}\n              />\n              <label htmlFor={`lang-${key}`} className=\"text-sm\">\n                {value[language]}\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Verified Toggle */}\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox\n          id=\"verified\"\n          checked={filters.verified}\n          onCheckedChange={(checked) => updateFilter('verified', checked)}\n        />\n        <label htmlFor=\"verified\" className=\"text-sm\">{t('verified')}</label>\n      </div>\n\n      {/* Urgent Today Toggle */}\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox\n          id=\"urgent\"\n          checked={filters.urgentToday}\n          onCheckedChange={(checked) => updateFilter('urgentToday', checked)}\n        />\n        <label htmlFor=\"urgent\" className=\"text-sm\">{t('urgentToday')}</label>\n      </div>\n\n      {/* Price Range */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          {t('priceRange')}: {filters.priceRange[0]} - {filters.priceRange[1]}\n        </label>\n        <Slider\n          value={filters.priceRange}\n          onValueChange={(value) => updateFilter('priceRange', value)}\n          max={100}\n          min={0}\n          step={5}\n          className=\"w-full\"\n        />\n      </div>\n\n      {/* Sort */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">{t('sortBy')}</label>\n        <Select value={filters.sort} onValueChange={(value) => updateFilter('sort', value)}>\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"dscore\">{t('sort.dscore')}</SelectItem>\n            <SelectItem value=\"price\">{t('sort.price')}</SelectItem>\n            <SelectItem value=\"trust\">{t('sort.trust')}</SelectItem>\n            <SelectItem value=\"reviews\">{t('sort.reviews')}</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex space-x-2\">\n        <Button onClick={onApply} className=\"flex-1\">\n          {t('apply')}\n        </Button>\n        <Button onClick={onReset} variant=\"outline\" className=\"flex-1\">\n          {t('reset')}\n        </Button>\n      </div>\n    </div>\n  );\n\n  if (isMobile) {\n    return (\n      <Sheet open={isOpen} onOpenChange={setIsOpen}>\n        <SheetTrigger asChild>\n          <Button variant=\"outline\" size=\"sm\">\n            <Filter className=\"h-4 w-4 mr-2\" />\n            {t('filters')}\n          </Button>\n        </SheetTrigger>\n        <SheetContent side=\"bottom\" className=\"h-[80vh] overflow-y-auto\">\n          <SheetHeader>\n            <SheetTitle>{t('filters')}</SheetTitle>\n          </SheetHeader>\n          <div className=\"mt-6\">\n            <FiltersContent />\n          </div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">{t('filters')}</h2>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4\">\n        <FiltersContent />\n      </div>\n    </div>\n  );\n}\n","size_bytes":7835},"client/src/components/FiltersSidebar.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Filter, X, Search } from 'lucide-react';\nimport { useTranslation, SPECIALIZATIONS, LANGUAGES } from '../lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Slider } from '@/components/ui/slider';\nimport { useDebounce } from '../hooks/use-debounce';\n\ninterface City {\n  id: string;\n  nameRu: string;\n  nameRo: string;\n}\n\ninterface District {\n  id: string;\n  nameRu: string;\n  nameRo: string;\n}\n\nexport interface FilterValues {\n  city?: string;\n  districts: string[];\n  specializations: string[];\n  languages: string[];\n  verified: boolean;\n  urgentToday: boolean;\n  priceRange: [number, number];\n  sort: 'dscore' | 'price' | 'trust' | 'reviews';\n}\n\ninterface FiltersSidebarProps {\n  cities: City[];\n  districts: District[];\n  filters: FilterValues;\n  onFiltersChange: (filters: FilterValues) => void;\n  onApply: () => void;\n  onReset: () => void;\n  onSearch: (query: string) => void;\n}\n\nexport function FiltersSidebar({ \n  cities, \n  districts, \n  filters, \n  onFiltersChange, \n  onApply, \n  onReset,\n  onSearch \n}: FiltersSidebarProps) {\n  const { t, language } = useTranslation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const debouncedQuery = useDebounce(searchQuery, 300);\n\n  useEffect(() => {\n    onSearch(debouncedQuery);\n  }, [debouncedQuery, onSearch]);\n\n  const updateFilter = (key: keyof FilterValues, value: any) => {\n    onFiltersChange({ ...filters, [key]: value });\n  };\n\n  const toggleArrayValue = (key: 'districts' | 'specializations' | 'languages', value: string) => {\n    const current = filters[key];\n    const updated = current.includes(value) \n      ? current.filter(v => v !== value)\n      : [...current, value];\n    updateFilter(key, updated);\n  };\n\n  return (\n    <div className=\"h-screen sticky top-0 bg-white border-r border-gray-200 overflow-y-auto\">\n      <div className=\"p-6 space-y-6\">\n        {/* Search */}\n        <div>\n          <div className=\"relative\">\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <Search className=\"h-5 w-5 text-gray-400\" />\n            </div>\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder={t('searchPlaceholder')}\n              className=\"block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white text-sm\"\n            />\n          </div>\n        </div>\n\n        {/* City Filter */}\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('city')}</label>\n          <Select value={filters.city || 'all'} onValueChange={(value) => updateFilter('city', value === 'all' ? undefined : value)}>\n            <SelectTrigger>\n              <SelectValue placeholder={t('allCities')} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">{t('allCities')}</SelectItem>\n              {cities.map(city => (\n                <SelectItem key={city.id} value={city.id}>\n                  {language === 'ru' ? city.nameRu : city.nameRo}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* District Filter */}\n        {filters.city && districts.length > 0 && (\n          <div>\n            <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('district')}</label>\n            <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n              {districts.map(district => (\n                <div key={district.id} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={district.id}\n                    checked={filters.districts.includes(district.id)}\n                    onCheckedChange={() => toggleArrayValue('districts', district.id)}\n                  />\n                  <label htmlFor={district.id} className=\"text-sm text-gray-700\">\n                    {language === 'ru' ? district.nameRu : district.nameRo}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Specialization Filter */}\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('specialization')}</label>\n          <div className=\"space-y-2\">\n            {Object.entries(SPECIALIZATIONS).map(([key, value]) => (\n              <div key={key} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={key}\n                  checked={filters.specializations.includes(key)}\n                  onCheckedChange={() => toggleArrayValue('specializations', key)}\n                />\n                <label htmlFor={key} className=\"text-sm text-gray-700\">\n                  {value[language]}\n                </label>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Price Range */}\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-900 mb-3\">\n            {t('priceLevel')}: {filters.priceRange[0]} - {filters.priceRange[1]}\n          </label>\n          <Slider\n            value={filters.priceRange}\n            onValueChange={(value) => updateFilter('priceRange', value)}\n            max={100}\n            min={0}\n            step={5}\n            className=\"w-full\"\n          />\n        </div>\n\n        {/* Status */}\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('receptionStatus')}</label>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"verified\"\n                checked={filters.verified}\n                onCheckedChange={(checked) => updateFilter('verified', checked)}\n              />\n              <label htmlFor=\"verified\" className=\"text-sm text-gray-700\">{t('verified')}</label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"urgent\"\n                checked={filters.urgentToday}\n                onCheckedChange={(checked) => updateFilter('urgentToday', checked)}\n              />\n              <label htmlFor=\"urgent\" className=\"text-sm text-gray-700\">{t('urgentToday')}</label>\n            </div>\n          </div>\n        </div>\n\n        {/* D-Score Range */}\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-900 mb-3\">D-Score диапазон</label>\n          <Slider\n            value={[0, 100]}\n            max={100}\n            min={0}\n            step={5}\n            className=\"w-full\"\n          />\n        </div>\n\n        {/* Sort */}\n        <div>\n          <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('sorting')}</label>\n          <Select value={filters.sort} onValueChange={(value) => updateFilter('sort', value)}>\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"dscore\">{t('sort.dscore')}</SelectItem>\n              <SelectItem value=\"price\">{t('sort.price')}</SelectItem>\n              <SelectItem value=\"trust\">{t('sort.trust')}</SelectItem>\n              <SelectItem value=\"reviews\">{t('sort.reviews')}</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3 pt-4 border-t border-gray-200\">\n          <Button onClick={onApply} className=\"w-full bg-blue-600 text-white hover:bg-blue-700\">\n            {t('apply')}\n          </Button>\n          <Button onClick={onReset} variant=\"outline\" className=\"w-full\">\n            {t('reset')}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7992},"client/src/components/LanguageToggle.tsx":{"content":"import { useTranslation } from '../lib/i18n';\n\nexport function LanguageToggle() {\n  const { language, changeLanguage } = useTranslation();\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <button\n        onClick={() => changeLanguage('ru')}\n        className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\n          language === 'ru'\n            ? 'bg-blue-600 text-white'\n            : 'text-gray-700 hover:bg-gray-100'\n        }`}\n      >\n        RU\n      </button>\n      <button\n        onClick={() => changeLanguage('ro')}\n        className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\n          language === 'ro'\n            ? 'bg-blue-600 text-white'\n            : 'text-gray-700 hover:bg-gray-100'\n        }`}\n      >\n        RO\n      </button>\n    </div>\n  );\n}\n","size_bytes":825},"client/src/components/MobileFiltersModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Filter, X, Search } from 'lucide-react';\nimport { useTranslation, SPECIALIZATIONS, LANGUAGES } from '../lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Slider } from '@/components/ui/slider';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useDebounce } from '../hooks/use-debounce';\n\ninterface City {\n  id: string;\n  nameRu: string;\n  nameRo: string;\n}\n\ninterface District {\n  id: string;\n  nameRu: string;\n  nameRo: string;\n}\n\nexport interface FilterValues {\n  city?: string;\n  districts: string[];\n  specializations: string[];\n  languages: string[];\n  verified: boolean;\n  urgentToday: boolean;\n  priceRange: [number, number];\n  sort: 'dscore' | 'price' | 'trust' | 'reviews';\n}\n\ninterface MobileFiltersModalProps {\n  cities: City[];\n  districts: District[];\n  filters: FilterValues;\n  onFiltersChange: (filters: FilterValues) => void;\n  onApply: () => void;\n  onReset: () => void;\n  onSearch: (query: string) => void;\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function MobileFiltersModal({ \n  cities, \n  districts, \n  filters, \n  onFiltersChange, \n  onApply, \n  onReset,\n  onSearch,\n  open,\n  onClose\n}: MobileFiltersModalProps) {\n  const { t, language } = useTranslation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const debouncedQuery = useDebounce(searchQuery, 300);\n\n  useEffect(() => {\n    onSearch(debouncedQuery);\n  }, [debouncedQuery, onSearch]);\n\n  const updateFilter = (key: keyof FilterValues, value: any) => {\n    onFiltersChange({ ...filters, [key]: value });\n  };\n\n  const toggleArrayValue = (key: 'districts' | 'specializations' | 'languages', value: string) => {\n    const current = filters[key];\n    const updated = current.includes(value) \n      ? current.filter(v => v !== value)\n      : [...current, value];\n    updateFilter(key, updated);\n  };\n\n  const handleApply = () => {\n    onApply();\n    onClose();\n  };\n\n  const handleReset = () => {\n    onReset();\n    setSearchQuery('');\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm max-h-[90vh] overflow-y-auto p-0\">\n        <DialogHeader className=\"px-6 py-4 border-b border-gray-200\">\n          <DialogTitle className=\"text-xl font-bold text-gray-900 flex items-center\">\n            <Filter className=\"h-5 w-5 mr-2\" />\n            {t('filters')}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Search */}\n          <div>\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <Search className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <input\n                type=\"text\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                placeholder={t('searchPlaceholder')}\n                className=\"block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white text-sm\"\n              />\n            </div>\n          </div>\n\n          {/* City Filter */}\n          <div>\n            <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('city')}</label>\n            <Select value={filters.city || 'all'} onValueChange={(value) => updateFilter('city', value === 'all' ? undefined : value)}>\n              <SelectTrigger>\n                <SelectValue placeholder={t('allCities')} />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">{t('allCities')}</SelectItem>\n                {cities.map(city => (\n                  <SelectItem key={city.id} value={city.id}>\n                    {language === 'ru' ? city.nameRu : city.nameRo}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* District Filter */}\n          {filters.city && districts.length > 0 && (\n            <div>\n              <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('district')}</label>\n              <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                {districts.map(district => (\n                  <div key={district.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={district.id}\n                      checked={filters.districts.includes(district.id)}\n                      onCheckedChange={() => toggleArrayValue('districts', district.id)}\n                    />\n                    <label htmlFor={district.id} className=\"text-sm text-gray-700\">\n                      {language === 'ru' ? district.nameRu : district.nameRo}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Specialization Filter */}\n          <div>\n            <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('specialization')}</label>\n            <div className=\"space-y-2\">\n              {Object.entries(SPECIALIZATIONS).map(([key, value]) => (\n                <div key={key} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={key}\n                    checked={filters.specializations.includes(key)}\n                    onCheckedChange={() => toggleArrayValue('specializations', key)}\n                  />\n                  <label htmlFor={key} className=\"text-sm text-gray-700\">\n                    {value[language]}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Price Range */}\n          <div>\n            <label className=\"block text-sm font-semibold text-gray-900 mb-3\">\n              {t('priceLevel')}: {filters.priceRange[0]} - {filters.priceRange[1]}\n            </label>\n            <Slider\n              value={filters.priceRange}\n              onValueChange={(value) => updateFilter('priceRange', value)}\n              max={100}\n              min={0}\n              step={5}\n              className=\"w-full\"\n            />\n          </div>\n\n          {/* Status */}\n          <div>\n            <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('receptionStatus')}</label>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"verified\"\n                  checked={filters.verified}\n                  onCheckedChange={(checked) => updateFilter('verified', checked)}\n                />\n                <label htmlFor=\"verified\" className=\"text-sm text-gray-700\">{t('verified')}</label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"urgent\"\n                  checked={filters.urgentToday}\n                  onCheckedChange={(checked) => updateFilter('urgentToday', checked)}\n                />\n                <label htmlFor=\"urgent\" className=\"text-sm text-gray-700\">{t('urgentToday')}</label>\n              </div>\n            </div>\n          </div>\n\n          {/* Sort */}\n          <div>\n            <label className=\"block text-sm font-semibold text-gray-900 mb-3\">{t('sorting')}</label>\n            <Select value={filters.sort} onValueChange={(value) => updateFilter('sort', value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"dscore\">{t('sort.dscore')}</SelectItem>\n                <SelectItem value=\"price\">{t('sort.price')}</SelectItem>\n                <SelectItem value=\"trust\">{t('sort.trust')}</SelectItem>\n                <SelectItem value=\"reviews\">{t('sort.reviews')}</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3 pt-4 border-t border-gray-200\">\n            <Button onClick={handleApply} className=\"w-full bg-blue-600 text-white hover:bg-blue-700\">\n              {t('apply')}\n            </Button>\n            <Button onClick={handleReset} variant=\"outline\" className=\"w-full\">\n              {t('reset')}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8580},"client/src/components/PricingModal.tsx":{"content":"import { X } from 'lucide-react';\nimport { useTranslation } from '../lib/i18n';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useState } from 'react';\n\ninterface Clinic {\n  id: string;\n  name: string;\n  packages: Array<{\n    id: string;\n    code: string;\n    nameRu: string;\n    nameRo: string;\n    priceMin: number;\n    priceMax: number;\n    priceMedian: number;\n  }>;\n}\n\ninterface PricingModalProps {\n  clinic: Clinic | null;\n  open: boolean;\n  onClose: () => void;\n  onBookClick: (clinic: Clinic) => void;\n}\n\nexport function PricingModal({ clinic, open, onClose, onBookClick }: PricingModalProps) {\n  const { t, language } = useTranslation();\n  const [currency, setCurrency] = useState('MDL');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n\n  if (!clinic) return null;\n\n  const handleBookClick = () => {\n    onBookClick(clinic);\n    onClose();\n  };\n\n  const categories = [\n    { id: 'all', nameRu: 'Все услуги', nameRo: 'Toate serviciile' },\n    { id: 'implant', nameRu: 'Имплантация', nameRo: 'Implantologie' },\n    { id: 'hygiene', nameRu: 'Гигиена', nameRo: 'Igienă' },\n    { id: 'endo', nameRu: 'Эндодонтия', nameRo: 'Endodonție' }\n  ];\n\n  const filteredPackages = selectedCategory === 'all' \n    ? clinic.packages \n    : clinic.packages.filter(pkg => pkg.code.includes(selectedCategory));\n\n  const currencySymbol = currency === 'MDL' ? 'лей' : '€';\n  const exchangeRate = currency === 'MDL' ? 1 : 0.05;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"border-b border-gray-200 pb-4\">\n          <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n            Цены - {clinic.name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div className=\"flex items-center space-x-4\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map(cat => (\n                    <SelectItem key={cat.id} value={cat.id}>\n                      {language === 'ru' ? cat.nameRu : cat.nameRo}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Select value={currency} onValueChange={setCurrency}>\n              <SelectTrigger className=\"w-24\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"MDL\">MDL</SelectItem>\n                <SelectItem value=\"EUR\">EUR</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"bg-gray-50 rounded-lg overflow-hidden mb-6\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-100\">\n                <tr>\n                  <th className=\"px-6 py-4 text-left text-sm font-semibold text-gray-900\">\n                    Услуга\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-semibold text-gray-900\">\n                    От\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-semibold text-gray-900\">\n                    До\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-semibold text-gray-900\">\n                    Медиана\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-semibold text-gray-900\">\n                    Примечание\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredPackages.map(pkg => (\n                  <tr key={pkg.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      {language === 'ru' ? pkg.nameRu : pkg.nameRo}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-700\">\n                      {Math.round(pkg.priceMin * exchangeRate).toLocaleString()} {currencySymbol}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-700\">\n                      {Math.round(pkg.priceMax * exchangeRate).toLocaleString()} {currencySymbol}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\n                      {Math.round(pkg.priceMedian * exchangeRate).toLocaleString()} {currencySymbol}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-500\">\n                      Консультация включена\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"flex justify-center\">\n            <Button \n              onClick={handleBookClick}\n              className=\"bg-blue-600 text-white hover:bg-blue-700 px-8 py-3\"\n            >\n              {t('book')}\n            </Button>\n          </div>\n\n          <p className=\"text-xs text-gray-500 mt-4 text-center\">\n            {t('pricesProvidedBy')}. {t('lastUpdated')}: 15.01.2024\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5753},"client/src/components/RecommendedClinics.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Star, MapPin, Clock, Phone, Flame } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\ninterface RecommendedClinicsProps {\n  onClinicClick: (slug: string) => void;\n  onBookClick: (clinic: any) => void;\n}\n\nconst promotionalLabelStyles: Record<string, string> = {\n  top: 'bg-yellow-500 text-white',\n  high_rating: 'bg-green-500 text-white',\n  premium: 'bg-purple-500 text-white',\n  verified_plus: 'bg-blue-500 text-white',\n  popular: 'bg-red-500 text-white',\n  new: 'bg-orange-500 text-white',\n  discount: 'bg-pink-500 text-white',\n  fast_service: 'bg-teal-500 text-white'\n};\n\nconst promotionalLabelText: Record<string, string> = {\n  top: 'ТОП',\n  high_rating: 'Высокий рейтинг',\n  premium: 'Премиум',\n  verified_plus: 'Верифицирован+',\n  popular: 'Популярное',\n  new: 'Новое',\n  discount: 'Скидки',\n  fast_service: 'Быстро'\n};\n\nexport function RecommendedClinics({ onClinicClick, onBookClick }: RecommendedClinicsProps) {\n  // Определяем стиль рамки для выделения\n  const getPromotionalBorder = (clinic: any) => {\n    if (!clinic.promotionalLabels || clinic.promotionalLabels.length === 0) return '';\n    \n    const label = clinic.promotionalLabels[0];\n    const borderStyles: Record<string, string> = {\n      top: 'border-4 border-yellow-400 shadow-lg shadow-yellow-400/50',\n      premium: 'border-4 border-purple-400 shadow-lg shadow-purple-400/50',\n      high_rating: 'border-4 border-green-400 shadow-lg shadow-green-400/50',\n      verified_plus: 'border-4 border-blue-400 shadow-lg shadow-blue-400/50',\n      popular: 'border-4 border-red-400 shadow-lg shadow-red-400/50',\n      new: 'border-4 border-orange-400 shadow-lg shadow-orange-400/50',\n      discount: 'border-4 border-pink-400 shadow-lg shadow-pink-400/50',\n      fast_service: 'border-4 border-teal-400 shadow-lg shadow-teal-400/50'\n    };\n    \n    return borderStyles[label] || '';\n  };\n\n  // Получаем иконку для лейбла\n  const getPromotionalIcon = (clinic: any) => {\n    if (!clinic.promotionalLabels || clinic.promotionalLabels.length === 0) return null;\n    \n    const label = clinic.promotionalLabels[0];\n    const icons: Record<string, string> = {\n      top: '👑',\n      premium: '💎', \n      high_rating: '⭐',\n      verified_plus: '✅',\n      popular: '🔥',\n      new: '🆕',\n      discount: '💰',\n      fast_service: '⚡'\n    };\n    \n    return icons[label] || '✨';\n  };\n\n  const { data: clinicsData, isLoading } = useQuery({\n    queryKey: ['/api/recommended-clinics'],\n    queryFn: async () => {\n      const response = await fetch('/api/recommended-clinics');\n      if (!response.ok) throw new Error('Failed to fetch recommended clinics');\n      return response.json();\n    },\n  });\n\n  const clinics = clinicsData?.clinics || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Flame className=\"h-6 w-6 text-red-500\" />\n          <h2 className=\"text-2xl font-bold text-gray-900\">Рекомендуем</h2>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"bg-white rounded-lg shadow-md animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-t-lg\"></div>\n              <div className=\"p-4 space-y-3\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (clinics.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"mb-8\">\n      <div className=\"flex items-center space-x-2 mb-6\">\n        <Flame className=\"h-6 w-6 text-red-500\" />\n        <h2 className=\"text-2xl font-bold text-gray-900\">Рекомендуем</h2>\n        <Badge className=\"bg-gradient-to-r from-red-500 to-orange-500 text-white font-semibold px-3 py-1\">\n          ⭐ Лучший выбор\n        </Badge>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {clinics.map((clinic: any) => (\n          <div\n            key={clinic.id}\n            className={`bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer relative overflow-hidden ${getPromotionalBorder(clinic)}`}\n            onClick={() => onClinicClick(clinic.slug)}\n          >\n            {/* Recommended Badge */}\n            <div className=\"absolute top-3 left-3 z-10\">\n              <Badge className=\"bg-red-500 text-white font-semibold\">\n                <Flame className=\"h-3 w-3 mr-1\" />\n                Рекомендуем\n              </Badge>\n            </div>\n\n\n            {/* Clinic Image */}\n            <div className=\"h-48 bg-gradient-to-br from-blue-50 to-blue-100 overflow-hidden relative\">\n              <img\n                src={`https://images.unsplash.com/photo-${clinic.id.slice(0, 10)}?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300`}\n                alt={clinic.name}\n                className=\"w-full h-full object-cover absolute inset-0\"\n                onError={(e) => {\n                  if (clinic.logoUrl && !(e.target as HTMLImageElement).src.includes(clinic.logoUrl)) {\n                    (e.target as HTMLImageElement).src = clinic.logoUrl;\n                    // Оставляем класс w-full h-full object-cover для логотипа тоже\n                    (e.target as HTMLImageElement).className = \"w-full h-full object-cover absolute inset-0\";\n                  } else {\n                    (e.target as HTMLImageElement).src = 'https://images.unsplash.com/photo-1629909613654-28e377c37b09?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300';\n                  }\n                }}\n              />\n            </div>\n\n            {/* Clinic Info */}\n            <div className=\"p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <h3 className=\"font-semibold text-lg text-gray-900\">\n                  {clinic.name}\n                </h3>\n                {/* Promotional icon next to name */}\n                {getPromotionalIcon(clinic) && (\n                  <div className=\"bg-white bg-opacity-90 backdrop-blur-sm rounded-full w-6 h-6 flex items-center justify-center text-sm shadow-md flex-shrink-0\">\n                    {getPromotionalIcon(clinic)}\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"space-y-2 mb-3\">\n                <div className=\"flex items-center text-gray-600 text-sm\">\n                  <MapPin className=\"h-4 w-4 mr-1\" />\n                  <span>{clinic.city.nameRu}</span>\n                  {clinic.district && <span>, {clinic.district.nameRu}</span>}\n                </div>\n                \n                {clinic.phone && (\n                  <div className=\"flex items-center text-gray-600 text-sm\">\n                    <Phone className=\"h-4 w-4 mr-1\" />\n                    <span>{clinic.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* D-Score */}\n              <div className=\"mb-3\">\n                <div className=\"flex items-center justify-between text-sm mb-1\">\n                  <span className=\"text-gray-600\">D-Score</span>\n                  <span className=\"font-semibold\">{clinic.dScore}</span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className={`h-2 rounded-full ${\n                      clinic.dScore >= 80 \n                        ? 'bg-green-500' \n                        : clinic.dScore >= 60 \n                          ? 'bg-yellow-500' \n                          : 'bg-red-500'\n                    }`}\n                    style={{ width: `${clinic.dScore}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex-1 text-xs\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onClinicClick(clinic.slug);\n                  }}\n                >\n                  Подробнее\n                </Button>\n                <Button\n                  size=\"sm\"\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-xs\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onBookClick(clinic);\n                  }}\n                >\n                  Записаться\n                </Button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":9107},"client/src/components/ScoreBar.tsx":{"content":"interface ScoreBarProps {\n  value: number;\n  label: string;\n  className?: string;\n}\n\nexport function ScoreBar({ value, label, className = \"\" }: ScoreBarProps) {\n  const getColor = (score: number) => {\n    if (score >= 75) return 'bg-green-500';\n    if (score >= 50) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"flex items-center justify-between\">\n        <span className=\"text-sm text-gray-700\">{label}</span>\n        <span className=\"text-sm font-medium text-gray-900\">{value}</span>\n      </div>\n      <div className=\"w-full bg-gray-200 rounded-full h-2 mt-1\">\n        <div \n          className={`h-2 rounded-full transition-all duration-300 ${getColor(value)}`}\n          style={{ width: `${value}%` }}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":823},"client/src/components/SearchBar.tsx":{"content":"import { Search } from 'lucide-react';\nimport { useTranslation } from '../lib/i18n';\nimport { useDebounce } from '../hooks/use-debounce';\nimport { useState, useEffect } from 'react';\n\ninterface SearchBarProps {\n  onSearch: (query: string) => void;\n  className?: string;\n}\n\nexport function SearchBar({ onSearch, className = \"\" }: SearchBarProps) {\n  const { t } = useTranslation();\n  const [query, setQuery] = useState('');\n  const debouncedQuery = useDebounce(query, 250);\n\n  useEffect(() => {\n    onSearch(debouncedQuery);\n  }, [debouncedQuery, onSearch]);\n\n  return (\n    <div className={`relative ${className}`}>\n      <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n        <Search className=\"h-5 w-5 text-gray-400\" />\n      </div>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder={t('searchPlaceholder')}\n        className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white text-sm\"\n      />\n    </div>\n  );\n}\n","size_bytes":1108},"client/src/hooks/use-debounce.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","size_bytes":386},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useSEO.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useEffect } from 'react';\n\ninterface SEOSettings {\n  siteTitle: string;\n  metaDescription: string;\n}\n\nexport function useSEO() {\n  const { data: seoSettings, isLoading } = useQuery<SEOSettings>({\n    queryKey: ['/api/seo-settings'],\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  useEffect(() => {\n    if (seoSettings) {\n      // Update document title\n      document.title = seoSettings.siteTitle;\n      \n      // Update meta description\n      let metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (!metaDescription) {\n        metaDescription = document.createElement('meta');\n        metaDescription.setAttribute('name', 'description');\n        document.getElementsByTagName('head')[0].appendChild(metaDescription);\n      }\n      metaDescription.setAttribute('content', seoSettings.metaDescription);\n\n      // Update Open Graph tags\n      updateOrCreateMeta('property', 'og:title', seoSettings.siteTitle);\n      updateOrCreateMeta('property', 'og:description', seoSettings.metaDescription);\n      updateOrCreateMeta('property', 'og:type', 'website');\n      updateOrCreateMeta('property', 'og:url', window.location.origin);\n\n      // Update Twitter Card tags  \n      updateOrCreateMeta('name', 'twitter:card', 'summary_large_image');\n      updateOrCreateMeta('name', 'twitter:title', seoSettings.siteTitle);\n      updateOrCreateMeta('name', 'twitter:description', seoSettings.metaDescription);\n    }\n  }, [seoSettings]);\n\n  return {\n    seoSettings,\n    isLoading\n  };\n}\n\nfunction updateOrCreateMeta(attribute: string, value: string, content: string) {\n  let meta = document.querySelector(`meta[${attribute}=\"${value}\"]`);\n  if (!meta) {\n    meta = document.createElement('meta');\n    meta.setAttribute(attribute, value);\n    document.getElementsByTagName('head')[0].appendChild(meta);\n  }\n  meta.setAttribute('content', content);\n}","size_bytes":1935},"client/src/languages/ro.ts":{"content":"export const ro = {\n  appTitle: \"Dent Moldova\",\n  searchPlaceholder: \"Caută clinică sau serviciu...\",\n  filters: \"Filtre\",\n  hideFilters: \"Ascunde filtrele\",\n  showFilters: \"Arată filtrele\",\n  addClinic: \"Adaugă clinică\",\n  clinicFormTitle: \"Plasarea clinicii\",\n  clinicName: \"Numele clinicii\",\n  clinicEmail: \"Email pentru contact\",\n  clinicPhone: \"Telefon de contact\",\n  clinicDescription: \"Descrierea serviciilor\",\n  submit: \"Trimite cererea\",\n  close: \"Închide\",\n  priceLevel: \"Nivelul de preț\",\n  receptionStatus: \"Statutul recepției\",\n  sorting: \"Sortare\",\n  city: \"Oraș\",\n  district: \"Sector\", \n  specialization: \"Specializare\",\n  languages: \"Limbi\",\n  verified: \"Verificat\",\n  urgentToday: \"Programare azi\",\n  priceRange: \"Interval preț\",\n  sortBy: \"Sortează\",\n  \"sort.dscore\": \"D-score\",\n  \"sort.price\": \"Preț\",\n  \"sort.trust\": \"Încredere\",\n  \"sort.reviews\": \"Recenzii\",\n  apply: \"Aplică\",\n  reset: \"Resetează\",\n  price: \"Preț\",\n  trust: \"Încredere\",\n  reviews: \"Recenzii\", \n  access: \"Acces\",\n  book: \"Programează\",\n  prices: \"Prețuri\",\n  verifiedBadge: \"Verificat\",\n  cnamBadge: \"CNAM\",\n  packages: \"Pachete\",\n  disclaimer: \"Informațiile sunt cu caracter informativ, nu constituie sfat medical.\",\n  allCities: \"Toate orașele\",\n  allDistricts: \"Toate sectoarele\",\n  allServices: \"Toate serviciile\", \n  showingResults: \"Afișate\",\n  to: \"până la\",\n  of: \"din\",\n  results: \"rezultate\",\n  previous: \"Înapoi\",\n  next: \"Următorul\",\n  callClinic: \"Sună\",\n  website: \"Site\",\n  scoreExplanation: \"Explicația scorurilor\",\n  priceDescription: \"Accesibilitate preț, promoții, plată în rate\",\n  trustDescription: \"Licențe, certificate, experiența medicilor\",\n  reviewsDescription: \"Rating Google, recenzii publice\",\n  accessDescription: \"Programare online, program, locație\",\n  beforeAfter: \"Cazuri înainte/după\",\n  dataSources: \"Surse de date\",\n  pricesProvidedBy: \"Prețuri - furnizate de clinică\",\n  reviewsFromPublic: \"Recenzii - surse publice\", \n  lastUpdated: \"Actualizat\"\n};","size_bytes":2016},"client/src/languages/ru.ts":{"content":"export const ru = {\n  appTitle: \"Dent Moldova\",\n  searchPlaceholder: \"Поиск клиники или услуги...\",\n  filters: \"Фильтры\",\n  hideFilters: \"Скрыть фильтры\",\n  showFilters: \"Показать фильтры\",\n  addClinic: \"Добавить клинику\",\n  clinicFormTitle: \"Размещение клиники\",\n  clinicName: \"Название клиники\",\n  clinicEmail: \"Email для связи\",\n  clinicPhone: \"Контактный телефон\",\n  clinicDescription: \"Описание услуг\",\n  submit: \"Отправить заявку\",\n  close: \"Закрыть\",\n  priceLevel: \"Ценовой уровень\",\n  receptionStatus: \"Статус приёма\",\n  sorting: \"Сортировка\", \n  city: \"Город\",\n  district: \"Район\",\n  specialization: \"Специализация\",\n  languages: \"Языки\",\n  verified: \"Проверено\",\n  urgentToday: \"Запись сегодня\",\n  priceRange: \"Диапазон цены\",\n  sortBy: \"Сортировать\",\n  \"sort.dscore\": \"D-score\",\n  \"sort.price\": \"Цена\",\n  \"sort.trust\": \"Доверие\", \n  \"sort.reviews\": \"Отзывы\",\n  apply: \"Применить\",\n  reset: \"Сброс\",\n  price: \"Цена\",\n  trust: \"Доверие\",\n  reviews: \"Отзывы\",\n  access: \"Доступность\",\n  book: \"Записаться\",\n  prices: \"Цены\",\n  verifiedBadge: \"Verified\",\n  cnamBadge: \"CNAM\",\n  packages: \"Пакеты\",\n  disclaimer: \"Информация носит справочный характер и не является медсоветом.\",\n  allCities: \"Все города\",\n  allDistricts: \"Все районы\", \n  allServices: \"Все услуги\",\n  showingResults: \"Показано\",\n  to: \"до\",\n  of: \"из\",\n  results: \"результатов\",\n  previous: \"Назад\",\n  next: \"Далее\",\n  callClinic: \"Позвонить\",\n  website: \"Сайт\",\n  scoreExplanation: \"Расшифровка оценок\",\n  priceDescription: \"Доступность по стоимости, акции, рассрочка\",\n  trustDescription: \"Лицензии, сертификаты, опыт врачей\",\n  reviewsDescription: \"Рейтинг Google, публичные отзывы\",\n  accessDescription: \"Запись онлайн, время работы, расположение\",\n  beforeAfter: \"Случаи до/после\",\n  dataSources: \"Источники данных\",\n  pricesProvidedBy: \"Цены - предоставлены клиникой\",\n  reviewsFromPublic: \"Отзывы - публичные источники\",\n  lastUpdated: \"Обновлено\"\n};","size_bytes":2633},"client/src/lib/currency.ts":{"content":"// Currency conversion utilities\nexport type Currency = 'MDL' | 'EUR' | 'USD';\n\nexport interface CurrencyRates {\n  MDL: number;\n  EUR: number;\n  USD: number;\n}\n\n// Static currency rates (in practice, these would come from an API)\nexport const CURRENCY_RATES: CurrencyRates = {\n  MDL: 1, // Base currency\n  EUR: 20.5, // 1 EUR = 20.5 MDL (approximate)\n  USD: 18.5, // 1 USD = 18.5 MDL (approximate)\n};\n\nexport const CURRENCY_SYMBOLS: Record<Currency, string> = {\n  MDL: 'лей',\n  EUR: '€',\n  USD: '$',\n};\n\nexport const CURRENCY_NAMES: Record<Currency, string> = {\n  MDL: 'лей',\n  EUR: 'евро',\n  USD: 'доллар',\n};\n\n/**\n * Convert price from one currency to another\n */\nexport function convertPrice(\n  amount: number,\n  fromCurrency: Currency,\n  toCurrency: Currency\n): number {\n  if (fromCurrency === toCurrency) return amount;\n  \n  // Convert to MDL first (base currency)\n  const amountInMDL = amount * CURRENCY_RATES[fromCurrency];\n  \n  // Convert from MDL to target currency\n  const convertedAmount = amountInMDL / CURRENCY_RATES[toCurrency];\n  \n  return Math.round(convertedAmount);\n}\n\n/**\n * Format price with currency symbol\n */\nexport function formatPrice(amount: number, currency: Currency): string {\n  const symbol = CURRENCY_SYMBOLS[currency];\n  \n  if (currency === 'MDL') {\n    return `${amount} ${symbol}`;\n  }\n  \n  return `${symbol}${amount}`;\n}\n\n/**\n * Get minimum price from services array, optionally convert to target currency\n */\nexport function getMinPrice(\n  services: Array<{ price: number; currency: Currency }>,\n  targetCurrency?: Currency\n): { price: number; currency: Currency } | null {\n  if (!services || services.length === 0) return null;\n  \n  // Convert all prices to the same currency for comparison\n  const baseCurrency: Currency = 'MDL';\n  const convertedServices = services.map(service => ({\n    ...service,\n    priceInBase: convertPrice(service.price, service.currency, baseCurrency)\n  }));\n  \n  // Find minimum price\n  const minService = convertedServices.reduce((min, current) => \n    current.priceInBase < min.priceInBase ? current : min\n  );\n  \n  if (targetCurrency && targetCurrency !== minService.currency) {\n    return {\n      price: convertPrice(minService.price, minService.currency, targetCurrency),\n      currency: targetCurrency\n    };\n  }\n  \n  return {\n    price: minService.price,\n    currency: minService.currency\n  };\n}","size_bytes":2385},"client/src/lib/i18n.ts":{"content":"import { useState, useEffect } from 'react';\nimport { ru } from '../languages/ru';\nimport { ro } from '../languages/ro';\n\ntype Language = 'ru' | 'ro';\n\ninterface Translations {\n  [key: string]: string;\n}\n\nconst translations: Record<Language, Translations> = {\n  ru,\n  ro\n};\n\n// Global language state\nlet globalLanguage: Language = 'ru';\nconst listeners: Set<() => void> = new Set();\n\n// Initialize from localStorage\nif (typeof window !== 'undefined') {\n  const saved = localStorage.getItem('language');\n  globalLanguage = (saved as Language) || 'ru';\n}\n\nfunction setGlobalLanguage(lang: Language) {\n  globalLanguage = lang;\n  if (typeof window !== 'undefined') {\n    localStorage.setItem('language', lang);\n  }\n  // Notify all listeners\n  listeners.forEach(listener => listener());\n}\n\nexport function useTranslation() {\n  const [language, setLanguage] = useState<Language>(globalLanguage);\n\n  useEffect(() => {\n    const listener = () => {\n      setLanguage(globalLanguage);\n    };\n    listeners.add(listener);\n    \n    return () => {\n      listeners.delete(listener);\n    };\n  }, []);\n\n  const t = (key: string): string => {\n    return translations[language][key] || key;\n  };\n\n  const changeLanguage = (lang: Language) => {\n    setGlobalLanguage(lang);\n  };\n\n  return { t, language, changeLanguage };\n}\n\nexport const SPECIALIZATIONS = {\n  implants: { ru: \"Импланты\", ro: \"Implanturi\" },\n  veneers: { ru: \"Виниры\", ro: \"Fațete\" },\n  endo: { ru: \"Эндодонтия\", ro: \"Endodonție\" },\n  hygiene: { ru: \"Гигиена\", ro: \"Igienă\" },\n  ortho: { ru: \"Ортодонтия\", ro: \"Ortodonție\" },\n  kids: { ru: \"Детская\", ro: \"Copii\" }\n};\n\nexport const LANGUAGES = {\n  ru: { ru: \"Русский\", ro: \"Rusă\" },\n  ro: { ru: \"Румынский\", ro: \"Română\" },\n  en: { ru: \"Английский\", ro: \"Engleză\" }\n};\n","size_bytes":1848},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Handle FormData differently (for file uploads)\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: isFormData ? {} : (data ? { \"Content-Type\": \"application/json\" } : {}),\n    body: isFormData ? data : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1527},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { LanguageToggle } from '../components/LanguageToggle';\nimport { Filter, X, Plus, Building2, Shield } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { SearchBar } from '../components/SearchBar';\nimport { FiltersSidebar, FilterValues } from '../components/FiltersSidebar';\nimport { ClinicGrid } from '../components/ClinicGrid';\nimport { ClinicDetail } from '../components/ClinicDetail';\nimport { BookingModal } from '../components/BookingModal';\nimport { MobileFiltersModal } from '../components/MobileFiltersModal';\nimport { AddClinicModal } from '../components/AddClinicModal';\nimport { RecommendedClinics } from '../components/RecommendedClinics';\nimport { useTranslation } from '../lib/i18n';\n\nexport default function Home() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedClinic, setSelectedClinic] = useState<string | null>(null);\n  const [detailOpen, setDetailOpen] = useState(false);\n  const [bookingOpen, setBookingOpen] = useState(false);\n  const [bookingClinic, setBookingClinic] = useState<any>(null);\n  const [filtersVisible, setFiltersVisible] = useState(true);\n  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);\n  const [clinicFormOpen, setClinicFormOpen] = useState(false);\n  \n  const [filters, setFilters] = useState<FilterValues>({\n    districts: [],\n    specializations: [],\n    languages: [],\n    verified: false,\n    urgentToday: false,\n    priceRange: [0, 100],\n    sort: 'dscore'\n  });\n  \n  const [page, setPage] = useState(1);\n  const limit = 50;\n\n  // Fetch cities\n  const { data: cities = [] } = useQuery<any[]>({\n    queryKey: ['/api/cities'],\n  });\n\n  // Fetch districts for selected city\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/cities', filters.city, 'districts'],\n    enabled: !!filters.city,\n  });\n\n  // Build query parameters\n  const buildQueryParams = useCallback(() => {\n    const params = new URLSearchParams();\n    \n    if (searchQuery) params.set('q', searchQuery);\n    if (filters.city) params.set('city', filters.city);\n    if (filters.districts.length > 0) {\n      filters.districts.forEach(d => params.append('districts', d));\n    }\n    if (filters.specializations.length > 0) {\n      filters.specializations.forEach(s => params.append('specializations', s));\n    }\n    if (filters.languages.length > 0) {\n      filters.languages.forEach(l => params.append('languages', l));\n    }\n    if (filters.verified) params.set('verified', 'true');\n    if (filters.urgentToday) params.set('urgentToday', 'true');\n    if (filters.priceRange[0] > 0) params.set('priceMin', filters.priceRange[0].toString());\n    if (filters.priceRange[1] < 100) params.set('priceMax', filters.priceRange[1].toString());\n    params.set('sort', filters.sort);\n    params.set('page', page.toString());\n    params.set('limit', limit.toString());\n    \n    return params.toString();\n  }, [searchQuery, filters, page]);\n\n  // Fetch clinics\n  const { data: clinicsData, isLoading } = useQuery({\n    queryKey: ['/api/clinics', buildQueryParams()],\n    queryFn: async () => {\n      const response = await fetch(`/api/clinics?${buildQueryParams()}`);\n      if (!response.ok) throw new Error('Failed to fetch clinics');\n      return response.json();\n    },\n  });\n\n  // Fetch clinic detail\n  const { data: clinicDetail } = useQuery({\n    queryKey: ['/api/clinics', selectedClinic],\n    enabled: !!selectedClinic,\n    queryFn: async () => {\n      const response = await fetch(`/api/clinics/${selectedClinic}`);\n      if (!response.ok) throw new Error('Failed to fetch clinic');\n      return response.json();\n    },\n  });\n\n  const handleSearch = useCallback((query: string) => {\n    setSearchQuery(query);\n    setPage(1);\n  }, []);\n\n  const handleFiltersChange = useCallback((newFilters: FilterValues) => {\n    setFilters(newFilters);\n    setPage(1);\n  }, []);\n\n  const handleApplyFilters = useCallback(() => {\n    setPage(1);\n  }, []);\n\n  const handleResetFilters = useCallback(() => {\n    setFilters({\n      districts: [],\n      specializations: [],\n      languages: [],\n      verified: false,\n      urgentToday: false,\n      priceRange: [0, 100],\n      sort: 'dscore'\n    });\n    setSearchQuery('');\n    setPage(1);\n  }, []);\n\n  const handleClinicClick = useCallback((slug: string) => {\n    setSelectedClinic(slug);\n    setDetailOpen(true);\n  }, []);\n\n  const handleBookClick = useCallback((clinic: any) => {\n    setBookingClinic(clinic);\n    setBookingOpen(true);\n  }, []);\n\n\n  const handlePageChange = useCallback((newPage: number) => {\n    setPage(newPage);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"max-w-full mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center\">\n              <h1 className=\"text-xl font-bold text-gray-900\">{t('appTitle')}</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-2 md:space-x-4\">\n              {/* Mobile Filter Toggle */}\n              <Button\n                onClick={() => setMobileFiltersOpen(true)}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex md:hidden items-center space-x-2\"\n              >\n                <Filter className=\"h-4 w-4\" />\n                <span>{t('filters')}</span>\n              </Button>\n              \n              {/* Desktop Filter Toggle */}\n              <Button\n                onClick={() => setFiltersVisible(!filtersVisible)}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"hidden md:flex items-center space-x-2\"\n              >\n                {filtersVisible ? (\n                  <>\n                    <X className=\"h-4 w-4\" />\n                    <span>{t('hideFilters')}</span>\n                  </>\n                ) : (\n                  <>\n                    <Filter className=\"h-4 w-4\" />\n                    <span>{t('showFilters')}</span>\n                  </>\n                )}\n              </Button>\n              \n              {/* Add Clinic Button */}\n              <Button\n                onClick={() => setClinicFormOpen(true)}\n                className=\"bg-blue-600 text-white hover:bg-blue-700 flex items-center space-x-2\"\n                size=\"sm\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">{t('addClinic')}</span>\n              </Button>\n              \n              \n              {/* Language Toggle */}\n              <LanguageToggle />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex\">\n        {/* Left Sidebar - Filters (Desktop) */}\n        {filtersVisible && (\n          <div className=\"hidden md:block w-80 flex-shrink-0\">\n            <FiltersSidebar\n              cities={cities}\n              districts={districts}\n              filters={filters}\n              onFiltersChange={handleFiltersChange}\n              onApply={handleApplyFilters}\n              onReset={handleResetFilters}\n              onSearch={handleSearch}\n            />\n          </div>\n        )}\n\n        {/* Main Content */}\n        <main className={`flex-1 px-4 md:px-8 py-4 md:py-8 ${!filtersVisible ? 'max-w-full' : ''}`}>\n        {/* Recommended Clinics Section */}\n        <RecommendedClinics\n          onClinicClick={handleClinicClick}\n          onBookClick={handleBookClick}\n        />\n        {isLoading ? (\n          <div className=\"space-y-8\">\n            {/* Results Info Skeleton */}\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-gray-200 rounded w-48\"></div>\n            </div>\n\n            {/* Grid Skeleton */}\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 md:gap-6\">\n              {Array.from({ length: 12 }).map((_, i) => (\n                <div key={i} className=\"relative rounded-2xl overflow-hidden aspect-[3/4] md:aspect-[4/3] bg-gray-200\">\n                  <div className=\"animate-pulse\">\n                    {/* Background placeholder */}\n                    <div className=\"absolute inset-0 bg-gradient-to-b from-gray-300 to-gray-400\"></div>\n                    \n                    {/* Content overlay */}\n                    <div className=\"absolute inset-0 flex flex-col justify-center items-center text-center p-6\">\n                      {/* Clinic name placeholder */}\n                      <div className=\"h-6 bg-white bg-opacity-40 rounded w-3/4 mb-2\"></div>\n                      {/* Location placeholder */}\n                      <div className=\"h-4 bg-white bg-opacity-30 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : clinicsData?.clinics?.length > 0 ? (\n          <ClinicGrid\n            clinics={clinicsData.clinics}\n            total={clinicsData.total}\n            page={page}\n            limit={limit}\n            onPageChange={handlePageChange}\n            onClinicClick={handleClinicClick}\n            onBookClick={handleBookClick}\n          />\n        ) : (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500 text-lg\">\n              {searchQuery || Object.values(filters).some(v => \n                Array.isArray(v) ? v.length > 0 : v !== false && v !== 'dscore' && !Array.isArray(v) && v !== 0 && v !== 100\n              ) \n                ? 'Клиники не найдены. Попробуйте изменить параметры поиска.'\n                : 'Загрузка клиник...'\n              }\n            </p>\n          </div>\n        )}\n        </main>\n      </div>\n\n      {/* Modals */}\n      <ClinicDetail\n        clinic={clinicDetail}\n        open={detailOpen}\n        onClose={() => {\n          setDetailOpen(false);\n          setSelectedClinic(null);\n        }}\n        onBookClick={handleBookClick}\n      />\n      \n      <BookingModal\n        clinic={bookingClinic}\n        open={bookingOpen}\n        onClose={() => {\n          setBookingOpen(false);\n          setBookingClinic(null);\n        }}\n      />\n      \n      {/* Mobile Filters Modal */}\n      <MobileFiltersModal\n        cities={cities}\n        districts={districts}\n        filters={filters}\n        onFiltersChange={handleFiltersChange}\n        onApply={handleApplyFilters}\n        onReset={handleResetFilters}\n        onSearch={handleSearch}\n        open={mobileFiltersOpen}\n        onClose={() => setMobileFiltersOpen(false)}\n      />\n      \n      {/* Add Clinic Modal */}\n      <AddClinicModal\n        open={clinicFormOpen}\n        onClose={() => setClinicFormOpen(false)}\n      />\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-gray-200 mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"mb-4 md:mb-0\">\n              <p className=\"text-sm text-gray-600\">© 2024 {t('appTitle')}. Все права защищены.</p>\n            </div>\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex space-x-6 text-sm text-gray-600\">\n                <a href=\"#\" className=\"hover:text-gray-900 transition-colors\">Политика приватности</a>\n                <a href=\"#\" className=\"hover:text-gray-900 transition-colors\">Контакты</a>\n              </div>\n              \n              {/* Admin Button */}\n              <Button\n                onClick={() => setLocation('/admin')}\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"text-gray-700 hover:text-gray-900 hover:bg-gray-100 flex items-center space-x-1\"\n              >\n                <Shield className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Админ</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":12427},"client/src/pages/admin.tsx":{"content":"import { AdminApp } from '../administrator/AdminApp';\n\nexport default function AdminPage() {\n  return <AdminApp />;\n}","size_bytes":117},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/administrator/components/AdminHeader.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Menu, LogOut, Settings, ExternalLink } from 'lucide-react';\n\ninterface AdminHeaderProps {\n  onLogout: () => void;\n  onToggleSidebar: () => void;\n  sidebarOpen: boolean;\n}\n\nexport function AdminHeader({ onLogout, onToggleSidebar, sidebarOpen }: AdminHeaderProps) {\n  return (\n    <header className=\"bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between sticky top-0 z-10\">\n      <div className=\"flex items-center space-x-4\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onToggleSidebar}\n          className=\"p-2\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n        \n        <div className=\"flex items-center space-x-2\">\n          <h1 className=\"text-xl font-bold text-gray-900\">Dent Moldova Admin</h1>\n          <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium\">\n            Панель управления\n          </span>\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n          <Settings className=\"h-4 w-4\" />\n        </Button>\n        \n        <Button \n          onClick={() => window.open('/', '_blank')}\n          variant=\"ghost\" \n          size=\"sm\"\n          className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50 p-2\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          Открыть сайт\n        </Button>\n        \n        <Button \n          onClick={onLogout}\n          variant=\"ghost\" \n          size=\"sm\"\n          className=\"text-red-600 hover:text-red-700 hover:bg-red-50 p-2\"\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Выход\n        </Button>\n      </div>\n    </header>\n  );\n}","size_bytes":1826},"client/src/administrator/components/AdminSidebar.tsx":{"content":"import { \n  LayoutDashboard, \n  Building2, \n  Package, \n  MapPin,\n  BarChart3,\n  Users,\n  Settings,\n  FileText,\n  Calendar\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ntype AdminPage = 'dashboard' | 'clinics' | 'packages' | 'cities' | 'bookings' | 'settings';\n\ninterface AdminSidebarProps {\n  currentPage: AdminPage;\n  onPageChange: (page: AdminPage) => void;\n  isOpen: boolean;\n}\n\nexport function AdminSidebar({ currentPage, onPageChange, isOpen }: AdminSidebarProps) {\n  const menuItems = [\n    {\n      id: 'dashboard' as AdminPage,\n      label: 'Главная',\n      icon: LayoutDashboard,\n      description: 'Обзор и статистика'\n    },\n    {\n      id: 'clinics' as AdminPage,\n      label: 'Клиники',\n      icon: Building2,\n      description: 'Управление клиниками'\n    },\n    {\n      id: 'packages' as AdminPage,\n      label: 'Пакеты услуг',\n      icon: Package,\n      description: 'Цены и услуги'\n    },\n    {\n      id: 'cities' as AdminPage,\n      label: 'Города',\n      icon: MapPin,\n      description: 'Города и районы'\n    },\n    {\n      id: 'bookings' as AdminPage,\n      label: 'Заявки',\n      icon: Calendar,\n      description: 'Заявки на запись'\n    },\n    {\n      id: 'settings' as AdminPage,\n      label: 'Настройки',\n      icon: Settings,\n      description: 'SEO и конфигурация'\n    }\n  ];\n\n  return (\n    <aside className={`fixed left-0 top-16 h-[calc(100vh-4rem)] bg-white border-r border-gray-200 transition-all duration-300 z-10 ${\n      isOpen ? 'w-64' : 'w-16'\n    }`}>\n      <nav className=\"p-4 space-y-2\">\n        {menuItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = currentPage === item.id;\n          \n          return (\n            <Button\n              key={item.id}\n              onClick={() => onPageChange(item.id)}\n              variant={isActive ? 'secondary' : 'ghost'}\n              className={`w-full justify-start h-auto p-3 ${\n                isActive \n                  ? 'bg-blue-100 text-blue-700 border-blue-200' \n                  : 'text-gray-700 hover:bg-gray-100'\n              } ${!isOpen ? 'px-2' : ''}`}\n            >\n              <Icon className={`h-5 w-5 flex-shrink-0 ${!isOpen ? 'mx-auto' : 'mr-3'}`} />\n              \n              {isOpen && (\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">{item.label}</div>\n                  <div className=\"text-xs text-gray-500\">{item.description}</div>\n                </div>\n              )}\n            </Button>\n          );\n        })}\n      </nav>\n      \n      {isOpen && (\n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <div className=\"bg-gray-50 p-3 rounded-lg\">\n            <div className=\"text-sm text-gray-600\">\n              <div className=\"font-medium\">Администратор</div>\n              <div className=\"text-xs\">admin@dentmoldova.md</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </aside>\n  );\n}","size_bytes":3093},"client/src/administrator/components/BookingsManagement.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Calendar, \n  Clock, \n  Phone, \n  Mail, \n  User, \n  Building2, \n  FileText,\n  Eye\n} from 'lucide-react';\n\ninterface Booking {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phone: string;\n  email?: string;\n  service: string;\n  preferredDate: string;\n  preferredTime: string;\n  notes?: string;\n  status: string;\n  createdAt: string;\n  clinic: {\n    id: string;\n    name: string;\n  };\n}\n\nconst statusLabels = {\n  new: { label: 'Новая', color: 'bg-blue-100 text-blue-800' },\n  contacted: { label: 'Связались', color: 'bg-yellow-100 text-yellow-800' },\n  confirmed: { label: 'Подтверждена', color: 'bg-green-100 text-green-800' },\n  completed: { label: 'Выполнена', color: 'bg-gray-100 text-gray-800' },\n  cancelled: { label: 'Отменена', color: 'bg-red-100 text-red-800' },\n};\n\nexport function BookingsManagement() {\n  const { toast } = useToast();\n  const [selectedBooking, setSelectedBooking] = useState<Booking | null>(null);\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n\n  const { data: bookingsData, isLoading } = useQuery<{ bookings: Booking[] }>({\n    queryKey: ['/api/admin/bookings'],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ bookingId, status }: { bookingId: string; status: string }) => {\n      return apiRequest('PUT', `/api/admin/bookings/${bookingId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/bookings'] });\n      toast({\n        title: 'Статус обновлен',\n        description: 'Статус заявки успешно изменен.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Ошибка',\n        description: error.message || 'Не удалось обновить статус заявки.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const bookings = bookingsData?.bookings || [];\n  const filteredBookings = filterStatus === 'all' \n    ? bookings \n    : bookings.filter(booking => booking.status === filterStatus);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('ru-RU', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Заявки на запись</h1>\n          <p className=\"text-gray-600\">Управление заявками от клиентов</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Select value={filterStatus} onValueChange={setFilterStatus}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Фильтр по статусу\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Все заявки</SelectItem>\n              <SelectItem value=\"new\">Новые</SelectItem>\n              <SelectItem value=\"contacted\">Связались</SelectItem>\n              <SelectItem value=\"confirmed\">Подтвержденные</SelectItem>\n              <SelectItem value=\"completed\">Выполненные</SelectItem>\n              <SelectItem value=\"cancelled\">Отмененные</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {filteredBookings.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-8\">\n            <div className=\"text-center\">\n              <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900\">Заявки не найдены</h3>\n              <p className=\"text-gray-500\">\n                {filterStatus === 'all' \n                  ? 'Пока нет ни одной заявки на запись.' \n                  : 'Нет заявок с выбранным статусом.'}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {filteredBookings.map((booking) => {\n            const statusInfo = statusLabels[booking.status as keyof typeof statusLabels];\n            \n            return (\n              <Card key={booking.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div>\n                        <CardTitle className=\"text-lg\">\n                          {booking.firstName} {booking.lastName}\n                        </CardTitle>\n                        <CardDescription className=\"flex items-center space-x-2 mt-1\">\n                          <Building2 className=\"h-4 w-4\" />\n                          <span>{booking.clinic.name}</span>\n                        </CardDescription>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={statusInfo.color}>\n                        {statusInfo.label}\n                      </Badge>\n                      \n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedBooking(booking)}\n                          >\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            Детали\n                          </Button>\n                        </DialogTrigger>\n                        \n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle>Детали заявки</DialogTitle>\n                          </DialogHeader>\n                          \n                          {selectedBooking && (\n                            <div className=\"space-y-6\">\n                              {/* Client Info */}\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div className=\"space-y-2\">\n                                  <label className=\"text-sm font-medium text-gray-500\">Клиент</label>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <User className=\"h-4 w-4 text-gray-400\" />\n                                    <span>{selectedBooking.firstName} {selectedBooking.lastName}</span>\n                                  </div>\n                                </div>\n                                \n                                <div className=\"space-y-2\">\n                                  <label className=\"text-sm font-medium text-gray-500\">Клиника</label>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Building2 className=\"h-4 w-4 text-gray-400\" />\n                                    <span>{selectedBooking.clinic.name}</span>\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Contact Info */}\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div className=\"space-y-2\">\n                                  <label className=\"text-sm font-medium text-gray-500\">Телефон</label>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Phone className=\"h-4 w-4 text-gray-400\" />\n                                    <span>{selectedBooking.phone}</span>\n                                  </div>\n                                </div>\n                                \n                                {selectedBooking.email && (\n                                  <div className=\"space-y-2\">\n                                    <label className=\"text-sm font-medium text-gray-500\">Email</label>\n                                    <div className=\"flex items-center space-x-2\">\n                                      <Mail className=\"h-4 w-4 text-gray-400\" />\n                                      <span>{selectedBooking.email}</span>\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n\n                              {/* Appointment Info */}\n                              <div className=\"grid grid-cols-3 gap-4\">\n                                <div className=\"space-y-2\">\n                                  <label className=\"text-sm font-medium text-gray-500\">Услуга</label>\n                                  <div>{selectedBooking.service}</div>\n                                </div>\n                                \n                                <div className=\"space-y-2\">\n                                  <label className=\"text-sm font-medium text-gray-500\">Дата</label>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Calendar className=\"h-4 w-4 text-gray-400\" />\n                                    <span>{selectedBooking.preferredDate}</span>\n                                  </div>\n                                </div>\n                                \n                                <div className=\"space-y-2\">\n                                  <label className=\"text-sm font-medium text-gray-500\">Время</label>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Clock className=\"h-4 w-4 text-gray-400\" />\n                                    <span>{selectedBooking.preferredTime}</span>\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Notes */}\n                              {selectedBooking.notes && (\n                                <div className=\"space-y-2\">\n                                  <label className=\"text-sm font-medium text-gray-500\">Комментарии</label>\n                                  <div className=\"bg-gray-50 p-3 rounded-md\">\n                                    {selectedBooking.notes}\n                                  </div>\n                                </div>\n                              )}\n\n                              {/* Status and Actions */}\n                              <div className=\"flex items-center justify-between pt-4 border-t\">\n                                <div className=\"space-y-2\">\n                                  <label className=\"text-sm font-medium text-gray-500\">Статус</label>\n                                  <Select \n                                    value={selectedBooking.status} \n                                    onValueChange={(status) => {\n                                      updateStatusMutation.mutate({ \n                                        bookingId: selectedBooking.id, \n                                        status \n                                      });\n                                      setSelectedBooking({...selectedBooking, status});\n                                    }}\n                                  >\n                                    <SelectTrigger className=\"w-48\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"new\">Новая</SelectItem>\n                                      <SelectItem value=\"contacted\">Связались</SelectItem>\n                                      <SelectItem value=\"confirmed\">Подтверждена</SelectItem>\n                                      <SelectItem value=\"completed\">Выполнена</SelectItem>\n                                      <SelectItem value=\"cancelled\">Отменена</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                                \n                                <div className=\"text-sm text-gray-500\">\n                                  Создана: {formatDate(selectedBooking.createdAt)}\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"pt-0\">\n                  <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Phone className=\"h-4 w-4 text-gray-400\" />\n                      <span>{booking.phone}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Calendar className=\"h-4 w-4 text-gray-400\" />\n                      <span>{booking.preferredDate}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4 text-gray-400\" />\n                      <span>{booking.preferredTime}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-2 text-sm text-gray-600\">\n                    <strong>Услуга:</strong> {booking.service}\n                  </div>\n                  \n                  <div className=\"mt-2 text-xs text-gray-500\">\n                    Заявка создана: {formatDate(booking.createdAt)}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15100},"client/src/administrator/components/CitiesManagement.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { MapPin, Plus, Building2 } from 'lucide-react';\n\nexport function CitiesManagement() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Управление городами</h1>\n        <Button className=\"bg-green-600 hover:bg-green-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Добавить город\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Городов</p>\n                <p className=\"text-2xl font-bold text-gray-900\">8</p>\n              </div>\n              <MapPin className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Районов</p>\n                <p className=\"text-2xl font-bold text-gray-900\">10</p>\n              </div>\n              <Building2 className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Активных</p>\n                <p className=\"text-2xl font-bold text-gray-900\">8</p>\n              </div>\n              <MapPin className=\"h-8 w-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Список городов</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-gray-500\">\n            <MapPin className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>Функция в разработке</p>\n            <p className=\"text-sm\">Здесь будет управление городами и районами</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2554},"client/src/administrator/components/ClinicForm.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Slider } from '@/components/ui/slider';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, Upload, Plus, Trash2 } from 'lucide-react';\n\nconst clinicSchema = z.object({\n  name: z.string().min(2, 'Название должно содержать минимум 2 символа'),\n  cityId: z.string().min(1, 'Выберите город'),\n  address: z.string().optional(),\n  phone: z.string().optional(),\n  website: z.string().optional(),\n  bookingUrl: z.string().optional(),\n  languages: z.array(z.string()).default([]),\n  specializations: z.array(z.string()).default([]),\n  tags: z.array(z.string()).default([]),\n  verified: z.boolean().default(false),\n  cnam: z.boolean().default(false),\n  availToday: z.boolean().default(false),\n  availTomorrow: z.boolean().default(false),\n  priceIndex: z.number().min(0).max(100),\n  trustIndex: z.number().min(0).max(100),\n  reviewsIndex: z.number().min(0).max(100),\n  accessIndex: z.number().min(0).max(100),\n  recommended: z.boolean().default(false),\n  promotionalLabels: z.array(z.string()).default([]),\n  currency: z.string().default('MDL')\n});\n\ntype ClinicFormData = z.infer<typeof clinicSchema>;\n\ninterface ClinicFormProps {\n  clinic?: any;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport function ClinicForm({ clinic, onSuccess, onCancel }: ClinicFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [logoFile, setLogoFile] = useState<File | null>(null);\n  const [services, setServices] = useState<{name: string, price: number, currency: string}[]>([]);\n  const [newService, setNewService] = useState({ name: '', price: '', currency: 'MDL' });\n\n  // Initialize form first\n  const form = useForm<ClinicFormData>({\n    resolver: zodResolver(clinicSchema),\n    defaultValues: {\n      name: clinic?.name || '',\n      cityId: clinic?.cityId || '',\n      address: clinic?.address || '',\n      phone: clinic?.phone || '',\n      website: clinic?.website || '',\n      bookingUrl: clinic?.bookingUrl || '',\n      languages: clinic?.languages || [],\n      specializations: clinic?.specializations || [],\n      tags: clinic?.tags || [],\n      verified: clinic?.verified || false,\n      cnam: clinic?.cnam || false,\n      availToday: clinic?.availToday || false,\n      availTomorrow: clinic?.availTomorrow || false,\n      priceIndex: clinic?.priceIndex || 50,\n      trustIndex: clinic?.trustIndex || 50,\n      reviewsIndex: clinic?.reviewsIndex || 50,\n      accessIndex: clinic?.accessIndex || 50,\n      recommended: clinic?.recommended || false,\n      promotionalLabels: clinic?.promotionalLabels || [],\n      currency: clinic?.currency || 'MDL'\n    }\n  });\n\n  const { data: cities } = useQuery({\n    queryKey: ['/api/cities'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/cities');\n      return response.json();\n    }\n  });\n\n\n  // Load existing services\n  const { data: existingServices } = useQuery({\n    queryKey: ['/api/admin/clinics', clinic?.id, 'services'],\n    queryFn: async () => {\n      if (!clinic?.id) return [];\n      const response = await fetch(`/api/admin/clinics/${clinic.id}/services`);\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!clinic?.id\n  });\n\n  useEffect(() => {\n    if (existingServices) {\n      // Add currency field if missing (for backward compatibility)\n      const servicesWithCurrency = existingServices.map((service: any) => ({\n        ...service,\n        currency: service.currency || clinic?.currency || 'MDL'\n      }));\n      setServices(servicesWithCurrency);\n    }\n  }, [existingServices, clinic?.currency]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      // First create clinic\n      const response = await apiRequest('POST', '/api/admin/clinics', data);\n      const result = await response.json();\n      \n      // Then add services if any\n      if (services.length > 0 && result.id) {\n        await fetch(`/api/admin/clinics/${result.id}/services`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(services)\n        });\n      }\n      \n      return result;\n    },\n    onSuccess: () => {\n      // Invalidate all clinic-related queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/clinics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/clinics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/recent-clinics'] });\n      toast({\n        title: 'Клиника создана',\n        description: 'Клиника была успешно добавлена в систему'\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Ошибка',\n        description: error.message || 'Не удалось создать клинику',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      if (!clinic?.id) throw new Error('No clinic ID');\n      \n      // First update clinic data\n      const response = await apiRequest('PUT', `/api/admin/clinics/${clinic.id}`, data);\n      const result = await response.json();\n      \n      // Then update services\n      await fetch(`/api/admin/clinics/${clinic.id}/services`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(services)\n      });\n      \n      return result;\n    },\n    onSuccess: () => {\n      // Invalidate all clinic-related queries to refresh frontend data\n      queryClient.invalidateQueries({ queryKey: ['/api/clinics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/clinics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/recent-clinics'] });\n      if (clinic?.slug) {\n        queryClient.invalidateQueries({ queryKey: ['/api/clinics', clinic.slug] });\n      }\n      // Clear all cache to ensure fresh data\n      queryClient.clear();\n      toast({\n        title: 'Клиника обновлена',\n        description: 'Изменения были успешно сохранены'\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Ошибка',\n        description: error.message || 'Не удалось обновить клинику',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const onSubmit = (data: ClinicFormData) => {\n    const formData = new FormData();\n    \n    // Add all form fields\n    Object.entries(data).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        formData.append(key, JSON.stringify(value));\n      } else {\n        formData.append(key, String(value));\n      }\n    });\n\n    // Add logo file if selected\n    if (logoFile) {\n      formData.append('logo', logoFile);\n    }\n\n    if (clinic) {\n      updateMutation.mutate(formData);\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  const specializations = [\n    'implants', 'veneers', 'hygiene', 'endo', 'ortho', 'kids'\n  ];\n\n  const languages = ['ru', 'ro', 'en'];\n\n  const promotionalLabels = [\n    { value: 'top', label: 'ТОП', className: 'bg-yellow-500 text-white' },\n    { value: 'high_rating', label: 'Высокий рейтинг', className: 'bg-green-500 text-white' },\n    { value: 'premium', label: 'Премиум', className: 'bg-purple-500 text-white' },\n    { value: 'verified_plus', label: 'Верифицирован+', className: 'bg-blue-500 text-white' },\n    { value: 'popular', label: 'Популярное', className: 'bg-red-500 text-white' },\n    { value: 'new', label: 'Новое', className: 'bg-orange-500 text-white' },\n    { value: 'discount', label: 'Скидки', className: 'bg-pink-500 text-white' },\n    { value: 'fast_service', label: 'Быстро', className: 'bg-teal-500 text-white' }\n  ];\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Basic Info */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Основная информация</h3>\n          \n          <div>\n            <Label htmlFor=\"name\">Название клиники *</Label>\n            <Input\n              id=\"name\"\n              {...form.register('name')}\n              placeholder=\"Dental Clinic\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.name.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"cityId\">Город *</Label>\n            <Select\n              value={form.watch('cityId')}\n              onValueChange={(value) => form.setValue('cityId', value)}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Выберите город\" />\n              </SelectTrigger>\n              <SelectContent>\n                {cities?.map((city: any) => (\n                  <SelectItem key={city.id} value={city.id}>\n                    {city.nameRu}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Currency Selection */}\n          <div>\n            <Label htmlFor=\"currency\">Валюта цен</Label>\n            <Select\n              value={form.watch('currency')}\n              onValueChange={(value) => {\n                form.setValue('currency', value);\n                // Update currency for all existing services\n                setServices(services.map(s => ({...s, currency: value})));\n                setNewService({...newService, currency: value});\n              }}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Выберите валюту\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"MDL\">MDL (лей)</SelectItem>\n                <SelectItem value=\"EUR\">EUR (евро)</SelectItem>\n                <SelectItem value=\"USD\">USD (доллар)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"address\">Адрес</Label>\n            <Input\n              id=\"address\"\n              {...form.register('address')}\n              placeholder=\"ул. Штефан чел Маре, 100\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"phone\">Телефон</Label>\n            <Input\n              id=\"phone\"\n              {...form.register('phone')}\n              placeholder=\"+373 22 000 000\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"website\">Веб-сайт</Label>\n            <Input\n              id=\"website\"\n              {...form.register('website')}\n              placeholder=\"https://clinic.md\"\n            />\n          </div>\n        </div>\n\n        {/* Settings */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Настройки и рейтинги</h3>\n\n          {/* Logo Upload */}\n          <div>\n            <Label>Логотип клиники</Label>\n            <div className=\"mt-2 space-y-3\">\n              {/* Current Logo Display */}\n              {clinic?.logoUrl && !logoFile && (\n                <div className=\"relative\">\n                  <img \n                    src={clinic.logoUrl} \n                    alt=\"Current logo\" \n                    className=\"w-32 h-32 object-cover rounded-lg border\"\n                  />\n                  <p className=\"text-sm text-gray-600 mt-1\">Текущий логотип</p>\n                </div>\n              )}\n              \n              {/* File Upload */}\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={(e) => setLogoFile(e.target.files?.[0] || null)}\n                className=\"hidden\"\n                id=\"logo-upload\"\n              />\n              <label\n                htmlFor=\"logo-upload\"\n                className=\"flex items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-gray-400\"\n              >\n                <div className=\"text-center\">\n                  <Upload className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                  <p className=\"text-sm text-gray-600\">\n                    {logoFile ? \n                      `Выбран новый файл: ${logoFile.name}` : \n                      clinic?.logoUrl ? 'Выберите новый логотип' : 'Выберите файл изображения'\n                    }\n                  </p>\n                </div>\n              </label>\n              \n              {logoFile && (\n                <div className=\"mt-2\">\n                  <p className=\"text-sm text-green-600\">Новый логотип будет загружен при сохранении</p>\n                  <button\n                    type=\"button\"\n                    onClick={() => setLogoFile(null)}\n                    className=\"text-sm text-red-600 hover:text-red-800\"\n                  >\n                    Отменить выбор файла\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Checkboxes */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"verified\"\n                checked={form.watch('verified')}\n                onCheckedChange={(checked) => form.setValue('verified', !!checked)}\n              />\n              <Label htmlFor=\"verified\">Верифицирована</Label>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"cnam\"\n                checked={form.watch('cnam')}\n                onCheckedChange={(checked) => form.setValue('cnam', !!checked)}\n              />\n              <Label htmlFor=\"cnam\">CNAM</Label>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"availToday\"\n                checked={form.watch('availToday')}\n                onCheckedChange={(checked) => form.setValue('availToday', !!checked)}\n              />\n              <Label htmlFor=\"availToday\">Доступно сегодня</Label>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"recommended\"\n                checked={form.watch('recommended')}\n                onCheckedChange={(checked) => form.setValue('recommended', !!checked)}\n              />\n              <Label htmlFor=\"recommended\">🔥 Рекомендуем (приоритетное размещение)</Label>\n            </div>\n          </div>\n\n          {/* Rating Sliders */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Ценовой индекс: {form.watch('priceIndex')}</Label>\n              <Slider\n                value={[form.watch('priceIndex')]}\n                onValueChange={(value) => form.setValue('priceIndex', value[0])}\n                max={100}\n                step={1}\n                className=\"mt-2\"\n              />\n            </div>\n            \n            <div>\n              <Label>Индекс доверия: {form.watch('trustIndex')}</Label>\n              <Slider\n                value={[form.watch('trustIndex')]}\n                onValueChange={(value) => form.setValue('trustIndex', value[0])}\n                max={100}\n                step={1}\n                className=\"mt-2\"\n              />\n            </div>\n            \n            <div>\n              <Label>Индекс отзывов: {form.watch('reviewsIndex')}</Label>\n              <Slider\n                value={[form.watch('reviewsIndex')]}\n                onValueChange={(value) => form.setValue('reviewsIndex', value[0])}\n                max={100}\n                step={1}\n                className=\"mt-2\"\n              />\n            </div>\n            \n            <div>\n              <Label>Индекс доступности: {form.watch('accessIndex')}</Label>\n              <Slider\n                value={[form.watch('accessIndex')]}\n                onValueChange={(value) => form.setValue('accessIndex', value[0])}\n                max={100}\n                step={1}\n                className=\"mt-2\"\n              />\n            </div>\n            \n            {/* Promotional Labels */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-base font-medium\">Рекламные лейблы</Label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {promotionalLabels.map((label) => (\n                  <div key={label.value} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`label-${label.value}`}\n                      checked={form.watch('promotionalLabels').includes(label.value)}\n                      onCheckedChange={(checked) => {\n                        const currentLabels = form.watch('promotionalLabels');\n                        if (checked) {\n                          form.setValue('promotionalLabels', [...currentLabels, label.value]);\n                        } else {\n                          form.setValue('promotionalLabels', currentLabels.filter(l => l !== label.value));\n                        }\n                      }}\n                    />\n                    <Label htmlFor={`label-${label.value}`} className=\"text-sm\">\n                      <span className={`px-2 py-1 rounded-md text-xs font-medium ${label.className}`}>\n                        {label.label}\n                      </span>\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n\n      {/* Services Management - Full Width */}\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Услуги и цены</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Service List */}\n          <div className=\"space-y-3\">\n            {services.map((service, index) => (\n              <div key={index} className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"flex-1\">\n                  <span className=\"font-medium text-lg\">{service.name}</span>\n                </div>\n                <div className=\"text-base text-gray-700 font-semibold min-w-[120px] text-right\">\n                  {service.price} {service.currency === 'MDL' ? 'лей' : service.currency}\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    const updatedServices = services.filter((_, i) => i !== index);\n                    setServices(updatedServices);\n                  }}\n                  className=\"flex-shrink-0\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n\n          {/* Add New Service */}\n          <div className=\"border-t pt-6\">\n            <Label className=\"text-lg font-medium mb-4 block\">Добавить услугу</Label>\n            <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-4\">\n              <div className=\"lg:col-span-7\">\n                <Input\n                  placeholder=\"Название услуги (например: Имплант стандарт)\"\n                  value={newService.name}\n                  onChange={(e) => setNewService({...newService, name: e.target.value})}\n                  className=\"text-base\"\n                />\n              </div>\n              <div className=\"lg:col-span-3\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Цена\"\n                    value={newService.price}\n                    onChange={(e) => setNewService({...newService, price: e.target.value})}\n                    className=\"text-base flex-1\"\n                  />\n                  <div className=\"text-sm text-gray-500 flex items-center px-3 bg-gray-100 rounded border min-w-[60px] justify-center\">\n                    {form.watch('currency') === 'MDL' ? 'лей' : form.watch('currency')}\n                  </div>\n                </div>\n              </div>\n              <div className=\"lg:col-span-2\">\n                <Button\n                  type=\"button\"\n                  onClick={() => {\n                    if (newService.name && newService.price) {\n                      setServices([...services, {\n                        name: newService.name,\n                        price: parseInt(newService.price),\n                        currency: form.watch('currency')\n                      }]);\n                      setNewService({ name: '', price: '', currency: form.watch('currency') });\n                    }\n                  }}\n                  disabled={!newService.name || !newService.price}\n                  className=\"w-full\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Добавить\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Service Templates */}\n          <div className=\"border-t pt-6\">\n            <Label className=\"text-lg font-medium mb-4 block\">Быстрые шаблоны услуг</Label>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3\">\n              {[\n                'Консультация стоматолога',\n                'Профгигиена', \n                'Лечение кариеса',\n                'Имплант стандарт',\n                'Коронка керамика',\n                'Лечение каналов',\n                'Удаление зуба',\n                'Отбеливание',\n                'Виниры',\n                'Брекеты',\n                'Протезирование',\n                'Лечение десен'\n              ].map((templateName, index) => (\n                <Button\n                  key={index}\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    if (!services.find(s => s.name === templateName)) {\n                      setNewService({...newService, name: templateName, currency: form.watch('currency')});\n                    }\n                  }}\n                  disabled={!!services.find(s => s.name === templateName)}\n                  className=\"text-sm justify-start\"\n                >\n                  {templateName}\n                </Button>\n              ))}\n            </div>\n            <p className=\"text-sm text-gray-500 mt-3\">\n              Нажмите на шаблон, чтобы добавить название в поле выше, затем укажите цену\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-end space-x-4 pt-4 border-t border-gray-200\">\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n          Отмена\n        </Button>\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n          {clinic ? 'Сохранить изменения' : 'Создать клинику'}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":24803},"client/src/administrator/components/ClinicsManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye, \n  MapPin, \n  Phone,\n  Globe,\n  Star,\n  Award,\n  Clock\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { ClinicForm } from './ClinicForm';\n\ninterface Clinic {\n  id: string;\n  slug: string;\n  name: string;\n  logoUrl?: string;\n  city: { nameRu: string; nameRo: string };\n  district?: { nameRu: string; nameRo: string };\n  address?: string;\n  phone?: string;\n  website?: string;\n  verified: boolean;\n  cnam: boolean;\n  availToday: boolean;\n  dScore: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport function ClinicsManagement() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingClinic, setEditingClinic] = useState<Clinic | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: clinicsData, isLoading } = useQuery({\n    queryKey: ['/api/admin/clinics', { q: searchQuery }],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/admin/clinics?q=${searchQuery}`);\n      return response.json();\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/admin/clinics/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/clinics'] });\n      toast({\n        title: 'Клиника удалена',\n        description: 'Клиника была успешно удалена из системы'\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Ошибка',\n        description: 'Не удалось удалить клинику',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const handleDelete = (clinic: Clinic) => {\n    if (window.confirm(`Вы уверены, что хотите удалить клинику \"${clinic.name}\"?`)) {\n      deleteMutation.mutate(clinic.id);\n    }\n  };\n\n  const clinics = clinicsData?.clinics || [];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Управление клиниками</h1>\n        <Button \n          onClick={() => setIsCreateModalOpen(true)}\n          className=\"bg-blue-600 hover:bg-blue-700\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Добавить клинику\n        </Button>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex space-x-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Поиск клиник...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Clinics List */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {isLoading ? (\n          [...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : clinics.length === 0 ? (\n          <div className=\"col-span-full text-center py-12\">\n            <div className=\"text-gray-400 mb-4\">\n              <Search className=\"h-12 w-12 mx-auto\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {searchQuery ? 'Клиники не найдены' : 'Нет клиник'}\n            </h3>\n            <p className=\"text-gray-600\">\n              {searchQuery \n                ? 'Попробуйте изменить поисковый запрос'\n                : 'Добавьте первую клинику в систему'\n              }\n            </p>\n          </div>\n        ) : (\n          clinics.map((clinic: Clinic) => (\n            <Card key={clinic.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1 min-w-0\">\n                    <CardTitle className=\"text-lg font-bold text-gray-900 truncate\">\n                      {clinic.name}\n                    </CardTitle>\n                    <div className=\"flex items-center text-sm text-gray-600 mt-1\">\n                      <MapPin className=\"h-3 w-3 mr-1\" />\n                      {clinic.city.nameRu}\n                      {clinic.district && `, ${clinic.district.nameRu}`}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    {clinic.verified && (\n                      <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                        <Award className=\"h-3 w-3 mr-1\" />\n                        Verified\n                      </Badge>\n                    )}\n                    {clinic.cnam && (\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                        CNAM\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-3\">\n                  {/* D-Score */}\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-gray-700\">D-Score</span>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-20 bg-gray-200 rounded-full h-2 mr-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full transition-all\"\n                          style={{ width: `${clinic.dScore}%` }}\n                        ></div>\n                      </div>\n                      <span className=\"text-sm font-bold\">{clinic.dScore}</span>\n                    </div>\n                  </div>\n\n                  {/* Contact Info */}\n                  <div className=\"space-y-2 text-sm\">\n                    {clinic.phone && (\n                      <div className=\"flex items-center text-gray-600\">\n                        <Phone className=\"h-3 w-3 mr-2\" />\n                        {clinic.phone}\n                      </div>\n                    )}\n                    {clinic.website && (\n                      <div className=\"flex items-center text-gray-600\">\n                        <Globe className=\"h-3 w-3 mr-2\" />\n                        <span className=\"truncate\">{clinic.website}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Status */}\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <div className=\"flex items-center\">\n                      {clinic.availToday ? (\n                        <span className=\"text-green-600 flex items-center\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          Доступно сегодня\n                        </span>\n                      ) : (\n                        <span className=\"text-gray-500 flex items-center\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          Недоступно\n                        </span>\n                      )}\n                    </div>\n                    <span className=\"text-gray-500\">\n                      {new Date(clinic.createdAt).toLocaleDateString('ru-RU')}\n                    </span>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex space-x-2 pt-2 border-t border-gray-100\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      onClick={() => window.open(`/clinic/${clinic.slug}`, '_blank')}\n                    >\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      Просмотр\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => setEditingClinic(clinic)}\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      onClick={() => handleDelete(clinic)}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Create Modal */}\n      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Добавить новую клинику</DialogTitle>\n          </DialogHeader>\n          <ClinicForm\n            onSuccess={() => {\n              setIsCreateModalOpen(false);\n              queryClient.invalidateQueries({ queryKey: ['/api/admin/clinics'] });\n            }}\n            onCancel={() => setIsCreateModalOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Modal */}\n      <Dialog open={!!editingClinic} onOpenChange={() => setEditingClinic(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Редактировать клинику</DialogTitle>\n          </DialogHeader>\n          {editingClinic && (\n            <ClinicForm\n              clinic={editingClinic}\n              onSuccess={() => {\n                setEditingClinic(null);\n                queryClient.invalidateQueries({ queryKey: ['/api/admin/clinics'] });\n              }}\n              onCancel={() => setEditingClinic(null)}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":11183},"client/src/administrator/components/Dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Building2, MapPin, Package, TrendingUp, Users, Eye, Star, DollarSign } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface Stats {\n  totalClinics: number;\n  totalCities: number;\n  totalPackages: number;\n  averageDScore: number;\n}\n\ninterface ViewStats {\n  views: number;\n}\n\ninterface DashboardProps {\n  onNavigate?: (page: string) => void;\n}\n\nexport function Dashboard({ onNavigate }: DashboardProps = {}) {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/stats');\n      return response.json();\n    }\n  });\n\n  const { data: recentClinics } = useQuery({\n    queryKey: ['/api/admin/recent-clinics'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/recent-clinics');\n      return response.json();\n    }\n  });\n\n  const { data: todayViews } = useQuery({\n    queryKey: ['/api/admin/today-views'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/today-views');\n      return response.json();\n    }\n  });\n\n  const statsCards = [\n    {\n      title: 'Всего клиник',\n      value: stats?.totalClinics || 0,\n      icon: Building2,\n      color: 'bg-blue-500',\n      change: '+2 за неделю',\n      clickable: true,\n      onClick: () => onNavigate?.('clinics')\n    },\n    {\n      title: 'Городов',\n      value: stats?.totalCities || 0,\n      icon: MapPin,\n      color: 'bg-green-500',\n      change: 'стабильно'\n    },\n    {\n      title: 'Пакетов услуг',\n      value: stats?.totalPackages || 0,\n      icon: Package,\n      color: 'bg-purple-500',\n      change: '+8 за месяц'\n    },\n    {\n      title: 'Средний D-Score',\n      value: stats?.averageDScore || 0,\n      icon: TrendingUp,\n      color: 'bg-orange-500',\n      change: '+3.2%',\n      suffix: '/100'\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Панель управления</h1>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Панель управления</h1>\n        <div className=\"text-sm text-gray-500\">\n          Обновлено: {new Date().toLocaleString('ru-RU')}\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statsCards.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <Card \n              key={index} \n              className={`relative overflow-hidden ${\n                stat.clickable ? 'cursor-pointer hover:shadow-lg transition-shadow' : ''\n              }`}\n              onClick={stat.onClick}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {stat.value}{stat.suffix || ''}\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">{stat.change}</p>\n                  </div>\n                  <div className={`p-3 rounded-lg ${stat.color}`}>\n                    <Icon className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Building2 className=\"h-5 w-5 mr-2\" />\n              Последние добавленные клиники\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentClinics?.slice(0, 5).map((clinic: any) => (\n                <div \n                  key={clinic.id} \n                  className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 transition-colors\"\n                  onClick={() => onNavigate?.('clinics')}\n                >\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">{clinic.name}</h4>\n                    <p className=\"text-sm text-gray-600\">{clinic.city?.nameRu}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium text-green-600\">\n                      D-Score: {clinic.dScore}\n                    </div>\n                    <div className=\"text-xs text-gray-500\">\n                      {new Date(clinic.createdAt).toLocaleDateString('ru-RU')}\n                    </div>\n                  </div>\n                </div>\n              )) || (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <Building2 className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                  <p>Пока нет добавленных клиник</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <TrendingUp className=\"h-5 w-5 mr-2\" />\n              Статистика производительности\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center p-3 bg-blue-50 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <Eye className=\"h-4 w-4 mr-2 text-blue-600\" />\n                  <span className=\"text-sm font-medium\">Уникальные просмотры сегодня</span>\n                </div>\n                <span className=\"text-lg font-bold text-blue-600\">\n                  {todayViews?.views || 0}\n                </span>\n              </div>\n              \n              <div className=\"flex justify-between items-center p-3 bg-green-50 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <Star className=\"h-4 w-4 mr-2 text-green-600\" />\n                  <span className=\"text-sm font-medium\">Средний рейтинг</span>\n                </div>\n                <span className=\"text-lg font-bold text-green-600\">4.6</span>\n              </div>\n              \n              <div className=\"flex justify-between items-center p-3 bg-purple-50 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <Users className=\"h-4 w-4 mr-2 text-purple-600\" />\n                  <span className=\"text-sm font-medium\">Активные клиники</span>\n                </div>\n                <span className=\"text-lg font-bold text-purple-600\">{stats?.totalClinics || 0}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7770},"client/src/administrator/components/PackagesManagement.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Package, Plus, DollarSign, TrendingUp } from 'lucide-react';\n\nexport function PackagesManagement() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Управление пакетами услуг</h1>\n        <Button className=\"bg-purple-600 hover:bg-purple-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Добавить пакет\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Всего пакетов</p>\n                <p className=\"text-2xl font-bold text-gray-900\">60</p>\n              </div>\n              <Package className=\"h-8 w-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Средняя цена</p>\n                <p className=\"text-2xl font-bold text-gray-900\">2,850 лей</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Популярный пакет</p>\n                <p className=\"text-sm font-bold text-gray-900\">Профгигиена</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Список пакетов услуг</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-gray-500\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>Функция в разработке</p>\n            <p className=\"text-sm\">Здесь будет управление пакетами услуг</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2658},"client/src/administrator/components/Settings.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Globe, FileText, Search } from 'lucide-react';\n\nconst seoSettingsSchema = z.object({\n  siteTitle: z.string().min(1, 'Название сайта обязательно'),\n  metaDescription: z.string().min(1, 'Описание сайта обязательно'),\n  robotsTxt: z.string().optional(),\n});\n\ntype SEOSettingsData = z.infer<typeof seoSettingsSchema>;\n\nexport function Settings() {\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n\n  const form = useForm<SEOSettingsData>({\n    resolver: zodResolver(seoSettingsSchema),\n    defaultValues: {\n      siteTitle: '',\n      metaDescription: '',\n      robotsTxt: 'User-agent: *\\nDisallow: /admin\\nDisallow: /api\\n\\nSitemap: https://dentmoldova.md/sitemap.xml',\n    }\n  });\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      const settings = await apiRequest('GET', '/api/admin/settings');\n      \n      // Convert array of settings to object\n      const settingsMap = settings.reduce((acc: any, setting: any) => {\n        acc[setting.key] = setting.value;\n        return acc;\n      }, {});\n\n      form.reset({\n        siteTitle: settingsMap.siteTitle || 'Dent Moldova - Каталог стоматологических клиник',\n        metaDescription: settingsMap.metaDescription || 'Найдите лучшую стоматологическую клинику в Молдове. Каталог проверенных клиник с ценами, отзывами и рейтингами.',\n        robotsTxt: settingsMap.robotsTxt || 'User-agent: *\\nDisallow: /admin\\nDisallow: /api\\n\\nSitemap: https://dentmoldova.md/sitemap.xml',\n      });\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n\n  const onSubmit = async (data: SEOSettingsData) => {\n    setLoading(true);\n    try {\n      await apiRequest('POST', '/api/admin/settings', data);\n      toast({\n        title: 'Настройки сохранены',\n        description: 'SEO настройки успешно обновлены.',\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Ошибка',\n        description: error.message || 'Не удалось сохранить настройки.',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (initialLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <Globe className=\"h-6 w-6 text-blue-600\" />\n        <h1 className=\"text-2xl font-bold text-gray-900\">Настройки</h1>\n      </div>\n\n      <Tabs defaultValue=\"seo\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"seo\" className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4\" />\n            <span>SEO</span>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"seo\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Search className=\"h-5 w-5\" />\n                <span>Настройки SEO</span>\n              </CardTitle>\n              <CardDescription>\n                Управление метатегами, описанием сайта и поисковой оптимизацией\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Site Title */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"siteTitle\">Название сайта (Title)</Label>\n                  <Input\n                    id=\"siteTitle\"\n                    {...form.register('siteTitle')}\n                    placeholder=\"Dent Moldova - Каталог стоматологических клиник\"\n                    disabled={loading}\n                  />\n                  {form.formState.errors.siteTitle && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.siteTitle.message}</p>\n                  )}\n                  <p className=\"text-xs text-gray-500\">\n                    Отображается в заголовке браузера и результатах поиска\n                  </p>\n                </div>\n\n                {/* Meta Description */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"metaDescription\">Описание сайта (Meta Description)</Label>\n                  <Textarea\n                    id=\"metaDescription\"\n                    {...form.register('metaDescription')}\n                    placeholder=\"Найдите лучшую стоматологическую клинику в Молдове...\"\n                    rows={3}\n                    disabled={loading}\n                    className=\"resize-none\"\n                  />\n                  {form.formState.errors.metaDescription && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.metaDescription.message}</p>\n                  )}\n                  <p className=\"text-xs text-gray-500\">\n                    Описание сайта для поисковых систем (160-320 символов)\n                  </p>\n                </div>\n\n                {/* Robots.txt */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"robotsTxt\" className=\"flex items-center space-x-2\">\n                    <FileText className=\"h-4 w-4\" />\n                    <span>Содержимое robots.txt</span>\n                  </Label>\n                  <Textarea\n                    id=\"robotsTxt\"\n                    {...form.register('robotsTxt')}\n                    placeholder=\"User-agent: *&#10;Disallow: /admin\"\n                    rows={6}\n                    disabled={loading}\n                    className=\"resize-none font-mono text-sm\"\n                  />\n                  <p className=\"text-xs text-gray-500\">\n                    Инструкции для поисковых роботов (создается файл в корне сайта)\n                  </p>\n                </div>\n\n                {/* Preview */}\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Предварительный просмотр в Google</h3>\n                  <div className=\"space-y-1\">\n                    <div className=\"text-lg text-blue-600 hover:underline cursor-pointer\">\n                      {form.watch('siteTitle') || 'Dent Moldova - Каталог стоматологических клиник'}\n                    </div>\n                    <div className=\"text-green-700 text-sm\">https://dentmoldova.md</div>\n                    <div className=\"text-gray-600 text-sm\">\n                      {form.watch('metaDescription') || 'Найдите лучшую стоматологическую клинику в Молдове...'}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Submit Button */}\n                <Button\n                  type=\"submit\"\n                  disabled={loading}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                >\n                  {loading ? 'Сохранение...' : 'Сохранить настройки'}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":8533},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/clinic/[slug].tsx":{"content":"import { useParams } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { ArrowLeft } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { ClinicDetail } from '../../components/ClinicDetail';\nimport { Button } from '@/components/ui/button';\n\nexport default function ClinicPage() {\n  const { slug } = useParams();\n  const [, setLocation] = useLocation();\n\n  const { data: clinic, isLoading, error } = useQuery({\n    queryKey: ['/api/clinics', slug],\n    enabled: !!slug,\n  });\n\n  const handleBookClick = (clinic: any) => {\n    console.log('Book appointment for:', clinic.name);\n    alert(`Запись в ${clinic.name} будет доступна в полной версии приложения`);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Загрузка информации о клинике...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !clinic) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Клиника не найдена</h1>\n          <Button onClick={() => setLocation('/')} className=\"flex items-center space-x-2\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span>Вернуться к каталогу</span>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Button \n          onClick={() => setLocation('/')} \n          variant=\"outline\"\n          className=\"mb-6 flex items-center space-x-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          <span>Вернуться к каталогу</span>\n        </Button>\n\n        <ClinicDetail\n          clinic={clinic}\n          open={true}\n          onClose={() => setLocation('/')}\n          onBookClick={handleBookClick}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":2268}}}