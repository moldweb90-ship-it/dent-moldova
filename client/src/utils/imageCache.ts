// –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
interface CacheEntry {
  data: string; // base64 –∏–ª–∏ blob URL
  timestamp: number;
  expiresAt: number;
  size: number;
}

interface CacheStats {
  totalSize: number;
  entryCount: number;
  hitRate: number;
  hits: number;
  misses: number;
}

class ImageCache {
  private memoryCache = new Map<string, CacheEntry>();
    private readonly MAX_MEMORY_SIZE = 200 * 1024 * 1024; // 200MB
    private readonly MAX_ENTRIES = 500;
    private readonly CACHE_DURATION = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞
  private readonly CLEANUP_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  private stats: CacheStats = {
    totalSize: 0,
    entryCount: 0,
    hitRate: 0,
    hits: 0,
    misses: 0
  };

  constructor() {
    this.loadFromLocalStorage();
    this.startCleanupTimer();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  private loadFromLocalStorage() {
    try {
      const cached = localStorage.getItem('imageCache');
      if (cached) {
        const data = JSON.parse(cached);
        const now = Date.now();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏
        Object.entries(data).forEach(([key, entry]: [string, any]) => {
          if (entry.expiresAt > now) {
            this.memoryCache.set(key, entry);
            this.stats.totalSize += entry.size;
            this.stats.entryCount++;
          }
        });
        
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${this.stats.entryCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–µ—à–∞`);
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –≤ localStorage
  private saveToLocalStorage() {
    try {
      const data: Record<string, CacheEntry> = {};
      this.memoryCache.forEach((entry, key) => {
        data[key] = entry;
      });
      localStorage.setItem('imageCache', JSON.stringify(data));
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞
  async get(src: string): Promise<string | null> {
    const entry = this.memoryCache.get(src);
    
    if (entry) {
      if (entry.expiresAt > Date.now()) {
        this.stats.hits++;
        this.updateHitRate();
        return entry.data;
      } else {
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é –∑–∞–ø–∏—Å—å
        this.memoryCache.delete(src);
        this.stats.totalSize -= entry.size;
        this.stats.entryCount--;
      }
    }
    
    this.stats.misses++;
    this.updateHitRate();
    return null;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–µ—à
  async set(src: string, data: string): Promise<void> {
    const size = this.estimateSize(data);
    const now = Date.now();
    
    const entry: CacheEntry = {
      data,
      timestamp: now,
      expiresAt: now + this.CACHE_DURATION,
      size
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    this.enforceLimits(size);
    
    this.memoryCache.set(src, entry);
    this.stats.totalSize += size;
    this.stats.entryCount++;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveToLocalStorage();
    
    console.log(`üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à: ${src.substring(0, 50)}... (${this.formatSize(size)})`);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async loadImage(src: string): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = await this.get(src);
    if (cached) {
      return cached;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try {
      const response = await fetch(src);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const blob = await response.blob();
      const dataUrl = await this.blobToDataUrl(blob);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      await this.set(src, dataUrl);
      
      return dataUrl;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
  private cleanup() {
    const now = Date.now();
    let cleaned = 0;
    
    for (const [key, entry] of this.memoryCache.entries()) {
      if (entry.expiresAt <= now) {
        this.memoryCache.delete(key);
        this.stats.totalSize -= entry.size;
        this.stats.entryCount--;
        cleaned++;
      }
    }
    
    if (cleaned > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞`);
      this.saveToLocalStorage();
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
  private enforceLimits(newEntrySize: number) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞
    while (this.stats.totalSize + newEntrySize > this.MAX_MEMORY_SIZE && this.memoryCache.size > 0) {
      const oldestKey = this.memoryCache.keys().next().value;
      const oldestEntry = this.memoryCache.get(oldestKey);
      if (oldestEntry) {
        this.memoryCache.delete(oldestKey);
        this.stats.totalSize -= oldestEntry.size;
        this.stats.entryCount--;
      }
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    while (this.memoryCache.size >= this.MAX_ENTRIES) {
      const oldestKey = this.memoryCache.keys().next().value;
      const oldestEntry = this.memoryCache.get(oldestKey);
      if (oldestEntry) {
        this.memoryCache.delete(oldestKey);
        this.stats.totalSize -= oldestEntry.size;
        this.stats.entryCount--;
      }
    }
  }

  // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
  private startCleanupTimer() {
    setInterval(() => {
      this.cleanup();
    }, this.CLEANUP_INTERVAL);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private estimateSize(data: string): number {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ base64 –¥–∞–Ω–Ω—ã—Ö
    return Math.round(data.length * 0.75);
  }

  private formatSize(bytes: number): string {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  }

  private async blobToDataUrl(blob: Blob): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }

  private updateHitRate() {
    const total = this.stats.hits + this.stats.misses;
    this.stats.hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  getStats(): CacheStats {
    return { ...this.stats };
  }

  clear(): void {
    this.memoryCache.clear();
    this.stats = {
      totalSize: 0,
      entryCount: 0,
      hitRate: 0,
      hits: 0,
      misses: 0
    };
    localStorage.removeItem('imageCache');
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async preloadImages(urls: string[]): Promise<void> {
    const promises = urls.map(async (url) => {
      try {
        await this.loadImage(url);
      } catch (error) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${url}`, error);
      }
    });
    
    await Promise.allSettled(promises);
    console.log(`üöÄ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${urls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à–∞
export const imageCache = new ImageCache();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { CacheStats };
