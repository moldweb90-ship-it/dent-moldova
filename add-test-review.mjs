import Database from 'better-sqlite3';

async function addTestReview() {
  try {
    console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤...');
    
    const sqlite = new Database('dev.db');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–ª–∏–Ω–∏–∫—É
    const clinic = sqlite.prepare('SELECT id, name_ru FROM clinics LIMIT 1').get();
    
    if (!clinic) {
      console.log('‚ùå –ö–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      sqlite.close();
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–∞ –∫–ª–∏–Ω–∏–∫–∞: ${clinic.name_ru} (ID: ${clinic.id})`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
    const reviewId = 'test-review-' + Date.now();
    const now = new Date().toISOString();
    
    const insertQuery = `
      INSERT INTO reviews (
        id, clinic_id, author_name, author_email, quality_rating, 
        service_rating, comfort_rating, price_rating, average_rating, 
        comment, status, ip_address, user_agent, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;
    
    sqlite.prepare(insertQuery).run(
      reviewId,
      clinic.id,
      'Test User',
      'test@example.com',
      4.5,
      4.0,
      3.5,
      4.0,
      4.0,
      '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
      'pending',
      '127.0.0.1',
      'Test Script',
      now,
      now
    );
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    const count = sqlite.prepare('SELECT COUNT(*) as count FROM reviews').get();
    console.log(`üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤ –≤ –±–∞–∑–µ: ${count.count}`);
    
    sqlite.close();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
  }
}

addTestReview();
