const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
function createTimeRequest(url, description) {
  return new Promise((resolve, reject) => {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç–∞
    const clientTime = new Date().toISOString();
    const clientTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const clientTimezoneOffset = new Date().getTimezoneOffset();
    
    const fullUrl = `${url}&clientTime=${encodeURIComponent(clientTime)}&clientTimezone=${encodeURIComponent(clientTimezone)}&clientTimezoneOffset=${clientTimezoneOffset}`;
    
    console.log(`\nüïê ${description}`);
    console.log(`   Client time: ${clientTime}`);
    console.log(`   Client timezone: ${clientTimezone}`);
    console.log(`   Client timezone offset: ${clientTimezoneOffset} minutes`);
    console.log(`   Request URL: ${fullUrl}`);
    
    const req = http.get(fullUrl, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          console.log(`   ‚úÖ Response: ${result.clinics.length} clinics found`);
          resolve(result);
        } catch (error) {
          console.error(`   ‚ùå Parse error: ${error.message}`);
          reject(error);
        }
      });
    });

    req.on('error', (error) => {
      console.error(`   ‚ùå Request error: ${error.message}`);
      reject(error);
    });

    req.setTimeout(10000, () => {
      console.error(`   ‚ùå Timeout`);
      req.destroy();
      reject(new Error('Timeout'));
    });
  });
}

async function checkTimeIssues() {
  console.log('üîç Checking time-related issues...');
  
  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–æ–¥–∞–∫—à–Ω URL
  const PROD_URL = 'https://clinici.md'; // –∏–ª–∏ –≤–∞—à –¥–æ–º–µ–Ω
  
  try {
    // –¢–µ—Å—Ç 1: –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    console.log('\nüìç LOCAL SERVER:');
    await createTimeRequest('http://localhost:5000/api/clinics?openNow=true&limit=3', 'Local server test');
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä
    console.log('\nüìç PRODUCTION SERVER:');
    await createTimeRequest(`${PROD_URL}/api/clinics?openNow=true&limit=3`, 'Production server test');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

checkTimeIssues();
