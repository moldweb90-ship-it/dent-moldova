const { drizzle } = require('drizzle-orm/postgres-js');
const postgres = require('postgres');
const { eq, sql } = require('drizzle-orm');
const { pgTable, text, varchar, integer, timestamp } = require('drizzle-orm/pg-core');

// Define cities table schema
const cities = pgTable("cities", {
  id: varchar("id").primaryKey(),
  nameRu: text("name_ru").notNull(),
  nameRo: text("name_ro").notNull(),
  slugRu: varchar("slug_ru", { length: 255 }),
  slugRo: varchar("slug_ro", { length: 255 }),
  sortOrder: integer("sort_order").default(0),
  createdAt: timestamp("created_at").defaultNow(),
});

// Transliteration functions
function transliterateRu(text) {
  const map = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
    '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
    '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
    '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
    '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
  };
  
  return text.split('').map(char => map[char] || char).join('');
}

function transliterateRo(text) {
  const map = {
    'ƒÉ': 'a', '√¢': 'a', '√Æ': 'i', '»ô': 's', '»õ': 't',
    'ƒÇ': 'A', '√Ç': 'A', '√é': 'I', '»ò': 'S', '»ö': 'T'
  };
  
  return text.split('').map(char => map[char] || char).join('');
}

function createSlug(text, language) {
  const transliterated = language === 'ru' ? transliterateRu(text) : transliterateRo(text);
  
  return transliterated
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '')
    .replace(/[\s_]+/g, '-')
    .replace(/^-+|-+$/g, '');
}

async function fixCitySlugs() {
  const connectionString = process.env.DATABASE_URL;
  
  if (!connectionString) {
    console.error('DATABASE_URL not found in environment');
    process.exit(1);
  }

  const sql = postgres(connectionString);
  const db = drizzle(sql);

  try {
    console.log('üîç Fetching all cities...');
    const allCities = await db.select().from(cities);
    
    console.log(`üìä Found ${allCities.length} cities`);
    
    for (const city of allCities) {
      const updates = {};
      
      if (!city.slugRu && city.nameRu) {
        updates.slugRu = createSlug(city.nameRu, 'ru');
        console.log(`  ‚úèÔ∏è  ${city.nameRu} -> slugRu: ${updates.slugRu}`);
      }
      
      if (!city.slugRo && city.nameRo) {
        updates.slugRo = createSlug(city.nameRo, 'ro');
        console.log(`  ‚úèÔ∏è  ${city.nameRo} -> slugRo: ${updates.slugRo}`);
      }
      
      if (Object.keys(updates).length > 0) {
        await db.update(cities)
          .set(updates)
          .where(eq(cities.id, city.id));
        console.log(`  ‚úÖ Updated: ${city.nameRu} / ${city.nameRo}`);
      } else {
        console.log(`  ‚è≠Ô∏è  Skipped: ${city.nameRu} (already has slugs)`);
      }
    }
    
    console.log('\n‚úÖ All cities updated successfully!');
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await sql.end();
  }
}

fixCitySlugs();

